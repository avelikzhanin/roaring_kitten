import asyncio
import os
import logging
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Set
import aiohttp
import json
from dataclasses import dataclass
from enum import Enum
from concurrent.futures import ThreadPoolExecutor

# Telegram Bot
import telegram
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes

# Tinkoff Invest API
from tinkoff.invest import Client, RequestError, MarketDataRequest, GetCandlesRequest
from tinkoff.invest.schemas import CandleInterval, Instrument
from tinkoff.invest.utils import now

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class Signal:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    symbol: str
    entry_price: float
    stop_loss: float
    take_profit_1: float
    take_profit_2: float
    take_profit_3: float
    signal_time: datetime
    setup_description: str
    risk_reward_1: float
    risk_reward_2: float
    risk_reward_3: float

class SignalStatus(Enum):
    WAITING = "waiting"
    TRIGGERED = "triggered"
    CLOSED = "closed"

# –¢–æ–ø-10 –∞–∫—Ü–∏–π –ú–æ—Å–±–∏—Ä–∂–∏ (—Ç–∏–∫–µ—Ä—ã –¥–ª—è Tinkoff API)
TOP_MOEX_STOCKS = [
    "SBER",    # –°–±–µ—Ä–±–∞–Ω–∫
    "GAZP",    # –ì–∞–∑–ø—Ä–æ–º
    "LKOH",    # –õ–£–ö–û–ô–õ
    "YNDX",    # –Ø–Ω–¥–µ–∫—Å
    "GMKN",    # –ì–ú–ö –ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å
    "NVTK",    # –ù–æ–≤–∞—Ç—ç–∫
    "ROSN",    # –†–æ—Å–Ω–µ—Ñ—Ç—å
    "MTSS",    # –ú–¢–°
    "MGNT",    # –ú–∞–≥–Ω–∏—Ç
    "PLZL"     # –ü–æ–ª—é—Å
]

class TradingBot:
    def __init__(self):
        self.tinkoff_token = os.getenv('TINKOFF_TOKEN')
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        
        self.application = Application.builder().token(self.telegram_token).build()
        self.active_signals: Dict[str, Signal] = {}
        self.instruments_cache: Dict[str, str] = {}  # ticker -> figi
        self.subscribers: Set[int] = set()  # –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.start_time = datetime.now()
        self.executor = ThreadPoolExecutor(max_workers=4)  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ Tinkoff API
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.application.add_handler(CommandHandler("unsubscribe", self.unsubscribe_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("signals", self.signals_command))
        self.application.add_handler(CommandHandler("help", self.help_command))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Bot!</b>

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ø-10 –∞–∫—Ü–∏–π –ú–æ—Å–±–∏—Ä–∂–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–±–æ—è EMA33.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
/signals - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> /subscribe
        """
        await update.message.reply_text(welcome_message, parse_mode='HTML')

    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã"""
        user_id = update.effective_user.id
        if user_id not in self.subscribers:
            self.subscribers.add(user_id)
            await update.message.reply_text(
                "‚úÖ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–µ.",
                parse_mode='HTML'
            )
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã.")

    async def unsubscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤"""
        user_id = update.effective_user.id
        if user_id in self.subscribers:
            self.subscribers.remove(user_id)
            await update.message.reply_text("‚ùå <b>–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.</b>", parse_mode='HTML')
            logger.info(f"–û—Ç–ø–∏—Å–∞–ª—Å—è: {user_id}")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã.")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        active_signals_count = len(self.active_signals)
        subscribers_count = len(self.subscribers)
        uptime = datetime.now() - self.start_time
        
        status_message = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>

üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {subscribers_count}
üö® <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:</b> {active_signals_count}
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {str(uptime).split('.')[0]}
üìà <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏:</b> {len(TOP_MOEX_STOCKS)}

<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b> {', '.join(TOP_MOEX_STOCKS)}
        """
        await update.message.reply_text(status_message, parse_mode='HTML')

    async def signals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        if not self.active_signals:
            await update.message.reply_text("üì≠ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç.</b>", parse_mode='HTML')
            return

        message = "üîî <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</b>\n\n"
        for ticker, signal in self.active_signals.items():
            age = datetime.now() - signal.signal_time
            message += f"üìä <b>{ticker}</b>\n"
            message += f"üí∞ –í—Ö–æ–¥: {signal.entry_price:.2f} ‚ÇΩ\n"
            message += f"‚è∞ {age.seconds//3600}—á {(age.seconds//60)%60}–º –Ω–∞–∑–∞–¥\n\n"

        await update.message.reply_text(message, parse_mode='HTML')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å"""
        help_message = """
üìö <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

<b>üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>
1. –û—Ç—Å–∫–æ–∫ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
2. –ü—Ä–æ–±–æ–π EMA33 –≤–≤–µ—Ä—Ö
3. –†–µ—Ç–µ—Å—Ç EMA33
4. –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–±–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞

<b>üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π:</b>
‚Ä¢ TP1 (1/3): –ü—Ä–∏ R/R 1:1 ‚Üí SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
‚Ä¢ TP2 (1/3): –ü—Ä–∏ R/R 1:2 ‚Üí SL –Ω–∞ —É—Ä–æ–≤–µ–Ω—å TP1
‚Ä¢ TP3 (1/3): –ü—Ä–∏ R/R 1:3 ‚Üí –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ

<b>‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>
‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –¢–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è: 10:00-18:30 –ú–°–ö
‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: 1 —á–∞—Å

<b>üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏:</b>
SBER, GAZP, LKOH, YNDX, GMKN, NVTK, ROSN, MTSS, MGNT, PLZL

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!
        """
        await update.message.reply_text(help_message, parse_mode='HTML')

    def _get_instruments_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            with Client(self.tinkoff_token) as client:
                instruments = client.instruments.shares()
                instruments_dict = {}
                for instrument in instruments.instruments:
                    if instrument.ticker in TOP_MOEX_STOCKS:
                        instruments_dict[instrument.ticker] = instrument.figi
                return instruments_dict
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            return {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            self.instruments_cache = await loop.run_in_executor(
                self.executor, self._get_instruments_sync
            )
            
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(self.instruments_cache)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    async def broadcast_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.subscribers:
            return
            
        failed_sends = []
        for chat_id in self.subscribers.copy():
            try:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")
                failed_sends.append(chat_id)
                
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for chat_id in failed_sends:
            self.subscribers.discard(chat_id)

    def _get_candles_sync(self, figi: str, interval: CandleInterval, days: int = 2) -> pd.DataFrame:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with Client(self.tinkoff_token) as client:
                from_time = now() - timedelta(days=days)
                to_time = now()
                
                request = GetCandlesRequest(
                    figi=figi,
                    from_=from_time,
                    to=to_time,
                    interval=interval
                )
                
                candles = client.market_data.get_candles(request=request)
                
                data = []
                for candle in candles.candles:
                    data.append({
                        'time': candle.time,
                        'open': float(candle.open.units + candle.open.nano / 1e9),
                        'high': float(candle.high.units + candle.high.nano / 1e9),
                        'low': float(candle.low.units + candle.low.nano / 1e9),
                        'close': float(candle.close.units + candle.close.nano / 1e9),
                        'volume': candle.volume
                    })
                
                df = pd.DataFrame(data)
                if not df.empty:
                    df['time'] = pd.to_datetime(df['time'])
                    df = df.set_index('time')
                    
                return df
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {figi}: {e}")
            return pd.DataFrame()

    async def get_candles(self, figi: str, interval: CandleInterval, days: int = 2) -> pd.DataFrame:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            self.executor, self._get_candles_sync, figi, interval, days
        )

    def calculate_ema(self, prices: pd.Series, period: int) -> pd.Series:
        """–†–∞—Å—á–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π"""
        return prices.ewm(span=period).mean()

    def detect_support_level(self, df: pd.DataFrame, lookback: int = 20) -> float:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        if len(df) < lookback:
            return df['low'].min()
        
        recent_lows = df['low'].tail(lookback)
        return recent_lows.min()

    def check_ema_breakout(self, df: pd.DataFrame, ema_period: int = 33) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–æ—è EMA –≤–≤–µ—Ä—Ö"""
        if len(df) < ema_period + 5:
            return False
            
        df['ema33'] = self.calculate_ema(df['close'], ema_period)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3-5 —Å–≤–µ—á–µ–π –Ω–∞ –ø—Ä–æ–±–æ–π
        for i in range(-5, 0):
            if (df.iloc[i-1]['close'] <= df.iloc[i-1]['ema33'] and 
                df.iloc[i]['close'] > df.iloc[i]['ema33']):
                return True
        return False

    def check_retest_ema(self, df: pd.DataFrame, ema_period: int = 33) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ç–µ—Å—Ç–∞ EMA33"""
        if len(df) < ema_period + 10:
            return False
            
        df['ema33'] = self.calculate_ema(df['close'], ema_period)
        
        # –ò—â–µ–º –∫–∞—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ EMA33 –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è
        recent_candles = df.tail(5)
        for _, candle in recent_candles.iterrows():
            if abs(candle['low'] - candle['ema33']) / candle['ema33'] < 0.005:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 0.5%
                return True
        return False

    def analyze_setup(self, ticker: str, df: pd.DataFrame) -> Optional[Signal]:
        """–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–∞–ø–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            if len(df) < 50:
                return None
                
            # –†–∞—Å—á–µ—Ç EMA33
            df['ema33'] = self.calculate_ema(df['close'], 33)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç—Å–∫–æ–∫–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            support_level = self.detect_support_level(df, 20)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–æ–π EMA33
            ema_breakout = self.check_ema_breakout(df)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ç–µ—Å—Ç EMA33
            ema_retest = self.check_retest_ema(df)
            
            if not (ema_breakout and ema_retest):
                return None
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏
            current_price = df['close'].iloc[-1]
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è EMA33
            breakout_index = None
            for i in range(len(df)-10, len(df)):
                if (df.iloc[i-1]['close'] <= df.iloc[i-1]['ema33'] and 
                    df.iloc[i]['close'] > df.iloc[i]['ema33']):
                    breakout_index = i
                    break
                    
            if breakout_index is None:
                return None
                
            # –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è
            max_after_breakout = df['high'].iloc[breakout_index:].max()
            entry_price = max_after_breakout + (current_price * 0.001)  # +0.1%
            
            # Stop Loss (–≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –º–∏–Ω–∏–º—É–º –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è EMA33)
            min_after_breakout = df['low'].iloc[breakout_index:].min()
            stop_loss = min_after_breakout - (current_price * 0.001)  # -0.1%
            
            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Ä–∏—Å–∫–∞
            risk_distance = entry_price - stop_loss
            
            # –†–∞—Å—á–µ—Ç Take Profit —É—Ä–æ–≤–Ω–µ–π
            tp1 = entry_price + max(risk_distance, entry_price * 0.01)  # 1% –∏–ª–∏ R/R 1:1
            tp2 = entry_price + (risk_distance * 2)  # R/R 1:2
            tp3 = entry_price + (risk_distance * 3)  # R/R 1:3
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
            if (entry_price > current_price and 
                risk_distance > 0 and 
                risk_distance / entry_price < 0.03):  # –†–∏—Å–∫ –Ω–µ –±–æ–ª–µ–µ 3%
                
                return Signal(
                    symbol=ticker,
                    entry_price=entry_price,
                    stop_loss=stop_loss,
                    take_profit_1=tp1,
                    take_profit_2=tp2,
                    take_profit_3=tp3,
                    signal_time=datetime.now(),
                    setup_description="EMA33 breakout with retest",
                    risk_reward_1=round((tp1 - entry_price) / risk_distance, 2),
                    risk_reward_2=round((tp2 - entry_price) / risk_distance, 2),
                    risk_reward_3=round((tp3 - entry_price) / risk_distance, 2)
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {ticker}: {e}")
            return None

    def format_signal_message(self, signal: Signal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏–≥–Ω–∞–ª–æ–º"""
        risk_amount = signal.entry_price - signal.stop_loss
        
        message = f"""
üöÄ <b>–ù–û–í–´–ô –°–ò–ì–ù–ê–õ</b>

üìä <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {signal.symbol}
‚è∞ <b>–í—Ä–µ–º—è:</b> {signal.signal_time.strftime('%H:%M:%S %d.%m.%Y')}

üí° <b>–°–µ—Ç–∞–ø:</b> {signal.setup_description}

üìà <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏:</b>
üéØ <b>–í—Ö–æ–¥:</b> {signal.entry_price:.2f} ‚ÇΩ
üõë <b>Stop Loss:</b> {signal.stop_loss:.2f} ‚ÇΩ
üí∞ <b>–†–∏—Å–∫:</b> {risk_amount:.2f} ‚ÇΩ ({(risk_amount/signal.entry_price*100):.1f}%)

üéØ <b>Take Profit:</b>
‚Ä¢ <b>TP1 (1/3):</b> {signal.take_profit_1:.2f} ‚ÇΩ | R/R: 1:{signal.risk_reward_1}
‚Ä¢ <b>TP2 (1/3):</b> {signal.take_profit_2:.2f} ‚ÇΩ | R/R: 1:{signal.risk_reward_2}
‚Ä¢ <b>TP3 (1/3):</b> {signal.take_profit_3:.2f} ‚ÇΩ | R/R: 1:{signal.risk_reward_3}

üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π:</b>
1Ô∏è‚É£ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP1 ‚Üí –∑–∞–∫—Ä—ã—Ç—å 1/3 + SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
2Ô∏è‚É£ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP2 ‚Üí –∑–∞–∫—Ä—ã—Ç—å 1/3 + SL –Ω–∞ —É—Ä–æ–≤–µ–Ω—å TP1
3Ô∏è‚É£ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP3 ‚Üí –∑–∞–∫—Ä—ã—Ç—å –æ—Å—Ç–∞—Ç–æ–∫

#TradingSignal #{signal.symbol}
        """
        return message.strip()

    async def scan_instruments(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã"""
        signals_found = 0
        
        for ticker in TOP_MOEX_STOCKS:
            try:
                if ticker not in self.instruments_cache:
                    continue
                    
                figi = self.instruments_cache[ticker]
                
                # –ü–æ–ª—É—á–∞–µ–º 1-—á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏
                df = await self.get_candles(figi, CandleInterval.CANDLE_INTERVAL_HOUR, days=5)
                
                if df.empty:
                    continue
                    
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–∞–ø
                signal = self.analyze_setup(ticker, df)
                
                if signal and ticker not in self.active_signals:
                    # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω
                    self.active_signals[ticker] = signal
                    message = self.format_signal_message(signal)
                    await self.broadcast_message(message)
                    signals_found += 1
                    logger.info(f"–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {ticker} @ {signal.entry_price}")
                    
                await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {ticker}: {e}")
                continue
                
        if signals_found == 0:
            logger.info("–ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    async def monitor_active_signals(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        for ticker, signal in list(self.active_signals.items()):
            try:
                if ticker not in self.instruments_cache:
                    continue
                    
                figi = self.instruments_cache[ticker]
                df = await self.get_candles(figi, CandleInterval.CANDLE_INTERVAL_1_MIN, days=1)
                
                if df.empty:
                    continue
                    
                current_price = df['close'].iloc[-1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
                if current_price >= signal.entry_price:
                    message = f"""
üî• <b>–°–ò–ì–ù–ê–õ –°–†–ê–ë–û–¢–ê–õ!</b>

üìä <b>{signal.symbol}</b>
üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {signal.entry_price:.2f} ‚ÇΩ
üìà <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞! –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É—Ä–æ–≤–Ω—è–º–∏ TP.
                    """
                    await self.broadcast_message(message.strip())
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ TP —É—Ä–æ–≤–Ω–µ–π
                if current_price >= signal.take_profit_1:
                    message = f"""
üéØ <b>TP1 –î–û–°–¢–ò–ì–ù–£–¢!</b>

üìä <b>{signal.symbol}</b>
üí∞ <b>TP1:</b> {signal.take_profit_1:.2f} ‚ÇΩ
üìà <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

–ó–∞–∫—Ä—ã—Ç—å 1/3 –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫!
                    """
                    await self.broadcast_message(message.strip())
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {ticker}: {e}")

    async def cleanup_old_signals(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)"""
        current_time = datetime.now()
        to_remove = []
        
        for ticker, signal in self.active_signals.items():
            if current_time - signal.signal_time > timedelta(hours=24):
                to_remove.append(ticker)
                
        for ticker in to_remove:
            del self.active_signals[ticker]
            logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Å–∏–≥–Ω–∞–ª: {ticker}")

    async def run_scanner(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞...")
        
        while True:
            try:
                # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è (10:00 - 18:30 –ú–°–ö)
                current_hour = datetime.now().hour
                if 7 <= current_hour <= 15:  # UTC –≤—Ä–µ–º—è (–ú–°–ö-3)
                    await self.scan_instruments()
                    await self.monitor_active_signals()
                    await self.cleanup_old_signals()
                else:
                    logger.info("–í–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        await self.application.initialize()
        await self.application.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        polling_task = asyncio.create_task(self.application.updater.start_polling())
        scanner_task = asyncio.create_task(self.run_scanner())
        
        try:
            await asyncio.gather(polling_task, scanner_task)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            await self.application.stop()
            self.executor.shutdown(wait=True)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TINKOFF_TOKEN', 'TELEGRAM_BOT_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        return
        
    bot = TradingBot()
    await bot.initialize()
    await bot.start_bot()

if __name__ == "__main__":
    asyncio.run(main())
