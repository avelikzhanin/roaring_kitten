import asyncio
import logging
import os
from datetime import datetime, timedelta, timezone
from typing import List, Optional
import pandas as pd
from dataclasses import dataclass

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from telegram.error import TelegramError, TimedOut, NetworkError

# –ò–∑–º–µ–Ω–∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
from src.data_provider import TinkoffDataProvider
from src.indicators import TechnicalIndicators
from src.gpt_analyzer import GPTMarketAnalyzer, GPTAdvice
from src.database import DatabaseManager

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    symbol: str
    timestamp: datetime
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ë–î"""
    
    def __init__(self, telegram_token: str, tinkoff_token: str, database_url: str, openai_token: Optional[str] = None):
        self.telegram_token = telegram_token
        self.tinkoff_provider = TinkoffDataProvider(tinkoff_token)
        self.gpt_analyzer = GPTMarketAnalyzer(openai_token) if openai_token else None
        self.db = DatabaseManager(database_url)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ - —Ç–µ–ø–µ—Ä—å –≤—Å—ë –≤ –ë–î
        self.app: Optional[Application] = None
        self.is_running = False
        self._signal_tasks = {}  # –°–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
        logger.info(f"   üìä Tinkoff API: ‚úÖ")
        logger.info(f"   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ")
        logger.info(f"   ü§ñ GPT –∞–Ω–∞–ª–∏–∑: {'‚úÖ' if self.gpt_analyzer else '‚ùå (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'}")
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î"""
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
            logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            await self.db.initialize()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
            
            # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
            self.app = Application.builder().token(self.telegram_token).build()
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CommandHandler("stop", self.stop_command))
            self.app.add_handler(CommandHandler("signal", self.signal_command))
            self.app.add_handler(CommandHandler("portfolio", self.portfolio_command))
            self.app.add_handler(CallbackQueryHandler(self.handle_callback))
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –†–µ–≤—É—â–µ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞ —Å –ø–æ–ª–Ω–æ–π –ë–î –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
            
            # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π
            self.is_running = True
            await self.start_monitoring_all_tickers()
            
            # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
            await self.app.initialize()
            await self.app.start()
            
            # 6. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
            try:
                logger.info("üîß –£–¥–∞–ª—è–µ–º webhook –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º polling...")
                await self.app.bot.delete_webhook(drop_pending_updates=True)
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                
                await self.app.updater.start_polling(
                    drop_pending_updates=True,
                    allowed_updates=['message', 'callback_query'],
                    timeout=30,
                    read_timeout=30,
                    write_timeout=30,
                    connect_timeout=30,
                    pool_timeout=30
                )
                logger.info("‚úÖ Telegram polling –∑–∞–ø—É—â–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
                # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                await self.app.updater.start_polling(drop_pending_updates=True)
                logger.info("‚úÖ Telegram polling –∑–∞–ø—É—â–µ–Ω (fallback —Ä–µ–∂–∏–º)")
            
            # 7. –ñ–¥–µ–º –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ polling
            try:
                logger.info("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                await asyncio.gather(*self._signal_tasks.values())
            except asyncio.CancelledError:
                logger.info("–ó–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω—ã")
            except Exception as polling_error:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {polling_error}")
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                await asyncio.sleep(5)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start(): {e}")
            await self.shutdown()
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ë–î"""
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
        
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        for symbol, task in self._signal_tasks.items():
            if task and not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {symbol} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if self.app:
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater
                if self.app.updater and self.app.updater.running:
                    logger.info("üîß –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater...")
                    await self.app.updater.stop()
                
                # –£–¥–∞–ª—è–µ–º webhook –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                try:
                    await self.app.bot.delete_webhook(drop_pending_updates=True)
                    logger.info("üîß Webhook —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                await self.app.stop()
                await self.app.shutdown()
                logger.info("üîß Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        try:
            await self.db.close()
            logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
        
        logger.info("üõë –ö–æ—Ç—ë–Ω–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_monitoring_all_tickers(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
        available_tickers = await self.db.get_available_tickers()
        
        for ticker in available_tickers:
            symbol = ticker['symbol']
            if symbol not in self._signal_tasks:
                logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol}...")
                self._signal_tasks[symbol] = asyncio.create_task(
                    self.check_signals_periodically(symbol)
                )
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self._signal_tasks)} –∞–∫—Ü–∏–π")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
        chat_id = update.effective_chat.id
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        success = await self.db.add_or_update_user(
            telegram_id=chat_id,
            username=user.username if user else None,
            first_name=user.first_name if user else None
        )
        
        if success:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ SBER –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await self.db.subscribe_user_to_ticker(chat_id, 'SBER')
            
            gpt_status = "ü§ñ <b>GPT –∞–Ω–∞–ª–∏–∑:</b> –≤–∫–ª—é—á–µ–Ω —Å —É—Ä–æ–≤–Ω—è–º–∏ TP/SL" if self.gpt_analyzer else "üìä <b>–†–µ–∂–∏–º:</b> —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            
            await update.message.reply_text(
                "üê± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–µ–≤—É—â–µ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞!</b>\n\n"
                "üìà –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∞–∫—Ü–∏—è–º\n"
                "üîî –ö–æ—Ç—ë–Ω–æ–∫ –±—É–¥–µ—Ç —Å–æ–æ–±—â–∞—Ç—å –æ —Å–∏–≥–Ω–∞–ª–∞—Ö –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏\n\n"
                f"{gpt_status}\n\n"
                "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
                "‚Ä¢ EMA20 - —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π\n"
                "‚Ä¢ ADX > 25 - —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥\n"
                "‚Ä¢ +DI > -DI (—Ä–∞–∑–Ω–∏—Ü–∞ > 1) - –≤–æ—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ\n"
                "‚Ä¢ üî• ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞, –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                "/signal - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã\n"
                "/portfolio - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏",
                parse_mode='HTML'
            )
            logger.info(f"üë§ –ù–æ–≤—ã–π/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id} (@{user.username if user else 'unknown'})")
        else:
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML'
            )
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ë–î"""
        chat_id = update.effective_chat.id
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await self.db.deactivate_user(chat_id)
        
        await update.message.reply_text(
            "‚ùå <b>–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä—ã—á–∞–Ω–∏—è –∫–æ—Ç—ë–Ω–∫–∞</b>\n\n"
            "–í—Å–µ –≤–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            parse_mode='HTML'
        )
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: {chat_id}")
    
    async def portfolio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –ø–æ–¥–ø–∏—Å–æ–∫"""
        chat_id = update.effective_chat.id
        subscriptions = await self.db.get_user_subscriptions(chat_id)
        available_tickers = await self.db.get_available_tickers()
        
        if subscriptions:
            sub_list = [f"üîî {sub['symbol']} ({sub['name']})" for sub in subscriptions]
            message = f"üìä <b>–í–ê–® –ü–û–†–¢–§–ï–õ–¨</b>\n\n<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n" + "\n".join(sub_list)
        else:
            message = "üìä <b>–í–ê–® –ü–û–†–¢–§–ï–õ–¨</b>\n\n<b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫</b>"
        
        keyboard = []
        subscribed_symbols = {sub['symbol'] for sub in subscriptions}
        
        for ticker in available_tickers:
            symbol = ticker['symbol']
            name = ticker['name']
            if symbol in subscribed_symbols:
                button_text = f"üîî {symbol} ({name}) ‚ùå"
                callback_data = f"unsub_{symbol}"
            else:
                button_text = f"‚ö™ {symbol} ({name}) ‚ûï"
                callback_data = f"sub_{symbol}"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã" - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /signal
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signal - –ø–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            chat_id = update.effective_chat.id
            subscriptions = await self.db.get_user_subscriptions(chat_id)
            
            if not subscriptions:
                await update.message.reply_text(
                    "üìä <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /portfolio –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏",
                    parse_mode='HTML'
                )
                return
            
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ - —Å—Ä–∞–∑—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë
            if len(subscriptions) == 1:
                symbol = subscriptions[0]['symbol']
                name = subscriptions[0]['name']
                
                await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol} ({name})...")
                
                try:
                    signal = await self.analyze_market(symbol)
                    
                    if signal:
                        message = f"""‚úÖ <b>–ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò {symbol}</b>

{self.format_signal_message(signal)}

‚è∞ <b>–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞:</b> {signal.timestamp.strftime('%H:%M %d.%m.%Y')}"""
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                        if self.gpt_analyzer:
                            try:
                                gpt_advice = await self.get_gpt_analysis(signal, is_manual_check=True)
                                if gpt_advice:
                                    message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice)}"
                                else:
                                    message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                            except Exception:
                                message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                    else:
                        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–∫—Ü–∏–∏
                        message = await self.get_detailed_market_status(symbol)
                    
                    await update.message.reply_text(message, parse_mode='HTML')
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                    await update.message.reply_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>", parse_mode='HTML')
                
                return
            
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            message = f"üîç <b>–ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í</b>\n\nüìä <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ({len(subscriptions)}):</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
            keyboard = []
            
            for sub in subscriptions:
                symbol = sub['symbol']
                name = sub['name']
                keyboard.append([InlineKeyboardButton(f"üìä {symbol} ({name})", callback_data=f"analyze_{symbol}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /signal: {e}")
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML'
            )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        chat_id = query.message.chat_id
        data = query.data
        
        if data.startswith("sub_"):
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä
            symbol = data[4:]
            success = await self.db.subscribe_user_to_ticker(chat_id, symbol)
            
            if success:
                await query.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
                await self.show_portfolio_inline(query)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        
        elif data.startswith("unsub_"):
            # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–∏–∫–µ—Ä–∞
            symbol = data[6:]
            success = await self.db.unsubscribe_user_from_ticker(chat_id, symbol)
            
            if success:
                await query.answer(f"‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {symbol}")
                await self.show_portfolio_inline(query)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏", show_alert=True)
        
        elif data == "portfolio":
            await self.show_portfolio_inline(query)
        
        elif data.startswith("analyze_"):
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏
            symbol = data[8:]
            await self.analyze_single_ticker_from_signal(query, symbol)

    async def analyze_single_ticker_from_signal(self, query, symbol: str):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /signal"""
        try:
            await query.answer()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            ticker_info = await self.db.get_ticker_info(symbol)
            name = ticker_info['name'] if ticker_info else symbol
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            loading_message = await query.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol} ({name})...")
            
            signal = await self.analyze_market(symbol)
            
            if signal:
                message = f"""‚úÖ <b>–ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò {symbol}</b>

{self.format_signal_message(signal)}

‚è∞ <b>–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞:</b> {signal.timestamp.strftime('%H:%M %d.%m.%Y')}"""
                
                # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if self.gpt_analyzer:
                    try:
                        gpt_advice = await self.get_gpt_analysis(signal, is_manual_check=True)
                        if gpt_advice:
                            message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice)}"
                        else:
                            message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                    except Exception:
                        message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
            else:
                # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                message = await self.get_detailed_market_status(symbol)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            try:
                await loading_message.delete()
            except:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            await query.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol} –∏–∑ /signal: {e}")
            try:
                await loading_message.delete()
            except:
                pass
            await query.message.reply_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>", parse_mode='HTML')

    async def analyze_market(self, symbol: str) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 120 —á–∞—Å–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            candles = await self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=120)
            
            if len(candles) < 50:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                logger.warning(f"–ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol}")
                return None
            
            # –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # EMA20
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            
            # ADX, +DI, -DI
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            last_idx = -1
            current_price = closes[last_idx]
            current_ema20 = ema20[last_idx]
            current_adx = adx_data['adx'][last_idx]
            current_plus_di = adx_data['plus_di'][last_idx]
            current_minus_di = adx_data['minus_di'][last_idx]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
            if any(pd.isna(val) for val in [current_ema20, current_adx, current_plus_di, current_minus_di]):
                logger.warning(f"–ù–µ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è {symbol}")
                return None
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í {symbol}:")
            logger.info(f"üí∞ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ | EMA20: {current_ema20:.2f} ‚ÇΩ")
            logger.info(f"üìä ADX: {current_adx:.2f} | +DI: {current_plus_di:.2f} | -DI: {current_minus_di:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª–∞
            conditions = [
                current_price > current_ema20,              # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
                current_adx > 25,                           # ADX –±–æ–ª—å—à–µ 25 
                current_plus_di > current_minus_di,         # +DI –±–æ–ª—å—à–µ -DI
                current_plus_di - current_minus_di > 1,     # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1
            ]
            
            condition_names = [
                "–¶–µ–Ω–∞ > EMA20",
                "ADX > 25", 
                "+DI > -DI",
                "–†–∞–∑–Ω–∏—Ü–∞ DI > 1",
            ]
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
            for i, (condition, name) in enumerate(zip(conditions, condition_names)):
                logger.info(f"   {i+1}. {name}: {'‚úÖ' if condition else '‚ùå'}")
            
            if all(conditions):
                logger.info(f"üéâ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è {symbol} - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª!")
                return TradingSignal(
                    symbol=symbol,
                    timestamp=df.iloc[last_idx]['timestamp'],
                    price=current_price,
                    ema20=current_ema20,
                    adx=current_adx,
                    plus_di=current_plus_di,
                    minus_di=current_minus_di
                )
            else:
                logger.info(f"‚è≥ –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è {symbol}: {sum(conditions)}/{len(conditions)}")
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ {symbol}: {e}")
            return None
    
    async def get_gpt_analysis(self, signal: TradingSignal, is_manual_check: bool = False) -> Optional[GPTAdvice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        if not self.gpt_analyzer:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π
        try:
            ticker_info = await self.db.get_ticker_info(signal.symbol)
            if not ticker_info:
                return None
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=120)
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è GPT
            candles_data = []
            if not df.empty:
                for _, row in df.iterrows():
                    candles_data.append({
                        'timestamp': row['timestamp'],
                        'open': float(row['open']),
                        'high': float(row['high']),
                        'low': float(row['low']),
                        'close': float(row['close']),
                        'volume': int(row['volume'])
                    })
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è GPT {signal.symbol}: {e}")
            candles_data = None
        
        signal_data = {
            'price': signal.price,
            'ema20': signal.ema20,
            'adx': signal.adx,
            'plus_di': signal.plus_di,
            'minus_di': signal.minus_di
        }
        
        return await self.gpt_analyzer.analyze_signal(signal_data, candles_data, is_manual_check)
    
    async def check_peak_trend(self, symbol: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ (ADX > 45) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return None
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=120)
            
            if len(candles) < 50:
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                return None
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # ADX
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            current_adx = adx_data['adx'][-1]
            current_price = closes[-1]
            
            if pd.isna(current_adx):
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞
            if current_adx > 45:
                logger.info(f"üî• –ü–ò–ö –¢–†–ï–ù–î–ê {symbol}! ADX: {current_adx:.1f} > 45")
                return current_price
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ {symbol}: {e}")
            return None
    
    async def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –∞–∫—Ü–∏–∏"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return 0
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=50)
            if candles:
                df = self.tinkoff_provider.candles_to_dataframe(candles)
                return df.iloc[-1]['close'] if not df.empty else 0
            return 0
        except:
            return 0
    
    def calculate_profit_percentage(self, buy_price: float, sell_price: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if buy_price <= 0:
            return 0
        return ((sell_price - buy_price) / buy_price) * 100
    
    async def get_profit_summary(self, symbol: str, current_price: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∞–∫—Ü–∏–∏"""
        try:
            positions = await self.db.get_positions_for_profit_calculation(symbol)
            
            if not positions:
                return ""
            
            total_positions = sum(pos['position_count'] for pos in positions)
            profits = []
            
            for pos in positions:
                buy_price = float(pos['buy_price'])
                count = pos['position_count']
                profit_pct = self.calculate_profit_percentage(buy_price, current_price)
                profits.append((buy_price, profit_pct, count))
            
            # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            weighted_profit = sum(profit * count for _, profit, count in profits) / total_positions
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if weighted_profit > 0:
                profit_emoji = "üü¢"
                profit_text = f"+{weighted_profit:.2f}%"
            elif weighted_profit < 0:
                profit_emoji = "üî¥"
                profit_text = f"{weighted_profit:.2f}%"
            else:
                profit_emoji = "‚ö™"
                profit_text = "0.00%"
            
            if len(profits) == 1:
                # –û–¥–Ω–∞ —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
                buy_price = profits[0][0]
                return f"\n\nüí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏:</b> {profit_emoji} {profit_text}\nüìà <b>–í—Ö–æ–¥:</b> {buy_price:.2f} ‚ÇΩ ‚Üí <b>–í—ã—Ö–æ–¥:</b> {current_price:.2f} ‚ÇΩ"
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω –ø–æ–∫—É–ø–∫–∏
                return f"\n\nüí∞ <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {profit_emoji} {profit_text}\nüë• <b>–ü–æ–∑–∏—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–æ:</b> {total_positions}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è {symbol}: {e}")
            return ""
    
    async def send_peak_signal(self, symbol: str, current_price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —ç—Ç–æ–π –∞–∫—Ü–∏–∏
        subscribers = await self.db.get_subscribers_for_ticker(symbol)
        if not subscribers:
            logger.info(f"üìä –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {symbol}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π
        profit_info = await self.get_profit_summary(symbol, current_price)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –ø–∏–∫–∞ –≤ –ë–î
        signal_id = await self.db.save_signal(
            symbol=symbol,
            signal_type='PEAK',
            price=current_price,
            ema20=current_price * 0.98,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            adx=47,  # –ü–∏–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            plus_di=35,
            minus_di=20
        )
        
        message = f"""üî• <b>–ü–ò–ö –¢–†–ï–ù–î–ê - –ü–†–û–î–ê–Å–ú {symbol}!</b>

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

üìä <b>–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b>
ADX > 45 - –º—ã –Ω–∞ –ø–∏–∫–µ —Ç—Ä–µ–Ω–¥–∞!
–í—Ä–µ–º—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å.{profit_info}

üîç <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...</b>"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–∏–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.gpt_analyzer:
            try:
                temp_signal_data = {
                    'price': current_price,
                    'ema20': current_price * 0.98,
                    'adx': 47,
                    'plus_di': 35,
                    'minus_di': 20
                }
                
                gpt_advice = await self.gpt_analyzer.analyze_signal(temp_signal_data, None, is_manual_check=False)
                if gpt_advice and gpt_advice.recommendation == 'AVOID':
                    message += f"\n\nü§ñ <b>GPT –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç:</b> {gpt_advice.reasoning}"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–∏–∫–∞ {symbol}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        failed_chats = []
        successful_sends = 0
        
        for chat_id in subscribers:
            try:
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –ø–∏–∫–∞ {symbol} –≤ —á–∞—Ç {chat_id}")
                
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except TelegramError as e:
                if "Can't parse entities" in str(e):
                    logger.error(f"‚ùå HTML –æ—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–∏–∫–∞ {symbol} –¥–ª—è {chat_id}: {e}")
                    try:
                        simple_message = f"–ü–ò–ö –¢–†–ï–ù–î–ê - –ü–†–û–î–ê–Å–ú {symbol}!\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ\n\nADX > 45 - –º—ã –Ω–∞ –ø–∏–∫–µ —Ç—Ä–µ–Ω–¥–∞!\n–í—Ä–µ–º—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å."
                        await self.app.bot.send_message(
                            chat_id=chat_id,
                            text=simple_message
                        )
                        successful_sends += 1
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏–∫–∞ {symbol} –≤ —á–∞—Ç {chat_id}")
                    except Exception as fallback_error:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏–∫–∞ {symbol} –≤ {chat_id}: {fallback_error}")
                        failed_chats.append(chat_id)
                else:
                    logger.error(f"‚ùå Telegram –æ—à–∏–±–∫–∞ –ø–∏–∫–∞ {symbol} –¥–ª—è {chat_id}: {e}")
                    failed_chats.append(chat_id)
            except (TimedOut, NetworkError) as e:
                logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–∏–∫–∞ {symbol} –¥–ª—è {chat_id}: {e}")
                failed_chats.append(chat_id)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∏–∫–∞ {symbol} –¥–ª—è {chat_id}: {e}")
                failed_chats.append(chat_id)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –≤ –ë–î
        for chat_id in failed_chats:
            await self.db.deactivate_user(chat_id)
            logger.warning(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç: {chat_id}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î –¥–ª—è —ç—Ç–æ–π –∞–∫—Ü–∏–∏
        await self.db.close_positions(symbol, 'PEAK')
        
        logger.info(f"üî• –°–∏–≥–Ω–∞–ª –ø–∏–∫–∞ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {successful_sends} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, {len(failed_chats)} –æ—à–∏–±–æ–∫")

    async def send_signal_to_subscribers(self, signal: TradingSignal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —ç—Ç–æ–π –∞–∫—Ü–∏–∏
        subscribers = await self.db.get_subscribers_for_ticker(signal.symbol)
        if not subscribers:
            logger.info(f"üìä –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {signal.symbol}")
            return
            
        message = self.format_signal_message(signal)
        
        # –ü–æ–ª—É—á–∞–µ–º GPT –∞–Ω–∞–ª–∏–∑
        gpt_data = None
        if self.gpt_analyzer:
            logger.info(f"ü§ñ –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ GPT –¥–ª—è {signal.symbol}...")
            gpt_advice = await self.get_gpt_analysis(signal, is_manual_check=False)
            
            if gpt_advice:
                message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice)}"
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ GPT –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                gpt_data = {
                    'recommendation': gpt_advice.recommendation,
                    'confidence': gpt_advice.confidence,
                    'take_profit': gpt_advice.take_profit,
                    'stop_loss': gpt_advice.stop_loss
                }
                
                logger.info(f"ü§ñ GPT —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è {signal.symbol}: {gpt_advice.recommendation} ({gpt_advice.confidence}%)")
                
                if gpt_advice.take_profit and gpt_advice.stop_loss:
                    logger.info(f"üéØ TP: {gpt_advice.take_profit} | üõë SL: {gpt_advice.stop_loss}")
                
                if gpt_advice.recommendation == 'AVOID':
                    message += f"\n\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> GPT –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∫—É!"
                elif gpt_advice.recommendation == 'WEAK_BUY':
                    message += f"\n\n‚ö° <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ:</b> GPT —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫"
            else:
                message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GPT –∞–Ω–∞–ª–∏–∑ –¥–ª—è {signal.symbol}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        signal_id = await self.db.save_signal(
            symbol=signal.symbol,
            signal_type='BUY',
            price=signal.price,
            ema20=signal.ema20,
            adx=signal.adx,
            plus_di=signal.plus_di,
            minus_di=signal.minus_di,
            gpt_data=gpt_data
        )
        
        if not signal_id:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª {signal.symbol} –≤ –ë–î")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        failed_chats = []
        successful_sends = 0
        
        for chat_id in subscribers:
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                await self.db.open_position(chat_id, signal.symbol, signal_id, signal.price)
                
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except (TelegramError, TimedOut, NetworkError) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {signal.symbol} –≤ —á–∞—Ç {chat_id}: {e}")
                failed_chats.append(chat_id)
                
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –≤ –ë–î
        for chat_id in failed_chats:
            await self.db.deactivate_user(chat_id)
            logger.warning(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç: {chat_id}")
        
        logger.info(f"üìà –°–∏–≥–Ω–∞–ª {signal.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {successful_sends} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, {len(failed_chats)} –æ—à–∏–±–æ–∫")
    
    def format_signal_message(self, signal: TradingSignal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏–≥–Ω–∞–ª–æ–º"""
        return f"""üîî <b>–°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò {signal.symbol}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {signal.price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {signal.ema20:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ –≤—ã—à–µ)

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {signal.adx:.1f} (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ >25)
‚Ä¢ <b>+DI:</b> {signal.plus_di:.1f}
‚Ä¢ <b>-DI:</b> {signal.minus_di:.1f}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {signal.plus_di - signal.minus_di:.1f}"""
    
    async def check_signals_periodically(self, symbol: str):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
        logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}")
        
        while self.is_running:
            try:
                logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {symbol}...")
                signal = await self.analyze_market(symbol)
                conditions_met = signal is not None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º ADX –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ "–ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞"
                peak_signal = await self.check_peak_trend(symbol)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î –¥–ª—è —ç—Ç–æ–π –∞–∫—Ü–∏–∏
                active_positions = await self.db.get_active_positions_count(symbol)
                
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                if conditions_met and active_positions == 0:
                    # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ - –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    await self.send_signal_to_subscribers(signal)
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ü–û–ö–£–ü–ö–ò {symbol} –ø–æ —Ü–µ–Ω–µ {signal.price:.2f}")
                
                elif peak_signal and active_positions > 0:
                    # –ü–∏–∫ —Ç—Ä–µ–Ω–¥–∞ (ADX > 45) - –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    await self.send_peak_signal(symbol, peak_signal)
                    logger.info(f"üî• –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ü–ò–ö–ê –¢–†–ï–ù–î–ê {symbol} –ø–æ —Ü–µ–Ω–µ {peak_signal:.2f}")
                
                elif not conditions_met and active_positions > 0:
                    # –£—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è - –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    current_price = await self.get_current_price(symbol)
                    await self.send_cancel_signal(symbol, current_price)
                    logger.info(f"‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –û–¢–ú–ï–ù–´ {symbol}")
                
                elif conditions_met and active_positions > 0:
                    logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ {symbol} –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º")
                
                else:
                    logger.info(f"üìä –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}...")
                
                # –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è 20 –º–∏–Ω—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
                await asyncio.sleep(1200)  # 20 –º–∏–Ω—É—Ç = 1200 —Å–µ–∫—É–Ω–¥
                
            except asyncio.CancelledError:
                logger.info(f"–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ {symbol}: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def send_cancel_signal(self, symbol: str, current_price: float = 0):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —ç—Ç–æ–π –∞–∫—Ü–∏–∏
        subscribers = await self.db.get_subscribers_for_ticker(symbol)
        if not subscribers:
            logger.info(f"üìä –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {symbol}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π
        profit_info = await self.get_profit_summary(symbol, current_price)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –≤ –ë–î
        signal_id = await self.db.save_signal(
            symbol=symbol,
            signal_type='SELL',
            price=current_price,
            ema20=current_price * 0.98,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            adx=20,  # –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥
            plus_di=25,
            minus_di=30
        )
        
        message = f"""‚ùå <b>–°–ò–ì–ù–ê–õ –û–¢–ú–ï–ù–ï–ù {symbol}</b>

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</b>
–£—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è:
‚Ä¢ –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ EMA20
‚Ä¢ ADX —Å–Ω–∏–∑–∏–ª—Å—è < 25
‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ +DI/-DI
‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ DI —Å—Ç–∞–ª–∞ < 1{profit_info}

üîç <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...</b>"""
        
        failed_chats = []
        successful_sends = 0
        
        for chat_id in subscribers:
            try:
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã {symbol} –≤ —á–∞—Ç {chat_id}")
                logger.debug(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã {symbol}: {message[:200]}...")
                
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except TelegramError as e:
                if "Can't parse entities" in str(e):
                    logger.error(f"‚ùå HTML –æ—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã {symbol} –¥–ª—è {chat_id}: {e}")
                    try:
                        simple_message = f"–°–ò–ì–ù–ê–õ –û–¢–ú–ï–ù–ï–ù {symbol}\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ\n\n–£—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è.\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥..."
                        await self.app.bot.send_message(
                            chat_id=chat_id,
                            text=simple_message
                        )
                        successful_sends += 1
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã {symbol} –≤ —á–∞—Ç {chat_id}")
                    except Exception as fallback_error:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã {symbol} –≤ {chat_id}: {fallback_error}")
                        failed_chats.append(chat_id)
                else:
                    logger.error(f"‚ùå Telegram –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã {symbol} –¥–ª—è {chat_id}: {e}")
                    failed_chats.append(chat_id)
            except (TimedOut, NetworkError) as e:
                logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã {symbol} –¥–ª—è {chat_id}: {e}")
                failed_chats.append(chat_id)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã {symbol} –¥–ª—è {chat_id}: {e}")
                failed_chats.append(chat_id)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –≤ –ë–î (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        for chat_id in failed_chats:
            await self.db.deactivate_user(chat_id)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î –¥–ª—è —ç—Ç–æ–π –∞–∫—Ü–∏–∏
        await self.db.close_positions(symbol, 'SELL')
        
        logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {successful_sends} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, {len(failed_chats)} –æ—à–∏–±–æ–∫")

    # === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ ===
    
    async def show_portfolio_inline(self, query):
        """–ü–æ–∫–∞–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
        await query.answer()
        
        chat_id = query.message.chat_id
        subscriptions = await self.db.get_user_subscriptions(chat_id)
        available_tickers = await self.db.get_available_tickers()
        
        if subscriptions:
            sub_list = [f"üîî {sub['symbol']} ({sub['name']})" for sub in subscriptions]
            message = f"üìä <b>–í–ê–® –ü–û–†–¢–§–ï–õ–¨</b>\n\n<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n" + "\n".join(sub_list)
        else:
            message = "üìä <b>–í–ê–® –ü–û–†–¢–§–ï–õ–¨</b>\n\n<b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫</b>"
        
        keyboard = []
        subscribed_symbols = {sub['symbol'] for sub in subscriptions}
        
        for ticker in available_tickers:
            symbol = ticker['symbol']
            name = ticker['name']
            if symbol in subscribed_symbols:
                button_text = f"üîî {symbol} ({name}) ‚ùå"
                callback_data = f"unsub_{symbol}"
            else:
                button_text = f"‚ö™ {symbol} ({name}) ‚ûï"
                callback_data = f"sub_{symbol}"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã" - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /signal
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    
    async def analyze_single_ticker(self, query, symbol: str):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ callback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ)
            signal = await self.analyze_market(symbol)
            
            if signal:
                message = f"""‚úÖ <b>–ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò {symbol}</b>

{self.format_signal_message(signal)}

‚è∞ <b>–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞:</b> {signal.timestamp.strftime('%H:%M %d.%m.%Y')}"""
                
                if self.gpt_analyzer:
                    try:
                        gpt_advice = await self.get_gpt_analysis(signal, is_manual_check=True)
                        if gpt_advice:
                            message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice)}"
                        else:
                            message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                    except Exception:
                        message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
            else:
                message = await self.get_detailed_market_status(symbol)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
            await query.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            await query.message.reply_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>", parse_mode='HTML')
    
    async def analyze_single_ticker_inline(self, query, symbol: str):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            signal = await self.analyze_market(symbol)
            
            if signal:
                message = f"""‚úÖ <b>–ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò {symbol}</b>

{self.format_signal_message(signal)}

‚è∞ <b>–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞:</b> {signal.timestamp.strftime('%H:%M %d.%m.%Y')}"""
            else:
                message = await self.get_detailed_market_status(symbol)
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", callback_data="portfolio")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ inline –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")

    async def get_detailed_market_status(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
        try:
            logger.info(f"üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return f"‚ùå <b>–ê–∫—Ü–∏—è {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>"
            
            candles = await asyncio.wait_for(
                self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=120),
                timeout=30
            )
            
            if len(candles) < 50:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
                return f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol}")
                return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}</b>"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_price = closes[-1]
            current_ema20 = ema20[-1]
            current_adx = adx_data['adx'][-1]
            current_plus_di = adx_data['plus_di'][-1]
            current_minus_di = adx_data['minus_di'][-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            price_above_ema = current_price > current_ema20 if not pd.isna(current_ema20) else False
            strong_trend = current_adx > 25 if not pd.isna(current_adx) else False
            positive_direction = current_plus_di > current_minus_di if not pd.isna(current_plus_di) and not pd.isna(current_minus_di) else False
            di_difference = (current_plus_di - current_minus_di) > 1 if not pd.isna(current_plus_di) and not pd.isna(current_minus_di) else False
            peak_trend = current_adx > 45 if not pd.isna(current_adx) else False
            
            all_conditions_met = all([price_above_ema, strong_trend, positive_direction, di_difference])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ë–î –¥–ª—è —ç—Ç–æ–π –∞–∫—Ü–∏–∏
            active_positions = await self.db.get_active_positions_count(symbol)
            peak_warning = ""
            if peak_trend and active_positions > 0:
                peak_warning = f"\nüî• <b>–í–ù–ò–ú–ê–ù–ò–ï: ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}! –í—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!</b>"
            elif peak_trend:
                peak_warning = f"\nüî• <b>ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}</b>"
            
            message = f"""üìä <b>–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ê–ö–¶–ò–ô {symbol}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {current_ema20:.2f} ‚ÇΩ {'‚úÖ' if price_above_ema else '‚ùå'}

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {current_adx:.1f} {'‚úÖ' if strong_trend else '‚ùå'} (–Ω—É–∂–Ω–æ >25)
‚Ä¢ <b>+DI:</b> {current_plus_di:.1f}
‚Ä¢ <b>-DI:</b> {current_minus_di:.1f} {'‚úÖ' if positive_direction else '‚ùå'}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {current_plus_di - current_minus_di:.1f} {'‚úÖ' if di_difference else '‚ùå'} (–Ω—É–∂–Ω–æ >1){peak_warning}

{'üîî <b>–í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –æ–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª!</b>' if all_conditions_met else '‚è≥ <b>–û–∂–∏–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...</b>'}"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑
            if self.gpt_analyzer:
                try:
                    logger.info(f"ü§ñ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT –∞–Ω–∞–ª–∏–∑–∞ {symbol}...")
                    candles_data = []
                    try:
                        for _, row in df.iterrows():
                            candles_data.append({
                                'timestamp': row['timestamp'],
                                'open': float(row['open']),
                                'high': float(row['high']),
                                'low': float(row['low']),
                                'close': float(row['close']),
                                'volume': int(row['volume'])
                            })
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
                        candles_data = None
                    
                    signal_data = {
                        'price': current_price,
                        'ema20': current_ema20,
                        'adx': current_adx,
                        'plus_di': current_plus_di,
                        'minus_di': current_minus_di,
                        'conditions_met': all_conditions_met
                    }
                    
                    logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPT –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}...")
                    gpt_advice = await self.gpt_analyzer.analyze_signal(
                        signal_data, 
                        candles_data, 
                        is_manual_check=True,
                        symbol=symbol
                    )
                    if gpt_advice:
                        message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice, symbol)}"
                        logger.info(f"‚úÖ GPT –¥–∞–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è {symbol}: {gpt_advice.recommendation}")
                    else:
                        message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                        logger.warning(f"‚ö†Ô∏è GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
                    message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                    else:
                        message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                        logger.warning(f"‚ö†Ô∏è GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
                    message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
            
            return message
                
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol}")
            return f"‚ùå <b>–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö."
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")
            logger.error(f"üí• –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>\n\n–í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏."


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    tinkoff_token = os.getenv("TINKOFF_TOKEN") 
    database_url = os.getenv("DATABASE_URL")
    openai_token = os.getenv("OPENAI_API_KEY")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    if not telegram_token:
        logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
        
    if not tinkoff_token:
        logger.error("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    if not database_url:
        logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.error("   –ë–î –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π!")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤
    logger.info("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:")
    logger.info(f"   üì± Telegram: {'‚úÖ' if telegram_token else '‚ùå'}")
    logger.info(f"   üìä Tinkoff: {'‚úÖ' if tinkoff_token else '‚ùå'}")
    logger.info(f"   üóÑÔ∏è Database: {'‚úÖ' if database_url else '‚ùå'}")
    logger.info(f"   ü§ñ OpenAI: {'‚úÖ' if openai_token else '‚ùå (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = TradingBot(
        telegram_token=telegram_token,
        tinkoff_token=tinkoff_token,
        database_url=database_url,
        openai_token=openai_token
    )
    
    try:
        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await bot.start()
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        try:
            await bot.shutdown()
        except Exception as shutdown_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {shutdown_error}")
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ main()")


if __name__ == "__main__":
    logger.info("=" * 50)
    logger.info("üê± –†–ï–í–£–©–ò–ô –ö–û–¢–Å–ù–û–ö –°–¢–ê–†–¢–£–ï–¢ - –ú–£–õ–¨–¢–ò–ê–ö–¶–ò–ò")
    logger.info("=" * 50)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üîÑ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
    finally:
        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
