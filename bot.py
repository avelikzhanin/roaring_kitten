import asyncio
import logging
import os
from datetime import datetime, time
import pytz
from typing import Optional

from telegram import BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler

from src.data_provider import TinkoffDataProvider
from src.gpt_analyzer import GPTMarketAnalyzer
from src.database import DatabaseManager
from src.signal_processor import SignalProcessor
from src.message_sender import MessageSender
from src.user_interface import UserInterface

logger = logging.getLogger(__name__)

# –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# ============================================================================
# –¢–û–†–ì–û–í–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï MOEX (–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ 2025 –≥–æ–¥):
# ============================================================================
# –†–ê–ë–û–ß–ò–ï –î–ù–ò (–ü–Ω-–ü—Ç):
#   –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:  09:50 - 18:50 –ú–°–ö  
#   –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è:  19:00 - 23:49 –ú–°–ö
# 
# –í–´–•–û–î–ù–´–ï –î–ù–ò (–°–±-–í—Å —Å 1 –º–∞—Ä—Ç–∞ 2025):
#   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è: 10:00 - 19:00 –ú–°–ö
# 
# –ò—Ç–æ–≥–æ: –ø–æ—á—Ç–∏ 7 –¥–Ω–µ–π —Ç–æ—Ä–≥–æ–≤ –≤ –Ω–µ–¥–µ–ª—é!
# ============================================================================

class MarketTimeChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ MOEX - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∏ –≤–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏–∏"""
    
    def __init__(self):
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: 09:50 - 18:50 –ú–°–ö
        self.main_session_start = time(9, 50)
        self.main_session_end = time(18, 50)
        # –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è: 19:00 - 23:49 –ú–°–ö
        self.evening_session_start = time(19, 0)
        self.evening_session_end = time(23, 49)
        
    def is_market_open(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ä—ã–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∏ –≤–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏–∏)"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()
        
        # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
        if current_weekday >= 5:  # –°–±, –í—Å
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
        main_session = (self.main_session_start <= current_time <= self.main_session_end)
        evening_session = (self.evening_session_start <= current_time <= self.evening_session_end)
        
        return main_session or evening_session

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å GPT —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—â–∏–º –†–ï–ê–õ–¨–ù–´–ô ADX"""
    
    def __init__(self, telegram_token: str, tinkoff_token: str, database_url: str, openai_token: Optional[str] = None):
        self.telegram_token = telegram_token
        self.market_checker = MarketTimeChecker()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.tinkoff_provider = TinkoffDataProvider(tinkoff_token)
        self.gpt_analyzer = GPTMarketAnalyzer(openai_token) if openai_token else None
        self.db = DatabaseManager(database_url)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        self.signal_processor = SignalProcessor(self.tinkoff_provider, self.db, self.gpt_analyzer)
        self.message_sender = MessageSender(self.db, self.gpt_analyzer, self.tinkoff_provider)
        self.user_interface = UserInterface(self.db, self.signal_processor, self.gpt_analyzer)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.app: Optional[Application] = None
        self.is_running = False
        self._signal_tasks = {}
        
        strategy_info = "ü§ñ GPT —Å –†–ï–ê–õ–¨–ù–´–ú ADX + üìä EMA20" if self.gpt_analyzer else "üìä –¢–æ–ª—å–∫–æ EMA20"
        logger.info(f"ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_info})")
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –†–ï–ê–õ–¨–ù–û–ì–û ADX –æ—Ç GPT"""
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
            logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
            await self.db.initialize()
            
            # 2. –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –†–ï–ê–õ–¨–ù–´–ú ADX
            logger.info("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –†–ï–ê–õ–¨–ù–´–ú ADX –æ—Ç GPT...")
            try:
                from src.indicators import TechnicalIndicators
                
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                test_prices = [100, 101, 102, 103, 104]
                ema = TechnicalIndicators.calculate_ema(test_prices, 3)
                
                logger.info(f"‚úÖ EMA —Ä–∞–±–æ—Ç–∞–µ—Ç: {ema[-1]:.2f}")
                
                if self.gpt_analyzer:
                    logger.info("‚úÖ GPT –ø–æ–¥–∫–ª—é—á–µ–Ω - –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô ADX")
                    logger.info("üéØ –ö–†–ò–¢–ï–†–ò–ò –ü–û–ö–£–ü–ö–ò: EMA20 + ADX>25 + +DI>-DI + —Ä–∞–∑–Ω–∏—Ü–∞>1")
                    logger.info("üî• –ö–†–ò–¢–ï–†–ò–ô –ü–ò–ö–ê: ADX>45 (—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥)")
                else:
                    logger.warning("‚ö†Ô∏è GPT –æ—Ç–∫–ª—é—á–µ–Ω - ADX —Ä–∞—Å—á–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
                    logger.warning("üö® –ë–µ–∑ GPT –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –±—É–¥–µ—Ç –Ω–∏–∑–∫–∏–º!")
                
                logger.info("üéâ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –†–ï–ê–õ–¨–ù–´–ú ADX –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
                logger.error("üö® –ó–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º!")
            
            # 3. –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app = Application.builder().token(self.telegram_token).build()
            
            # 4. –ü–µ—Ä–µ–¥–∞–µ–º app –≤ –º–æ–¥—É–ª–∏
            self.message_sender.set_app(self.app)
            self.user_interface.set_app(self.app)
            
            # 5. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._add_handlers()
            
            # 6. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.is_running = True
            await self._start_monitoring()
            
            # 7. –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling
            await self.app.initialize()
            await self.app.start()
            
            # 8. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
            await self._setup_bot_menu()
            
            await self.app.bot.delete_webhook(drop_pending_updates=True)
            await self.app.updater.start_polling(drop_pending_updates=True)
            
            logger.info("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –†–ï–ê–õ–¨–ù–´–ú ADX –æ—Ç GPT!")
            await asyncio.gather(*self._signal_tasks.values())
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.shutdown()
            raise
    
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for symbol, task in self._signal_tasks.items():
            if task and not task.done():
                task.cancel()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if self.app:
            try:
                if self.app.updater and self.app.updater.running:
                    await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        await self.db.close()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _setup_bot_menu(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            commands = [
                BotCommand("portfolio", "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∞–∫—Ü–∏–∏"),
                BotCommand("signal", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã —Å ADX"),
            ]
            
            await self.app.bot.set_my_commands(commands)
            logger.info("üì± –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")
    
    def _add_handlers(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.user_interface.start_command))
        self.app.add_handler(CommandHandler("stop", self.user_interface.stop_command))
        self.app.add_handler(CommandHandler("signal", self.user_interface.signal_command))
        self.app.add_handler(CommandHandler("portfolio", self.user_interface.portfolio_command))
        self.app.add_handler(CallbackQueryHandler(self.user_interface.handle_callback))
    
    async def _start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
        available_tickers = await self.db.get_available_tickers()
        
        for ticker in available_tickers:
            symbol = ticker['symbol']
            self._signal_tasks[symbol] = asyncio.create_task(
                self._monitor_ticker(symbol)
            )
        
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(self._signal_tasks)} –∞–∫—Ü–∏–π —Å –†–ï–ê–õ–¨–ù–´–ú ADX")
    
    async def _monitor_ticker(self, symbol: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ —Å GPT —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—â–∏–º –†–ï–ê–õ–¨–ù–´–ô ADX"""
        logger.info(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –∑–∞–ø—É—â–µ–Ω (GPT —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ô ADX)")
        
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∏ –≤–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏–∏)
                if not self.market_checker.is_market_open():
                    # –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º 20 –º–∏–Ω—É—Ç (–∫–∞–∫ –≤ —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è)
                    await asyncio.sleep(1200)  # 20 –º–∏–Ω—É—Ç
                    continue
                
                # === –£–ú–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú ADX –û–¢ GPT ===
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫: –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä + GPT —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ô ADX
                signal = await self.signal_processor.analyze_market(symbol)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ –†–ï–ê–õ–¨–ù–´–ô ADX –æ—Ç GPT (ADX > 45)
                peak_signal = await self.signal_processor.check_peak_trend(symbol)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                active_positions = await self.db.get_active_positions_count(symbol)
                
                # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                if signal and active_positions == 0:
                    # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ —Å –†–ï–ê–õ–¨–ù–´–ú ADX –æ—Ç GPT
                    await self.message_sender.send_buy_signal(signal)
                    adx_info = f"ADX={signal.adx:.1f}" if signal.adx > 0 else "ADX=—Ä–∞—Å—á–µ—Ç"
                    logger.info(f"üìà –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ {symbol}: {signal.price:.2f} ({adx_info}, GPT: {getattr(signal, 'gpt_recommendation', 'N/A')})")
                
                elif peak_signal and active_positions > 0:
                    # –ü–∏–∫ —Ç—Ä–µ–Ω–¥–∞ (–†–ï–ê–õ–¨–ù–´–ô ADX > 45 –æ—Ç GPT)
                    await self.message_sender.send_peak_signal(symbol, peak_signal)
                    logger.info(f"üî• –ü–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}: {peak_signal:.2f} (–†–ï–ê–õ–¨–ù–´–ô ADX > 45)")
                
                elif not signal and active_positions > 0:
                    # –û—Ç–º–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞ (–†–ï–ê–õ–¨–ù–´–ï ADX —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è)
                    current_price = await self.signal_processor.get_current_price(symbol)
                    await self.message_sender.send_cancel_signal(symbol, current_price)
                    logger.info(f"‚ùå –û—Ç–º–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞ {symbol} (ADX —É—Å–ª–æ–≤–∏—è –Ω–∞—Ä—É—à–µ–Ω—ã)")
                
                else:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if signal:
                        adx_info = f"(ADX={signal.adx:.1f})" if signal.adx > 0 else ""
                        logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {symbol} –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º {adx_info}")
                    else:
                        logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª {symbol} (–∞–Ω–∞–ª–∏–∑ ADX...)...")
                
                # –í—Å–µ–≥–¥–∞ –∂–¥–µ–º 20 –º–∏–Ω—É—Ç
                await asyncio.sleep(1200)  # 20 –º–∏–Ω—É—Ç
                
            except asyncio.CancelledError:
                logger.info(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {symbol}: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –†–ï–ê–õ–¨–ù–û–ì–û ADX –æ—Ç GPT"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ—Ç—ë–Ω–∫–∞...")
    logger.info("‚ö° –£–ú–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: EMA20 + GPT —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ô ADX")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    tinkoff_token = os.getenv("TINKOFF_TOKEN") 
    database_url = os.getenv("DATABASE_URL")
    openai_token = os.getenv("OPENAI_API_KEY")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not telegram_token:
        logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    if not tinkoff_token:
        logger.error("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    if not database_url:
        logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï —Å –†–ï–ê–õ–¨–ù–´–ú ADX
    strategy_info = "ü§ñ GPT —Å –†–ï–ê–õ–¨–ù–´–ú ADX + üìä EMA20" if openai_token else "üìä –¢–æ–ª—å–∫–æ EMA20 (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    logger.info(f"üîë –¢–æ–∫–µ–Ω—ã: TG‚úÖ Tinkoff‚úÖ DB‚úÖ GPT{'‚úÖ' if openai_token else '‚ùå'}")
    logger.info(f"‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_info}")
    logger.info("üéØ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: —Ü–µ–Ω–∞ > EMA20 + —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è")
    
    if openai_token:
        logger.info("ü§ñ GPT –±—É–¥–µ—Ç:")
        logger.info("   üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô ADX –∏–∑ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        logger.info("   ‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å ADX > 25 (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥)")
        logger.info("   ‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å +DI > -DI (–≤–æ—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)")
        logger.info("   ‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑–Ω–æ—Å—Ç—å DI > 1 (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å–∏–ª–∞)")
        logger.info("   üî• –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–∏–∫ –ø—Ä–∏ ADX > 45")
        logger.info("   üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –†–ï–ê–õ–¨–ù–´–ï –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î")
    else:
        logger.warning("‚ö†Ô∏è –ë–ï–ó GPT:")
        logger.warning("   ‚ùå ADX —Ä–∞—Å—á–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        logger.warning("   ‚ùå –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        logger.warning("   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OPENAI_API_KEY")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    market_checker = MarketTimeChecker()
    if market_checker.is_market_open():
        logger.info("üü¢ –ó–∞–ø—É—Å–∫ –≤ —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è")
    else:
        logger.info("üî¥ –ó–∞–ø—É—Å–∫ –≤–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TradingBot(
        telegram_token=telegram_token,
        tinkoff_token=tinkoff_token,
        database_url=database_url,
        openai_token=openai_token
    )
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.shutdown()


if __name__ == "__main__":
    logger.info("üê± –†–ï–í–£–©–ò–ô –ö–û–¢–Å–ù–û–ö - –£–ú–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø")
    logger.info("üìä EMA20 + ü§ñ GPT —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ô ADX + ‚ö° –¢–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
