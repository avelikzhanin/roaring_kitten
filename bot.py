import asyncio
import logging
import signal
import sys
from src.trading_bot import TradingBot
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
trading_bot = None

# Graceful shutdown –¥–ª—è Railway
def signal_handler(sig, frame):
    logger.info('–ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏')
    if trading_bot:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è shutdown, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–∫—Ä—ã—Ç
        try:
            loop = asyncio.get_event_loop()
            if loop.is_closed():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            loop.run_until_complete(trading_bot.shutdown())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global trading_bot
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TINKOFF_TOKEN = os.getenv('TINKOFF_TOKEN')
    OPENAI_TOKEN = os.getenv('OPENAI_API_KEY')  # –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è GPT
    
    if not TELEGRAM_TOKEN or not TINKOFF_TOKEN:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        logger.error("   ‚Ä¢ TELEGRAM_BOT_TOKEN - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        logger.error("   ‚Ä¢ TINKOFF_TOKEN - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        logger.error("   ‚Ä¢ OPENAI_API_KEY - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–¥–ª—è GPT –∞–Ω–∞–ª–∏–∑–∞)")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI —Ç–æ–∫–µ–Ω–∞
    if OPENAI_TOKEN:
        logger.info("ü§ñ OpenAI —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω - GPT –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω")
    else:
        logger.info("üìä OpenAI —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º")
        logger.info("üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    trading_bot = TradingBot(TELEGRAM_TOKEN, TINKOFF_TOKEN, OPENAI_TOKEN)
    
    try:
        await trading_bot.start()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await trading_bot.shutdown()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if trading_bot:
            await trading_bot.shutdown()
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
