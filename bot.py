import asyncio
import logging
import os
from datetime import datetime
from typing import Optional

from telegram import BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler

from src.data_provider import TinkoffDataProvider
from src.gpt_analyzer import GPTMarketAnalyzer
from src.database import DatabaseManager
from src.signal_processor import SignalProcessor
from src.message_sender import MessageSender
from src.user_interface import UserInterface

logger = logging.getLogger(__name__)

# –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, telegram_token: str, tinkoff_token: str, database_url: str, openai_token: Optional[str] = None):
        self.telegram_token = telegram_token
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.tinkoff_provider = TinkoffDataProvider(tinkoff_token)
        self.gpt_analyzer = GPTMarketAnalyzer(openai_token) if openai_token else None
        self.db = DatabaseManager(database_url)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        self.signal_processor = SignalProcessor(self.tinkoff_provider, self.db, self.gpt_analyzer)
        self.message_sender = MessageSender(self.db, self.gpt_analyzer, self.tinkoff_provider)
        self.user_interface = UserInterface(self.db, self.signal_processor, self.gpt_analyzer)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.app: Optional[Application] = None
        self.is_running = False
        self._signal_tasks = {}
        
        logger.info(f"ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (GPT: {'‚úÖ' if self.gpt_analyzer else '‚ùå'})")
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
            logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
            await self.db.initialize()
            
            # 2. –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app = Application.builder().token(self.telegram_token).build()
            
            # 3. –ü–µ—Ä–µ–¥–∞–µ–º app –≤ –º–æ–¥—É–ª–∏
            self.message_sender.set_app(self.app)
            self.user_interface.set_app(self.app)
            
            # 4. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._add_handlers()
            
            # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.is_running = True
            await self._start_monitoring()
            
            # 6. –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling
            await self.app.initialize()
            await self.app.start()
            
            # 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
            await self._setup_bot_menu()
            
            await self.app.bot.delete_webhook(drop_pending_updates=True)
            await self.app.updater.start_polling(drop_pending_updates=True)
            
            logger.info("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            await asyncio.gather(*self._signal_tasks.values())
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.shutdown()
            raise
    
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for symbol, task in self._signal_tasks.items():
            if task and not task.done():
                task.cancel()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if self.app:
            try:
                if self.app.updater and self.app.updater.running:
                    await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        await self.db.close()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _setup_bot_menu(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            commands = [
                BotCommand("–í—ã–±—Ä–∞—Ç—å –∞–∫—Ü–∏–∏", "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∞–∫—Ü–∏–∏"),
                BotCommand("signal", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã"),
            ]
            
            await self.app.bot.set_my_commands(commands)
            logger.info("üì± –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    
    def _add_handlers(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.user_interface.start_command))
        self.app.add_handler(CommandHandler("stop", self.user_interface.stop_command))
        self.app.add_handler(CommandHandler("signal", self.user_interface.signal_command))
        self.app.add_handler(CommandHandler("portfolio", self.user_interface.portfolio_command))
        self.app.add_handler(CallbackQueryHandler(self.user_interface.handle_callback))
    
    async def _start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
        available_tickers = await self.db.get_available_tickers()
        
        for ticker in available_tickers:
            symbol = ticker['symbol']
            self._signal_tasks[symbol] = asyncio.create_task(
                self._monitor_ticker(symbol)
            )
        
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(self._signal_tasks)} –∞–∫—Ü–∏–π")
    
    async def _monitor_ticker(self, symbol: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        logger.info(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
                signal = await self.signal_processor.analyze_market(symbol)
                peak_signal = await self.signal_processor.check_peak_trend(symbol)
                active_positions = await self.db.get_active_positions_count(symbol)
                
                # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                if signal and active_positions == 0:
                    # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
                    await self.message_sender.send_buy_signal(signal)
                    logger.info(f"üìà –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ {symbol}: {signal.price:.2f}")
                
                elif peak_signal and active_positions > 0:
                    # –ü–∏–∫ —Ç—Ä–µ–Ω–¥–∞
                    await self.message_sender.send_peak_signal(symbol, peak_signal)
                    logger.info(f"üî• –ü–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}: {peak_signal:.2f}")
                
                elif not signal and active_positions > 0:
                    # –û—Ç–º–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞
                    current_price = await self.signal_processor.get_current_price(symbol)
                    await self.message_sender.send_cancel_signal(symbol, current_price)
                    logger.info(f"‚ùå –û—Ç–º–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞ {symbol}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                await asyncio.sleep(1200)  # 20 –º–∏–Ω—É—Ç
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {symbol}: {e}")
                await asyncio.sleep(60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ—Ç—ë–Ω–∫–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    tinkoff_token = os.getenv("TINKOFF_TOKEN") 
    database_url = os.getenv("DATABASE_URL")
    openai_token = os.getenv("OPENAI_API_KEY")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not telegram_token:
        logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    if not tinkoff_token:
        logger.error("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    if not database_url:
        logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    logger.info(f"üîë –¢–æ–∫–µ–Ω—ã: TG‚úÖ Tinkoff‚úÖ DB‚úÖ GPT{'‚úÖ' if openai_token else '‚ùå'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TradingBot(
        telegram_token=telegram_token,
        tinkoff_token=tinkoff_token,
        database_url=database_url,
        openai_token=openai_token
    )
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.shutdown()


if __name__ == "__main__":
    logger.info("üê± –†–ï–í–£–©–ò–ô –ö–û–¢–Å–ù–û–ö - –ú–£–õ–¨–¢–ò–ê–ö–¶–ò–ò")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
