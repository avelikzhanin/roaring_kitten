#!/usr/bin/env python3
"""
–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SBER –¥–ª—è Railway
–ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
–ò–°–ü–†–ê–í–õ–ï–ù–´ –í–°–ï –û–®–ò–ë–ö–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø
"""

import asyncio
import logging
import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional
from dataclasses import dataclass

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Tinkoff API
from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
from tinkoff.invest.utils import now

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

@dataclass
class BacktestSignal:
    timestamp: datetime
    signal_type: str
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float
    volume: int
    volume_ratio: float

@dataclass
class Trade:
    entry_time: datetime
    entry_price: float
    exit_time: Optional[datetime] = None
    exit_price: Optional[float] = None
    profit_pct: Optional[float] = None
    duration_hours: Optional[int] = None

class TinkoffDataProvider:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö Tinkoff"""
    
    def __init__(self, token: str):
        self.token = token
        self.figi = "BBG004730N88"  # SBER
    
    async def get_candles(self, hours: int = 100) -> List[HistoricCandle]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with Client(self.token) as client:
                to_time = now()
                from_time = to_time - timedelta(hours=hours)
                
                logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö SBER —Å {from_time.strftime('%d.%m %H:%M')} –ø–æ {to_time.strftime('%d.%m %H:%M')}")
                
                response = client.market_data.get_candles(
                    figi=self.figi,
                    from_=from_time,
                    to=to_time,
                    interval=CandleInterval.CANDLE_INTERVAL_HOUR
                )
                
                if response.candles:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(response.candles)} —Å–≤–µ—á–µ–π")
                    return response.candles
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def candles_to_dataframe(self, candles: List[HistoricCandle]) -> pd.DataFrame:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame"""
        if not candles:
            return pd.DataFrame()
        
        data = []
        for candle in candles:
            try:
                data.append({
                    'timestamp': candle.time,
                    'open': self.quotation_to_decimal(candle.open),
                    'high': self.quotation_to_decimal(candle.high),
                    'low': self.quotation_to_decimal(candle.low),
                    'close': self.quotation_to_decimal(candle.close),
                    'volume': candle.volume
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏: {e}")
                continue
        
        if not data:
            return pd.DataFrame()
        
        df = pd.DataFrame(data)
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        df = df.sort_values('timestamp').reset_index(drop=True)
        df = df.drop_duplicates(subset=['timestamp'], keep='last')
        
        return df
    
    @staticmethod
    def quotation_to_decimal(quotation) -> float:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ quotation –≤ decimal"""
        try:
            return float(quotation.units + quotation.nano / 1e9)
        except (AttributeError, TypeError):
            return 0.0

class TechnicalIndicators:
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        """EMA"""
        if len(prices) < period:
            return [np.nan] * len(prices)
        
        series = pd.Series(prices)
        ema = series.ewm(span=period, adjust=False).mean()
        return ema.tolist()
    
    @staticmethod
    def wilder_smoothing(values: pd.Series, period: int) -> pd.Series:
        """–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –£–∞–π–ª–¥–µ—Ä–∞"""
        result = pd.Series(index=values.index, dtype=float)
        first_avg = values.iloc[:period].mean()
        result.iloc[period-1] = first_avg
        
        for i in range(period, len(values)):
            result.iloc[i] = (result.iloc[i-1] * (period - 1) + values.iloc[i]) / period
        
        return result
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        """ADX —Ä–∞—Å—á–µ—Ç"""
        if len(highs) < period * 2:
            return {
                'adx': [np.nan] * len(highs), 
                'plus_di': [np.nan] * len(highs), 
                'minus_di': [np.nan] * len(highs)
            }
        
        df = pd.DataFrame({
            'high': highs,
            'low': lows,
            'close': closes
        })
        
        # True Range
        df['prev_close'] = df['close'].shift(1)
        df['hl'] = df['high'] - df['low']
        df['hc'] = abs(df['high'] - df['prev_close'])
        df['lc'] = abs(df['low'] - df['prev_close'])
        df['tr'] = df[['hl', 'hc', 'lc']].max(axis=1)
        
        # Directional Movement
        df['high_diff'] = df['high'] - df['high'].shift(1)
        df['low_diff'] = df['low'].shift(1) - df['low']
        
        df['plus_dm'] = np.where(
            (df['high_diff'] > df['low_diff']) & (df['high_diff'] > 0),
            df['high_diff'],
            0
        )
        
        df['minus_dm'] = np.where(
            (df['low_diff'] > df['high_diff']) & (df['low_diff'] > 0),
            df['low_diff'],
            0
        )
        
        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        df['atr'] = TechnicalIndicators.wilder_smoothing(df['tr'], period)
        df['plus_dm_smooth'] = TechnicalIndicators.wilder_smoothing(df['plus_dm'], period)
        df['minus_dm_smooth'] = TechnicalIndicators.wilder_smoothing(df['minus_dm'], period)
        
        # DI
        df['plus_di'] = (df['plus_dm_smooth'] / df['atr']) * 100
        df['minus_di'] = (df['minus_dm_smooth'] / df['atr']) * 100
        
        # DX –∏ ADX
        df['di_sum'] = df['plus_di'] + df['minus_di']
        df['di_diff'] = abs(df['plus_di'] - df['minus_di'])
        df['dx'] = np.where(df['di_sum'] != 0, (df['di_diff'] / df['di_sum']) * 100, 0)
        df['adx'] = TechnicalIndicators.wilder_smoothing(df['dx'], period)
        
        return {
            'adx': df['adx'].fillna(np.nan).tolist(),
            'plus_di': df['plus_di'].fillna(np.nan).tolist(),
            'minus_di': df['minus_di'].fillna(np.nan).tolist()
        }

class StrategyBacktest:
    """–ë—ç–∫—Ç–µ—Å—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self, tinkoff_token: str):
        self.provider = TinkoffDataProvider(tinkoff_token)
        self.signals: List[BacktestSignal] = []
        self.trades: List[Trade] = []
        
    async def run_backtest(self, days: int = 60) -> Dict:
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –∑–∞ {days} –¥–Ω–µ–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            hours_needed = days * 24 + 200
            candles = await self.provider.get_candles(hours=hours_needed)
            
            if len(candles) < 100:
                raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                
            df = self.provider.candles_to_dataframe(candles)
            
            if df.empty:
                raise Exception("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            await self._analyze_data(df, days)
            self._generate_trades()
            stats = self._calculate_statistics(days)
            
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
            return {}
    
    async def _analyze_data(self, df: pd.DataFrame, test_days: int):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        test_start = datetime.now(timezone.utc) - timedelta(days=test_days)
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        closes = df['close'].tolist()
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        
        logger.info("üìä –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        ema20 = TechnicalIndicators.calculate_ema(closes, 20)
        adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
        
        df['avg_volume_20'] = df['volume'].rolling(window=20, min_periods=1).mean()
        df['ema20'] = ema20
        df['adx'] = adx_data['adx']
        df['plus_di'] = adx_data['plus_di']
        df['minus_di'] = adx_data['minus_di']
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        df_test = df[df['timestamp'] >= test_start].copy()
        logger.info(f"üìà –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {len(df_test)} —Å–≤–µ—á–µ–π")
        
        # –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        current_signal_active = False
        buy_signals = 0
        
        for i in range(len(df_test)):
            row = df_test.iloc[i]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
            if pd.isna(row['adx']) or pd.isna(row['ema20']) or pd.isna(row['plus_di']) or pd.isna(row['minus_di']):
                continue
            
            # –£—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            conditions = [
                row['close'] > row['ema20'],                    # –¶–µ–Ω–∞ > EMA20
                row['adx'] > 23,                               # ADX > 23
                row['plus_di'] > row['minus_di'],              # +DI > -DI
                row['plus_di'] - row['minus_di'] > 5,          # –†–∞–∑–Ω–∏—Ü–∞ > 5
                row['volume'] > row['avg_volume_20'] * 1.47    # –û–±—ä–µ–º > 1.47
            ]
            
            conditions_met = all(conditions)
            
            if conditions_met and not current_signal_active:
                # BUY —Å–∏–≥–Ω–∞–ª
                signal = BacktestSignal(
                    timestamp=row['timestamp'],
                    signal_type='BUY',
                    price=row['close'],
                    ema20=row['ema20'],
                    adx=row['adx'],
                    plus_di=row['plus_di'],
                    minus_di=row['minus_di'],
                    volume=int(row['volume']),
                    volume_ratio=row['volume'] / row['avg_volume_20']
                )
                self.signals.append(signal)
                current_signal_active = True
                buy_signals += 1
                logger.info(f"üìà BUY #{buy_signals}: {row['timestamp'].strftime('%d.%m %H:%M')} = {row['close']:.2f}‚ÇΩ")
                
            elif not conditions_met and current_signal_active:
                # SELL —Å–∏–≥–Ω–∞–ª
                signal = BacktestSignal(
                    timestamp=row['timestamp'],
                    signal_type='SELL',
                    price=row['close'],
                    ema20=row['ema20'],
                    adx=row['adx'],
                    plus_di=row['plus_di'],
                    minus_di=row['minus_di'],
                    volume=int(row['volume']),
                    volume_ratio=row['volume'] / row['avg_volume_20']
                )
                self.signals.append(signal)
                current_signal_active = False
                logger.info(f"üìâ SELL: {row['timestamp'].strftime('%d.%m %H:%M')} = {row['close']:.2f}‚ÇΩ")
        
        logger.info(f"üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(self.signals)} (BUY: {buy_signals})")
    
    def _generate_trades(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫"""
        current_trade = None
        
        for signal in self.signals:
            if signal.signal_type == 'BUY' and current_trade is None:
                current_trade = Trade(
                    entry_time=signal.timestamp,
                    entry_price=signal.price
                )
                
            elif signal.signal_type == 'SELL' and current_trade is not None:
                current_trade.exit_time = signal.timestamp
                current_trade.exit_price = signal.price
                current_trade.duration_hours = int((signal.timestamp - current_trade.entry_time).total_seconds() / 3600)
                current_trade.profit_pct = ((signal.price - current_trade.entry_price) / current_trade.entry_price) * 100
                
                self.trades.append(current_trade)
                current_trade = None
        
        logger.info(f"üí∞ –°–æ–∑–¥–∞–Ω–æ —Å–¥–µ–ª–æ–∫: {len(self.trades)}")
    
    def _calculate_statistics(self, days: int) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        if not self.trades:
            return {
                'period_days': days,
                'total_signals': len(self.signals),
                'buy_signals': len([s for s in self.signals if s.signal_type == 'BUY']),
                'sell_signals': len([s for s in self.signals if s.signal_type == 'SELL']),
                'total_trades': 0,
                'win_rate': 0,
                'total_return': 0,
                'trades_detail': []
            }
        
        profits = [t.profit_pct for t in self.trades if t.profit_pct is not None]
        profitable = [p for p in profits if p > 0]
        
        total_return = sum(profits) if profits else 0
        annual_return = (total_return / days) * 365 if days > 0 else 0
        
        return {
            'period_days': days,
            'total_signals': len(self.signals),
            'buy_signals': len([s for s in self.signals if s.signal_type == 'BUY']),
            'sell_signals': len([s for s in self.signals if s.signal_type == 'SELL']),
            'total_trades': len(self.trades),
            'profitable_trades': len(profitable),
            'win_rate': len(profitable) / len(profits) * 100 if profits else 0,
            'total_return': total_return,
            'annual_return_estimate': annual_return,
            'avg_profit': sum(profits) / len(profits) if profits else 0,
            'max_profit': max(profits) if profits else 0,
            'max_loss': min(profits) if profits else 0,
            'avg_duration_hours': sum(t.duration_hours for t in self.trades if t.duration_hours) / len(self.trades) if self.trades else 0,
            'trades_detail': self.trades
        }
    
    def print_results(self, stats: Dict):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "="*70)
        print(f"üéØ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì SBER –ó–ê {stats['period_days']} –î–ù–ï–ô")
        print("="*70)
        
        print(f"üìä –°–ò–ì–ù–ê–õ–´:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ: {stats['total_signals']}")
        print(f"   ‚Ä¢ –ü–æ–∫—É–ø–∫–∏: {stats['buy_signals']}")
        print(f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {stats['sell_signals']}")
        
        print(f"\nüíº –°–î–ï–õ–ö–ò:")
        print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['total_trades']}")
        print(f"   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ: {stats['profitable_trades']}")
        print(f"   ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {stats['win_rate']:.1f}%")
        
        print(f"\nüí∞ –î–û–•–û–î–ù–û–°–¢–¨:")
        print(f"   ‚Ä¢ –û–±—â–∞—è: {stats['total_return']:.2f}%")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞ —Å–¥–µ–ª–∫—É: {stats['avg_profit']:.2f}%")
        print(f"   ‚Ä¢ –ú–∞–∫—Å –ø—Ä–∏–±—ã–ª—å: {stats['max_profit']:.2f}%")
        print(f"   ‚Ä¢ –ú–∞–∫—Å —É–±—ã—Ç–æ–∫: {stats['max_loss']:.2f}%")
        print(f"   ‚Ä¢ –ì–æ–¥–æ–≤–∞—è (–æ—Ü–µ–Ω–∫–∞): {stats['annual_return_estimate']:.1f}%")
        
        print(f"\n‚è∞ –í–†–ï–ú–Ø:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['avg_duration_hours']:.1f}—á")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω –≤—ã–≤–æ–¥ —Å–¥–µ–ª–æ–∫
        if stats['trades_detail']:
            print(f"\nüìã –°–î–ï–õ–ö–ò:")
            for i, trade in enumerate(stats['trades_detail'][:10], 1):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                entry_date = trade.entry_time.strftime('%d.%m %H:%M')
                entry_price_formatted = f"{trade.entry_price:.2f}"
                
                if trade.exit_time:
                    exit_date = trade.exit_time.strftime('%d.%m %H:%M')
                    exit_price_formatted = f"{trade.exit_price:.2f}"
                    profit_formatted = f"{trade.profit_pct:+.2f}%"
                    
                    print(f"   {i:2d}. {entry_date} ‚Üí {exit_date} | {entry_price_formatted} ‚Üí {exit_price_formatted} | {profit_formatted}")
                else:
                    print(f"   {i:2d}. {entry_date} ‚Üí –û—Ç–∫—Ä—ã—Ç–∞ | {entry_price_formatted} ‚Üí --- | ---")
        
        print("="*70)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SBER Trading Bot - –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥")
    print("-" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    TINKOFF_TOKEN = os.getenv('TINKOFF_TOKEN')
    
    if not TINKOFF_TOKEN:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        logger.error("üîß –î–æ–±–∞–≤—å—Ç–µ –≤ Railway: Settings ‚Üí Variables ‚Üí TINKOFF_TOKEN")
        sys.exit(1)
    
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥...")
    
    try:
        backtest = StrategyBacktest(TINKOFF_TOKEN)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        for days in [30, 60, 90]:
            logger.info(f"üîÑ –ê–Ω–∞–ª–∏–∑ –∑–∞ {days} –¥–Ω–µ–π...")
            
            stats = await backtest.run_backtest(days=days)
            
            if stats:
                backtest.print_results(stats)
                
                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                print(f"\nüí° –û–¶–ï–ù–ö–ê –∑–∞ {days} –¥–Ω–µ–π:")
                if stats['total_trades'] > 0:
                    if stats['win_rate'] >= 60:
                        print("   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è!")
                    elif stats['win_rate'] >= 40:
                        print("   ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
                    else:
                        print("   ‚ùå –°–ª–∞–±–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
                        
                    if stats['total_return'] > 0:
                        print(f"   üí∞ –ü—Ä–∏–±—ã–ª—å–Ω–∞—è: +{stats['total_return']:.2f}%")
                    else:
                        print(f"   üìâ –£–±—ã—Ç–æ—á–Ω–∞—è: {stats['total_return']:.2f}%")
                else:
                    print("   ‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {days} –¥–Ω–µ–π")
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            backtest.signals.clear()
            backtest.trades.clear()
            print("-" * 60)
        
        logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
