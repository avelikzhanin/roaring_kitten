import asyncio
import logging
import os
from datetime import datetime, timedelta, timezone
from typing import List, Optional
import pandas as pd
from dataclasses import dataclass

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError, TimedOut, NetworkError

# –ò–∑–º–µ–Ω–∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
from src.data_provider import TinkoffDataProvider
from src.indicators import TechnicalIndicators
from src.gpt_analyzer import GPTMarketAnalyzer, GPTAdvice
from src.database import DatabaseManager

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    timestamp: datetime
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ë–î"""
    
    def __init__(self, telegram_token: str, tinkoff_token: str, database_url: str,
                 openai_token: Optional[str] = None):
        self.telegram_token = telegram_token
        self.tinkoff_provider = TinkoffDataProvider(tinkoff_token)
        self.gpt_analyzer = GPTMarketAnalyzer(openai_token) if openai_token else None
        self.db = DatabaseManager(database_url)  # –ë–î —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
        self.app: Optional[Application] = None
        self.is_running = False
        self.current_signal_active = False
        self.last_conditions_met = False
        self._signal_task = None
        self.buy_price: Optional[float] = None
        self.last_buy_signal_id: Optional[int] = None
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        logger.info("üíæ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        if self.gpt_analyzer:
            logger.info("ü§ñ GPT –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.info("üìä –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ GPT –∞–Ω–∞–ª–∏–∑–∞")
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            await self.db.initialize()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
            self.app = Application.builder().token(self.telegram_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CommandHandler("stop", self.stop_command))
            self.app.add_handler(CommandHandler("signal", self.signal_command))
            self.app.add_handler(CommandHandler("stats", self.stats_command))
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –†–µ–≤—É—â–µ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞ —Å –ë–î –∏ GPT...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            self.is_running = True
            self._signal_task = asyncio.create_task(self.check_signals_periodically())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
            await self.app.initialize()
            await self.app.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.app.updater.start_polling(drop_pending_updates=True)
            
            # –ñ–¥–µ–º –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                await asyncio.gather(self._signal_task)
            except asyncio.CancelledError:
                logger.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start(): {e}")
            await self.shutdown()
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
        
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        if self._signal_task and not self._signal_task.done():
            self._signal_task.cancel()
            try:
                await self._signal_task
            except asyncio.CancelledError:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await self.db.close()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if self.app:
            try:
                if self.app.updater and self.app.updater.running:
                    await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        
        logger.info("–ö–æ—Ç—ë–Ω–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_added = await self.db.add_or_update_user(chat_id, username, first_name)
        
        if user_added:
            gpt_status = "ü§ñ <b>GPT –∞–Ω–∞–ª–∏–∑:</b> –≤–∫–ª—é—á–µ–Ω —Å —É—Ä–æ–≤–Ω—è–º–∏ TP/SL" if self.gpt_analyzer else "üìä <b>–†–µ–∂–∏–º:</b> —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            
            await update.message.reply_text(
                "üê± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–µ–≤—É—â–µ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞!</b>\n\n"
                "üìà –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ SBER\n"
                "üîî –ö–æ—Ç—ë–Ω–æ–∫ –±—É–¥–µ—Ç —Ä—ã—á–∞—Ç—å –æ —Å–∏–≥–Ω–∞–ª–∞—Ö –ø–æ–∫—É–ø–∫–∏ –∏ –∏—Ö –æ—Ç–º–µ–Ω–µ\n"
                "üíæ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
                f"{gpt_status}\n\n"
                "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
                "‚Ä¢ EMA20 - —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π\n"
                "‚Ä¢ ADX > 25 - —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥\n"
                "‚Ä¢ +DI > -DI (—Ä–∞–∑–Ω–∏—Ü–∞ > 1) - –≤–æ—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ\n"
                "‚Ä¢ üî• ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞, –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                "/signal - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª\n"
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
                parse_mode='HTML'
            )
            logger.info(f"–ù–æ–≤—ã–π/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id} (@{username})")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        chat_id = update.effective_chat.id
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await self.db.deactivate_user(chat_id)
        
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä—ã—á–∞–Ω–∏—è –∫–æ—Ç—ë–Ω–∫–∞")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: {chat_id}")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = await self.db.get_stats()
            
            message = f"""üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}

üìà <b>–°–∏–≥–Ω–∞–ª—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_signals', 0)}
‚Ä¢ –ü–æ–∫—É–ø–æ–∫: {stats.get('buy_signals', 0)}
‚Ä¢ –ü—Ä–æ–¥–∞–∂: {stats.get('sell_signals', 0)}

üíº <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {stats.get('open_positions', 0)}"""
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signal - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            signal = await self.analyze_market()
            
            if signal:
                # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª - –ø–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ GPT
                message = f"""‚úÖ <b>–ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò SBER</b>

{self.format_signal_message(signal)}

‚è∞ <b>–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞:</b> {signal.timestamp.strftime('%H:%M %d.%m.%Y')}"""
                
                # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if self.gpt_analyzer:
                    gpt_advice = await self.get_gpt_analysis(signal, is_manual_check=True)
                    if gpt_advice:
                        message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice)}"
                    else:
                        message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                
            else:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
                message = await self.get_detailed_market_status()
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /signal: {e}")
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML'
            )

    async def get_detailed_market_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º GPT –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            candles = await self.tinkoff_provider.get_candles(hours=120)
            
            if len(candles) < 50:
                return "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                return "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_price = closes[-1]
            current_ema20 = ema20[-1]
            current_adx = adx_data['adx'][-1]
            current_plus_di = adx_data['plus_di'][-1]
            current_minus_di = adx_data['minus_di'][-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            price_above_ema = current_price > current_ema20 if not pd.isna(current_ema20) else False
            strong_trend = current_adx > 25 if not pd.isna(current_adx) else False
            positive_direction = current_plus_di > current_minus_di if not pd.isna(current_plus_di) and not pd.isna(current_minus_di) else False
            di_difference = (current_plus_di - current_minus_di) > 1 if not pd.isna(current_plus_di) and not pd.isna(current_minus_di) else False
            peak_trend = current_adx > 45 if not pd.isna(current_adx) else False
            
            all_conditions_met = all([price_above_ema, strong_trend, positive_direction, di_difference])
            
            peak_warning = ""
            if peak_trend and self.current_signal_active:
                peak_warning = "\nüî• <b>–í–ù–ò–ú–ê–ù–ò–ï: ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞! –í—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!</b>"
            elif peak_trend:
                peak_warning = "\nüî• <b>ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞</b>"
            
            message = f"""üìä <b>–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –†–´–ù–ö–ê SBER</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {current_ema20:.2f} ‚ÇΩ {'‚úÖ' if price_above_ema else '‚ùå'}

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {current_adx:.1f} {'‚úÖ' if strong_trend else '‚ùå'} (–Ω—É–∂–Ω–æ >25)
‚Ä¢ <b>+DI:</b> {current_plus_di:.1f}
‚Ä¢ <b>-DI:</b> {current_minus_di:.1f} {'‚úÖ' if positive_direction else '‚ùå'}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {current_plus_di - current_minus_di:.1f} {'‚úÖ' if di_difference else '‚ùå'} (–Ω—É–∂–Ω–æ >1){peak_warning}

{'üîî <b>–í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –æ–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª!</b>' if all_conditions_met else '‚è≥ <b>–û–∂–∏–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...</b>'}"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –†–ê–°–®–ò–†–ï–ù–ù–´–ô GPT –∞–Ω–∞–ª–∏–∑ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if self.gpt_analyzer:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è GPT
                candles_data = []
                try:
                    for _, row in df.iterrows():
                        candles_data.append({
                            'timestamp': row['timestamp'],
                            'open': float(row['open']),
                            'high': float(row['high']),
                            'low': float(row['low']),
                            'close': float(row['close']),
                            'volume': int(row['volume'])
                        })
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {e}")
                    candles_data = None
                
                signal_data = {
                    'price': current_price,
                    'ema20': current_ema20,
                    'adx': current_adx,
                    'plus_di': current_plus_di,
                    'minus_di': current_minus_di,
                    'conditions_met': all_conditions_met
                }
                
                logger.info("ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π GPT –∞–Ω–∞–ª–∏–∑ —Å —É—Ä–æ–≤–Ω—è–º–∏...")
                gpt_advice = await self.gpt_analyzer.analyze_signal(signal_data, candles_data, is_manual_check=True)
                if gpt_advice:
                    message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice)}"
                    logger.info(f"‚úÖ GPT –¥–∞–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é: {gpt_advice.recommendation}")
                else:
                    message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                    logger.warning("‚ö†Ô∏è GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            return message
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    async def analyze_market(self) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 120 —á–∞—Å–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            candles = await self.tinkoff_provider.get_candles(hours=120)
            
            if len(candles) < 50:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                logger.warning("–ü—É—Å—Ç–æ–π DataFrame")
                return None
            
            # –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # EMA20
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            
            # ADX, +DI, -DI
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            last_idx = -1
            current_price = closes[last_idx]
            current_ema20 = ema20[last_idx]
            current_adx = adx_data['adx'][last_idx]
            current_plus_di = adx_data['plus_di'][last_idx]
            current_minus_di = adx_data['minus_di'][last_idx]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
            if any(pd.isna(val) for val in [current_ema20, current_adx, current_plus_di, current_minus_di]):
                logger.warning("–ù–µ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
                return None
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í:")
            logger.info(f"üí∞ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ | EMA20: {current_ema20:.2f} ‚ÇΩ")
            logger.info(f"üìä ADX: {current_adx:.2f} | +DI: {current_plus_di:.2f} | -DI: {current_minus_di:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª–∞
            conditions = [
                current_price > current_ema20,              # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
                current_adx > 25,                           # ADX –±–æ–ª—å—à–µ 25 
                current_plus_di > current_minus_di,         # +DI –±–æ–ª—å—à–µ -DI
                current_plus_di - current_minus_di > 1,     # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1
            ]
            
            condition_names = [
                "–¶–µ–Ω–∞ > EMA20",
                "ADX > 25", 
                "+DI > -DI",
                "–†–∞–∑–Ω–∏—Ü–∞ DI > 1",
            ]
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
            for i, (condition, name) in enumerate(zip(conditions, condition_names)):
                logger.info(f"   {i+1}. {name}: {'‚úÖ' if condition else '‚ùå'}")
            
            if all(conditions):
                logger.info("üéâ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª!")
                return TradingSignal(
                    timestamp=df.iloc[last_idx]['timestamp'],
                    price=current_price,
                    ema20=current_ema20,
                    adx=current_adx,
                    plus_di=current_plus_di,
                    minus_di=current_minus_di
                )
            else:
                logger.info(f"‚è≥ –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {sum(conditions)}/{len(conditions)}")
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return None
    
    async def get_gpt_analysis(self, signal: TradingSignal, is_manual_check: bool = False) -> Optional[GPTAdvice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        if not self.gpt_analyzer:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π
        try:
            candles = await self.tinkoff_provider.get_candles(hours=120)  # 5 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è GPT
            candles_data = []
            if not df.empty:
                for _, row in df.iterrows():
                    candles_data.append({
                        'timestamp': row['timestamp'],
                        'open': float(row['open']),
                        'high': float(row['high']),
                        'low': float(row['low']),
                        'close': float(row['close']),
                        'volume': int(row['volume'])
                    })
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è GPT: {e}")
            candles_data = None
        
        signal_data = {
            'price': signal.price,
            'ema20': signal.ema20,
            'adx': signal.adx,
            'plus_di': signal.plus_di,
            'minus_di': signal.minus_di
        }
        
        return await self.gpt_analyzer.analyze_signal(signal_data, candles_data, is_manual_check)
    
    async def check_peak_trend(self) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ (ADX > 45)"""
        try:
            candles = await self.tinkoff_provider.get_candles(hours=120)
            
            if len(candles) < 50:
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                return None
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # ADX
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            current_adx = adx_data['adx'][-1]
            current_price = closes[-1]
            
            if pd.isna(current_adx):
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞
            if current_adx > 45:
                logger.info(f"üî• –ü–ò–ö –¢–†–ï–ù–î–ê! ADX: {current_adx:.1f} > 45")
                return current_price
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return None
    
    async def get_current_price(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            candles = await self.tinkoff_provider.get_candles(hours=50)
            if candles:
                df = self.tinkoff_provider.candles_to_dataframe(candles)
                return df.iloc[-1]['close'] if not df.empty else 0
            return 0
        except:
            return 0
    
    def calculate_profit_percentage(self, buy_price: float, sell_price: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if buy_price <= 0:
            return 0
        return ((sell_price - buy_price) / buy_price) * 100
    
    async def send_peak_signal(self, current_price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –ø–∏–∫–∞ –≤ –ë–î
        await self.db.save_signal(
            signal_type='PEAK',
            price=current_price,
            ema20=0,  # –ù–µ –≤–∞–∂–Ω–æ –¥–ª—è –ø–∏–∫–∞
            adx=47,   # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ > 45
            plus_di=0,
            minus_di=0
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        await self.db.close_positions('PEAK')
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
        profit_text = ""
        if self.buy_price and self.buy_price > 0:
            profit_percentage = self.calculate_profit_percentage(self.buy_price, current_price)
            profit_emoji = "üü¢" if profit_percentage > 0 else "üî¥" if profit_percentage < 0 else "‚ö™"
            profit_text = f"\nüí∞ <b>–ü—Ä–∏–±—ã–ª—å:</b> {profit_emoji} {profit_percentage:+.2f}% (—Å {self.buy_price:.2f} –¥–æ {current_price:.2f} ‚ÇΩ)"
        
        message = f"""üî• <b>–ü–ò–ö –¢–†–ï–ù–î–ê - –í–°–Å –ü–†–û–î–ê–Å–ú!</b>

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

üìä <b>–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b>
ADX > 45 - –º—ã –Ω–∞ –ø–∏–∫–µ —Ç—Ä–µ–Ω–¥–∞!
–í—Ä–µ–º—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å.{profit_text}

üîç <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...</b>"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ë–î
        subscribers = await self.db.get_active_users()
        failed_chats = []
        successful_sends = 0
        
        for chat_id in subscribers:
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except (TelegramError, TimedOut, NetworkError) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏–∫–∞ –≤ —á–∞—Ç {chat_id}: {e}")
                failed_chats.append(chat_id)
                
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for chat_id in failed_chats:
            await self.db.deactivate_user(chat_id)
        
        logger.info(f"–°–∏–≥–Ω–∞–ª –ø–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {successful_sends} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, {len(failed_chats)} –æ—à–∏–±–æ–∫")
    
    async def send_signal_to_subscribers(self, signal: TradingSignal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º GPT –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
            
        message = self.format_signal_message(signal)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ GPT –¥–ª—è –ë–î
        gpt_data = None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –†–ê–°–®–ò–†–ï–ù–ù–´–ô GPT –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.gpt_analyzer:
            logger.info("ü§ñ –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ GPT —Å TP/SL –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞...")
            gpt_advice = await self.get_gpt_analysis(signal, is_manual_check=False)
            
            if gpt_advice:
                message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice)}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ GPT –¥–ª—è –ë–î
                gpt_data = {
                    'recommendation': gpt_advice.recommendation,
                    'confidence': gpt_advice.confidence,
                    'take_profit': gpt_advice.take_profit,
                    'stop_loss': gpt_advice.stop_loss
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é GPT
                logger.info(f"ü§ñ GPT —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {gpt_advice.recommendation} ({gpt_advice.confidence}%)")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å TP/SL, –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
                if gpt_advice.take_profit and gpt_advice.stop_loss:
                    logger.info(f"üéØ TP: {gpt_advice.take_profit} | üõë SL: {gpt_advice.stop_loss}")
                
                # –ï—Å–ª–∏ GPT –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                if gpt_advice.recommendation == 'AVOID':
                    message += f"\n\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> GPT –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∫—É!"
                elif gpt_advice.recommendation == 'WEAK_BUY':
                    message += f"\n\n‚ö° <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ:</b> GPT"
