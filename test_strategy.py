#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Financial Potential
"""

import sys
import os
import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from models import create_database, get_db_session, StrategySettings, VirtualAccount
from moex_api import get_moex_data, get_moex_candles
from strategy import FinancialPotentialStrategy
from virtual_trading import VirtualTradingEngine, StrategyManager

class StrategyTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self):
        self.symbols = ["SBER", "GAZP", "LKOH", "VTBR"]
        self.results = {}
        
    def test_moex_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MOEX"""
        print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MOEX...")
        try:
            data = get_moex_data(["SBER"])
            if "SBER" in data and data["SBER"].get("current_price"):
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –¶–µ–Ω–∞ SBER: {data['SBER']['current_price']:.2f} ‚ÇΩ")
                return True
            else:
                print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_strategy_calculations(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        print("\nüßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start='2024-01-01', periods=100, freq='H')
        np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        
        price = 100.0
        prices = [price]
        for _ in range(99):
            price += np.random.normal(0, 1)
            prices.append(price)
        
        test_data = pd.DataFrame({
            'datetime': dates,
            'open': prices,
            'high': [p + abs(np.random.normal(0, 0.5)) for p in prices],
            'low': [p - abs(np.random.normal(0, 0.5)) for p in prices],
            'close': prices,
            'volume': np.random.randint(1000, 10000, 100)
        })
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        settings = StrategySettings(symbol="TEST")
        strategy = FinancialPotentialStrategy(settings)
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = strategy.calculate_indicators(test_data)
            print(f"   üìä ATR: {indicators.get('atr', 0):.4f}")
            print(f"   üìä RSI: {indicators.get('rsi', 0):.2f}")
            print(f"   üìä EMA: {indicators.get('ema', 0):.2f}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
            strategy.build_levels(test_data)
            print(f"   üìè –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: {len(strategy.levels)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞
            signal = strategy.generate_signal(test_data, prices[-1])
            print(f"   üéØ –°–∏–≥–Ω–∞–ª: {signal.direction}")
            print(f"   üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
            print(f"   üí∞ V_total: {signal.v_total:.4f}")
            
            print("‚úÖ –†–∞—Å—á–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö: {e}")
            return False
    
    def test_virtual_trading(self):
        """–¢–µ—Å—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        print("\nüí± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            engine = VirtualTradingEngine()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—á–µ—Ç–∞
            stats = engine.get_account_statistics()
            print(f"   üí≥ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {stats['account']['initial_balance']:,.0f} ‚ÇΩ")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            from models import StrategySignal
            
            test_signal = StrategySignal(
                symbol="SBER",
                direction="BUY",
                confidence=0.8,
                entry_price=100.0,
                stop_loss=98.0,
                take_profit=105.0,
                lot_size=1.0,
                h_fin=0.5,
                rsi=35.0,
                v_level=-1.2,
                v_trend=0.1,
                v_rsi=-15.0,
                v_total=-1.1,
                timestamp=datetime.now()
            )
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            trade = engine.place_virtual_order(test_signal)
            if trade:
                print(f"   üìù –°–æ–∑–¥–∞–Ω –æ—Ä–¥–µ—Ä ID: {trade.id}")
                print(f"   üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade.direction}")
                print(f"   üí∞ –†–∞–∑–º–µ—Ä: {trade.lot_size} –ª–æ—Ç")
                print(f"   üéØ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {trade.entry_price:.2f}")
            
            # –≠–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
            market_data = {
                "SBER": {
                    "current_price": 105.5,  # –¶–µ–Ω–∞ –≤—ã—à–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                    "candles": pd.DataFrame()
                }
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏
            results = engine.update_trades(market_data)
            if results:
                print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫: {len(results)}")
                for result in results:
                    print(f"      {result['action']}: {result.get('symbol', 'N/A')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            new_stats = engine.get_account_statistics()
            profit = new_stats['account']['current_balance'] - stats['account']['initial_balance']
            print(f"   üìà –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_stats['account']['current_balance']:,.2f} ‚ÇΩ")
            print(f"   üíµ –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {profit:+.2f} ‚ÇΩ")
            
            print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            return False
    
    def test_full_cycle(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            print("   üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö MOEX...")
            market_data = get_moex_data(["SBER"])
            
            if "SBER" not in market_data or not market_data["SBER"].get("current_price"):
                print("   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö MOEX, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ")
                return self.test_strategy_calculations()
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            manager = StrategyManager()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
            print("   üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
            signals = manager.analyze_market(market_data)
            
            print(f"   üéØ –ü–æ–ª—É—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            for signal in signals:
                print(f"      {signal.symbol}: {signal.direction} "
                      f"(confidence: {signal.confidence:.2f}, v_total: {signal.v_total:.4f})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            if signals:
                print("   üíº –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
                results = manager.process_signals(signals)
                print(f"   üìã –†–∞–∑–º–µ—â–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(results)}")
            
            print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            return False
    
    def benchmark_performance(self):
        """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        try:
            import time
            
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π dataset
            dates = pd.date_range(start='2024-01-01', periods=1000, freq='H')
            prices = np.random.randn(1000).cumsum() + 100
            
            test_data = pd.DataFrame({
                'datetime': dates,
                'open': prices,
                'high': prices + np.abs(np.random.randn(1000) * 0.5),
                'low': prices - np.abs(np.random.randn(1000) * 0.5),
                'close': prices,
                'volume': np.random.randint(1000, 10000, 1000)
            })
            
            settings = StrategySettings(symbol="BENCH")
            strategy = FinancialPotentialStrategy(settings)
            
            # –¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
            start_time = time.time()
            strategy.build_levels(test_data)
            levels_time = time.time() - start_time
            print(f"   üìè –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π (1000 –±–∞—Ä–æ–≤): {levels_time:.3f}—Å")
            
            # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            start_time = time.time()
            indicators = strategy.calculate_indicators(test_data)
            indicators_time = time.time() - start_time
            print(f"   üìä –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {indicators_time:.3f}—Å")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            start_time = time.time()
            for _ in range(100):
                signal = strategy.generate_signal(test_data, prices[-1])
            signals_time = time.time() - start_time
            print(f"   üéØ 100 —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_time:.3f}—Å")
            
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "tests": {
                "moex_connection": self.test_moex_connection(),
                "strategy_calculations": self.test_strategy_calculations(), 
                "virtual_trading": self.test_virtual_trading(),
                "full_cycle": self.test_full_cycle(),
                "performance": self.benchmark_performance()
            },
            "system_info": {
                "python_version": sys.version,
                "platform": sys.platform
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("test_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*50)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*50)
        
        passed = 0
        total = len(report["tests"])
        
        for test_name, result in report["tests"].items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name:.<30} {status}")
            if result:
                passed += 1
        
        print("-"*50)
        print(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: test_report.json")
        
        return passed == total

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FINANCIAL POTENTIAL STRATEGY")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try:
        create_database()
    except Exception as e:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tester = StrategyTester()
    success = tester.generate_report()
    
    if success:
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python run.py")
        sys.exit(0)
    else:
        print("\n‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
        sys.exit(1)

if __name__ == "__main__":
    main()
