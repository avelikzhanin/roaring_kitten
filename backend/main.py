from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
import asyncio
from typing import List, Dict, Optional
from datetime import datetime, timedelta
import json
import uvicorn
from contextlib import asynccontextmanager

from models import (
    create_database, get_db_session, StrategySettings, VirtualAccount,
    StrategySettingsRequest, StrategySettingsResponse, VirtualTradeResponse,
    AccountResponse, MarketDataResponse, StrategySignal
)
from moex_api import get_moex_data, MOEXClient
from strategy import FinancialPotentialStrategy
from virtual_trading import VirtualTradingEngine, StrategyManager

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
symbols = ["SBER", "GAZP", "LKOH", "VTBR"]
strategy_manager = None
latest_market_data = {}
is_trading_active = False

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global strategy_manager
    
    # Startup
    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        create_database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        db = get_db_session()
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            accounts_created = 0
            for symbol in symbols:
                account = db.query(VirtualAccount).filter(VirtualAccount.symbol == symbol).first()
                if not account:
                    account = VirtualAccount(
                        symbol=symbol,
                        initial_balance=100000.0,
                        current_balance=100000.0,
                        max_balance=100000.0
                    )
                    db.add(account)
                    accounts_created += 1
                    print(f"üí≥ –°–æ–∑–¥–∞–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è {symbol}")
                else:
                    print(f"üí≥ –°—á–µ—Ç {symbol}: {account.current_balance:,.0f} ‚ÇΩ")
            
            if accounts_created == 0:
                print("üí≥ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            settings_created = 0
            for symbol in symbols:
                settings = db.query(StrategySettings).filter(StrategySettings.symbol == symbol).first()
                if not settings:
                    settings = StrategySettings(symbol=symbol)
                    db.add(settings)
                    settings_created += 1
                    print(f"‚öôÔ∏è –°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {symbol}")
            
            if settings_created == 0:
                print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            db.commit()
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as db_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {db_error}")
            db.rollback()
        finally:
            db.close()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_manager = StrategyManager()
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≥–æ—Ç–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        asyncio.create_task(market_data_updater())
        
        print("üöÄ Financial Potential Strategy API –∑–∞–ø—É—â–µ–Ω!")
        print(f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(symbols)}")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –±–µ–∑ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    
    yield
    
    # Shutdown
    print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Financial Potential Strategy API")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å lifespan
app = FastAPI(
    title="Financial Potential Strategy API",
    description="API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Financial Potential –Ω–∞ –¥–∞–Ω–Ω—ã—Ö MOEX",
    version="2.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
import os
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ frontend
frontend_dir = Path(__file__).parent.parent / "frontend"
if frontend_dir.exists():
    app.mount("/static", StaticFiles(directory=str(frontend_dir)), name="static")

async def market_data_updater():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    global latest_market_data, is_trading_active
    
    while True:
        try:
            if is_trading_active:
                print("üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ MOEX –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                from moex_api import get_moex_data_async
                market_data = await get_moex_data_async(symbols)
                latest_market_data = market_data
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
                signals = strategy_manager.analyze_market(market_data)
                
                if signals:
                    print(f"üéØ –ü–æ–ª—É—á–µ–Ω—ã —Å–∏–≥–Ω–∞–ª—ã: {len(signals)}")
                    for signal in signals:
                        print(f"   {signal.symbol}: {signal.direction} (confidence: {signal.confidence:.2f})")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
                    results = strategy_manager.process_signals(signals)
                    if results:
                        print(f"üí∞ –†–∞–∑–º–µ—â–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(results)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–¥–µ–ª–∫–∏
                update_results = strategy_manager.trading_engine.update_trades(market_data)
                if update_results:
                    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–¥–µ–ª–∫–∏: {len(update_results)}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await asyncio.sleep(60)

# =============================================================================
# API ENDPOINTS
# =============================================================================

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    frontend_path = Path(__file__).parent.parent / "frontend" / "index.html"
    
    if frontend_path.exists():
        try:
            with open(frontend_path, "r", encoding="utf-8") as f:
                return f.read()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è frontend/index.html: {e}")
    
    # Fallback –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    return """
    <html>
        <head>
            <title>Financial Potential Strategy</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .header { background: #2196F3; color: white; padding: 20px; border-radius: 10px; }
                .status { margin: 20px 0; }
                .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 5px; }
                .error { color: #ff6b6b; margin: 20px 0; padding: 15px; background: #ffe6e6; border-radius: 8px; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üöÄ Financial Potential Strategy API v2.0</h1>
                <p>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö MOEX</p>
            </div>
            
            <div class="error">
                <h3>‚ö†Ô∏è –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
                <p>–§–∞–π–ª frontend/index.html –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API endpoints:</p>
            </div>
            
            <div class="status">
                <h2>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
                <p><strong>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</strong> SBER, GAZP, LKOH, VTBR</p>
                <p><strong>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API:</strong> <a href="/docs">/docs</a></p>
                <p><strong>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</strong> <a href="/redoc">/redoc</a></p>
            </div>
            
            <div class="endpoints">
                <h2>üîó –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã</h2>
                <div class="endpoint">GET /market-data - –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</div>
                <div class="endpoint">GET /account/statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞</div>
                <div class="endpoint">GET /trades/history - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</div>
                <div class="endpoint">POST /settings/{symbol} - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞</div>
                <div class="endpoint">POST /api/trading/start - –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏</div>
                <div class="endpoint">POST /api/trading/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</div>
            </div>
            
            <div style="margin-top: 30px; padding: 15px; background: #e3f2fd; border-radius: 8px;">
                <h3>üõ†Ô∏è –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</h3>
                <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª <code>frontend/index.html</code> –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.</p>
            </div>
        </body>
    </html>
    """

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend)
@app.get("/market-data", response_model=Dict[str, MarketDataResponse])
async def get_market_data_compat():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return await get_market_data()

@app.get("/account/statistics")
async def get_account_statistics_compat():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return await get_account_statistics()

@app.get("/trades/history")
async def get_trade_history_compat(symbol: Optional[str] = None, limit: int = 50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return await get_trade_history(symbol, limit)

@app.get("/logs")
async def get_logs_compat(limit: int = 100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–æ–±—ã—Ç–∏–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return await get_logs(limit)

@app.get("/settings/{symbol}", response_model=StrategySettingsResponse)
async def get_strategy_settings_compat(symbol: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return await get_strategy_settings(symbol)

@app.post("/settings/{symbol}", response_model=StrategySettingsResponse)
async def update_strategy_settings_compat(symbol: str, settings_request: StrategySettingsRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return await update_strategy_settings(symbol, settings_request)

# –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
@app.get("/api/trading/status")
async def get_trading_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    global is_trading_active
    return {
        "active": is_trading_active,
        "status": "ACTIVE" if is_trading_active else "STOPPED",
        "timestamp": datetime.now().isoformat()
    }

# –û—Å–Ω–æ–≤–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/api/market-data", response_model=Dict[str, MarketDataResponse])
async def get_market_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    global latest_market_data
    
    if not latest_market_data:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        from moex_api import get_moex_data_async
        latest_market_data = await get_moex_data_async(symbols)
    
    result = {}
    for symbol, data in latest_market_data.items():
        result[symbol] = MarketDataResponse(
            symbol=symbol,
            current_price=data.get('current_price'),
            bid=data.get('current_price'),
            ask=data.get('current_price'),
            volume=None,
            last_update=data.get('last_update', datetime.now().isoformat())
        )
    
    return result

@app.get("/api/account/statistics")
async def get_account_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤"""
    if not strategy_manager:
        raise HTTPException(status_code=503, detail="Strategy manager not initialized")
    
    return strategy_manager.trading_engine.get_account_statistics()

@app.get("/api/account/{symbol}/statistics")
async def get_symbol_account_statistics(symbol: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    if symbol not in symbols:
        raise HTTPException(status_code=404, detail="Symbol not found")
    
    if not strategy_manager:
        raise HTTPException(status_code=503, detail="Strategy manager not initialized")
    
    return strategy_manager.trading_engine.get_account_statistics(symbol)

@app.post("/api/account/reset")
async def reset_all_accounts():
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤"""
    if not strategy_manager:
        raise HTTPException(status_code=503, detail="Strategy manager not initialized")
    
    strategy_manager.trading_engine.reset_account()
    return {"status": "All accounts reset successfully"}

@app.get("/api/trades/history")
async def get_trade_history(symbol: Optional[str] = None, limit: int = 50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    if not strategy_manager:
        raise HTTPException(status_code=503, detail="Strategy manager not initialized")
    
    return strategy_manager.trading_engine.get_trade_history(symbol, limit)

@app.get("/api/settings/{symbol}", response_model=StrategySettingsResponse)
async def get_strategy_settings(symbol: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    if symbol not in symbols:
        raise HTTPException(status_code=404, detail="Symbol not found")
    
    db = get_db_session()
    try:
        settings = db.query(StrategySettings).filter(StrategySettings.symbol == symbol).first()
        if not settings:
            raise HTTPException(status_code=404, detail="Settings not found")
        return settings
    finally:
        db.close()

@app.post("/api/settings/{symbol}", response_model=StrategySettingsResponse)
async def update_strategy_settings(symbol: str, settings_request: StrategySettingsRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    if symbol not in symbols:
        raise HTTPException(status_code=404, detail="Symbol not found")
    
    print(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {symbol}")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {settings_request.dict()}")
    
    db = get_db_session()
    try:
        settings = db.query(StrategySettings).filter(StrategySettings.symbol == symbol).first()
        
        if not settings:
            print(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {symbol}")
            settings = StrategySettings(symbol=symbol)
            db.add(settings)
        else:
            print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {symbol}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        update_data = settings_request.dict()
        updated_fields = []
        
        for field, value in update_data.items():
            if field != 'symbol' and hasattr(settings, field):
                old_value = getattr(settings, field)
                setattr(settings, field, value)
                if old_value != value:
                    updated_fields.append(f"{field}: {old_value} ‚Üí {value}")
        
        if updated_fields:
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {', '.join(updated_fields)}")
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        settings.updated_at = datetime.utcnow()
        
        try:
            db.commit()
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        except Exception as commit_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {commit_error}")
            db.rollback()
            raise HTTPException(status_code=500, detail=f"Database error: {commit_error}")
        
        db.refresh(settings)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        global strategy_manager
        if strategy_manager:
            strategy_manager.strategies[symbol] = FinancialPotentialStrategy(settings)
            print(f"üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ")
        
        return settings
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Error updating settings: {e}")
    finally:
        db.close()

@app.post("/api/trading/start")
async def start_trading():
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    global is_trading_active
    is_trading_active = True
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    if strategy_manager:
        strategy_manager.trading_engine.log_event("TRADING_STARTED", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞")
    
    return {"status": "Trading started", "active": is_trading_active}

@app.post("/api/trading/stop")
async def stop_trading():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    global is_trading_active
    is_trading_active = False
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    if strategy_manager:
        strategy_manager.trading_engine.log_event("TRADING_STOPPED", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    return {"status": "Trading stopped", "active": is_trading_active}

@app.get("/api/signals/{symbol}")
async def get_current_signal(symbol: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    if symbol not in symbols:
        raise HTTPException(status_code=404, detail="Symbol not found")
    
    if not strategy_manager:
        raise HTTPException(status_code=503, detail="Strategy manager not initialized")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    try:
        if symbol not in latest_market_data or not latest_market_data[symbol].get('current_price'):
            print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            from moex_api import get_moex_data_async
            fresh_data = await get_moex_data_async([symbol])
            if symbol in fresh_data:
                latest_market_data[symbol] = fresh_data[symbol]
        
        data = latest_market_data.get(symbol, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –≥–∏–±–∫–æ
        candles = data.get('candles')
        current_price = data.get('current_price')
        
        if current_price is None:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            return {
                "symbol": symbol,
                "direction": "NONE",
                "confidence": 0.0,
                "entry_price": 0.0,
                "stop_loss": 0.0,
                "take_profit": 0.0,
                "lot_size": 0.0,
                "indicators": {
                    "h_fin": 0.0,
                    "rsi": 50.0,
                    "v_level": 0.0,
                    "v_trend": 0.0,
                    "v_rsi": 0.0,
                    "v_total": 0.0
                },
                "timestamp": datetime.now().isoformat(),
                "status": "no_price_data"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–µ—á–µ–π
        if candles is None or (hasattr(candles, 'empty') and candles.empty) or len(candles) < 10:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ —Å —Ü–µ–Ω–æ–π
            return {
                "symbol": symbol,
                "direction": "NONE",
                "confidence": 0.0,
                "entry_price": current_price,
                "stop_loss": current_price,
                "take_profit": current_price,
                "lot_size": 0.0,
                "indicators": {
                    "h_fin": 0.0,
                    "rsi": 50.0,
                    "v_level": 0.0,
                    "v_trend": 0.0,
                    "v_rsi": 0.0,
                    "v_total": 0.0
                },
                "timestamp": datetime.now().isoformat(),
                "status": "insufficient_candles"
            }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        strategy = strategy_manager.strategies[symbol]
        signal = strategy.generate_signal(candles, current_price)
        
        return {
            "symbol": signal.symbol,
            "direction": signal.direction,
            "confidence": signal.confidence,
            "entry_price": signal.entry_price,
            "stop_loss": signal.stop_loss,
            "take_profit": signal.take_profit,
            "lot_size": signal.lot_size,
            "indicators": {
                "h_fin": signal.h_fin,
                "rsi": signal.rsi,
                "v_level": signal.v_level,
                "v_trend": signal.v_trend,
                "v_rsi": signal.v_rsi,
                "v_total": signal.v_total
            },
            "timestamp": signal.timestamp.isoformat(),
            "status": "ok"
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback —Å–∏–≥–Ω–∞–ª
        return {
            "symbol": symbol,
            "direction": "NONE",
            "confidence": 0.0,
            "entry_price": 0.0,
            "stop_loss": 0.0,
            "take_profit": 0.0,
            "lot_size": 0.0,
            "indicators": {
                "h_fin": 0.0,
                "rsi": 50.0,
                "v_level": 0.0,
                "v_trend": 0.0,
                "v_rsi": 0.0,
                "v_total": 0.0
            },
            "timestamp": datetime.now().isoformat(),
            "status": "error",
            "error": str(e)
        }

@app.get("/api/levels/{symbol}")
async def get_levels(symbol: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    if symbol not in symbols:
        raise HTTPException(status_code=404, detail="Symbol not found")
    
    if not strategy_manager:
        raise HTTPException(status_code=503, detail="Strategy manager not initialized")
    
    strategy = strategy_manager.strategies[symbol]
    levels = strategy.get_levels_for_chart()
    
    return {
        "symbol": symbol,
        "levels": levels,
        "count": len(levels),
        "last_build": strategy.last_build_time.isoformat() if strategy.last_build_time else None
    }

@app.get("/api/logs")
async def get_logs(limit: int = 100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
    db = get_db_session()
    try:
        from models import StrategyLog
        logs = db.query(StrategyLog).order_by(StrategyLog.timestamp.desc()).limit(limit).all()
        
        return [{
            "id": log.id,
            "timestamp": log.timestamp.isoformat(),
            "symbol": log.symbol,
            "event_type": log.event_type,
            "message": log.message,
            "data": json.loads(log.data) if log.data else None
        } for log in logs]
        
    finally:
        db.close()

@app.post("/api/market-data/refresh")
async def refresh_market_data():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    global latest_market_data
    
    try:
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        from moex_api import get_moex_data_async
        fresh_data = await get_moex_data_async(symbols)
        
        if fresh_data:
            latest_market_data = fresh_data
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {len(fresh_data)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é
            result = {
                "status": "success",
                "updated_symbols": [],
                "failed_symbols": [],
                "timestamp": datetime.now().isoformat()
            }
            
            for symbol in symbols:
                if symbol in fresh_data and fresh_data[symbol].get('current_price'):
                    result["updated_symbols"].append({
                        "symbol": symbol,
                        "price": fresh_data[symbol]['current_price'],
                        "candles_count": len(fresh_data[symbol].get('candles', []))
                    })
                else:
                    result["failed_symbols"].append(symbol)
            
            return result
        else:
            return {
                "status": "failed",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ MOEX",
                "timestamp": datetime.now().isoformat()
            }
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    if symbol not in symbols:
        raise HTTPException(status_code=404, detail="Symbol not found")
    
    try:
        from moex_api import get_moex_candles_async
        df = await get_moex_candles_async(symbol, period, days)
        
        if df.empty:
            return {"symbol": symbol, "candles": []}
        
        candles = []
        for _, row in df.iterrows():
            candles.append({
                "datetime": row['datetime'].isoformat(),
                "open": float(row['open']),
                "high": float(row['high']),
                "low": float(row['low']),
                "close": float(row['close']),
                "volume": int(row['volume'])
            })
        
        return {
            "symbol": symbol,
            "period": period,
            "candles": candles,
            "count": len(candles)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching candles: {str(e)}")

# –î–ª—è development
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Financial Potential Strategy API...")
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: SBER, GAZP, LKOH, VTBR")
    print("üåê API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    
    uvicorn.run(
        "main:app", 
        host="0.0.0.0", 
        port=8000, 
        reload=True,
        log_level="info"
    )
