import requests
import pandas as pd
from datetime import datetime, timedelta
from typing import Optional, List
import asyncio
import aiohttp
import json

class MOEXClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏"""
    
    BASE_URL = "https://iss.moex.com/iss"
    
    def __init__(self):
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def get_candles(self, symbol: str, period: str = "10", 
                         start_date: Optional[str] = None, 
                         end_date: Optional[str] = None) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            symbol: –¢–∏–∫–µ—Ä (SBER, GAZP, LKOH, VTBR)
            period: –ü–µ—Ä–∏–æ–¥ (1, 10, 60, D, W, M) - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        """
        if not start_date:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
            start_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
        if not end_date:
            end_date = datetime.now().strftime("%Y-%m-%d")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è MOEX API
        interval_map = {
            "1": "1",      # 1 –º–∏–Ω—É—Ç–∞
            "5": "5",      # 5 –º–∏–Ω—É—Ç  
            "10": "10",    # 10 –º–∏–Ω—É—Ç (–±–ª–∏–∂–∞–π—à–∏–π –∫ 15 –º–∏–Ω—É—Ç–∞–º)
            "15": "10",    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 10 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 15
            "60": "60",    # 1 —á–∞—Å
            "D": "24",     # –¥–µ–Ω—å
            "W": "7",      # –Ω–µ–¥–µ–ª—è
            "M": "31"      # –º–µ—Å—è—Ü
        }
        
        interval = interval_map.get(period, "10")
        
        url = f"{self.BASE_URL}/engines/stock/markets/shares/securities/{symbol}/candles.json"
        params = {
            "from": start_date,
            "till": end_date,
            "interval": interval,
            "iss.meta": "off"
        }
        
        async with self.session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                
                if "candles" in data and "data" in data["candles"]:
                    df = pd.DataFrame(
                        data["candles"]["data"], 
                        columns=data["candles"]["columns"]
                    )
                    
                    if not df.empty:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
                        df["begin"] = pd.to_datetime(df["begin"])
                        df["open"] = pd.to_numeric(df["open"])
                        df["close"] = pd.to_numeric(df["close"])
                        df["high"] = pd.to_numeric(df["high"])
                        df["low"] = pd.to_numeric(df["low"])
                        df["volume"] = pd.to_numeric(df["volume"])
                        
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        df = df.rename(columns={
                            "begin": "datetime",
                            "open": "open",
                            "high": "high", 
                            "low": "low",
                            "close": "close",
                            "volume": "volume"
                        })
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã (9:00-23:50 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
                        df = df[df['datetime'].dt.hour.between(9, 23)]
                        
                        return df[["datetime", "open", "high", "low", "close", "volume"]]
                
                return pd.DataFrame()
            else:
                raise Exception(f"MOEX API error: {response.status}")
    
    async def get_current_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        url = f"{self.BASE_URL}/engines/stock/markets/shares/securities/{symbol}.json"
        params = {"iss.meta": "off"}
        
        async with self.session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                
                if ("securities" in data and 
                    "data" in data["securities"] and 
                    len(data["securities"]["data"]) > 0):
                    
                    columns = data["securities"]["columns"]
                    row = data["securities"]["data"][0]
                    
                    # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–æ–π
                    price_idx = None
                    for idx, col in enumerate(columns):
                        if col.lower() in ["prevprice", "last", "close"]:
                            price_idx = idx
                            break
                    
                    if price_idx is not None and row[price_idx] is not None:
                        return float(row[price_idx])
                
                return None
            else:
                raise Exception(f"MOEX API error: {response.status}")
    
    async def get_market_data(self, symbols: List[str], period: str = "10") -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        results = {}
        
        for symbol in symbols:
            try:
                print(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö {symbol} —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {period} –º–∏–Ω—É—Ç...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                candles = await self.get_candles(
                    symbol, 
                    period=period,
                    start_date=(datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                current_price = await self.get_current_price(symbol)
                
                results[symbol] = {
                    "candles": candles,
                    "current_price": current_price,
                    "last_update": datetime.now().isoformat(),
                    "timeframe": f"{period}_minutes",
                    "candles_count": len(candles) if not candles.empty else 0
                }
                
                print(f"‚úÖ {symbol}: —Ü–µ–Ω–∞ {current_price}, —Å–≤–µ—á–µ–π {len(candles) if not candles.empty else 0}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                results[symbol] = {
                    "candles": pd.DataFrame(),
                    "current_price": None,
                    "error": str(e),
                    "timeframe": f"{period}_minutes"
                }
        
        return results

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def get_moex_data_async(symbols: List[str], period: str = "10") -> dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOEX —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    async with MOEXClient() as client:
        return await client.get_market_data(symbols, period)

def get_moex_data(symbols: List[str], period: str = "10") -> dict:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOEX —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop
        loop = asyncio.get_running_loop()
        # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º task
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(asyncio.run, get_moex_data_async(symbols, period))
            return future.result()
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç running event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run
        return asyncio.run(get_moex_data_async(symbols, period))

async def get_moex_candles_async(symbol: str, period: str = "10", days: int = 7) -> pd.DataFrame:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    async with MOEXClient() as client:
        start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
        return await client.get_candles(symbol, period, start_date)

def get_moex_candles(symbol: str, period: str = "10", days: int = 7) -> pd.DataFrame:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    try:
        loop = asyncio.get_running_loop()
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(asyncio.run, get_moex_candles_async(symbol, period, days))
            return future.result()
    except RuntimeError:
        return asyncio.run(get_moex_candles_async(symbol, period, days))

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    import asyncio
    
    async def test():
        symbols = ["SBER", "GAZP", "LKOH", "VTBR"]
        
        async with MOEXClient() as client:
            print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MOEX API —Å 15-–º–∏–Ω—É—Ç–Ω—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º...")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å 10-–º–∏–Ω—É—Ç–Ω—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º (–±–ª–∏–∂–∞–π—à–∏–π –∫ 15)
            market_data = await client.get_market_data(symbols, period="10")
            
            for symbol, data in market_data.items():
                print(f"\n{symbol}:")
                print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {data.get('current_price')}")
                print(f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {data.get('timeframe')}")
                print(f"–°–≤–µ—á–µ–π –ø–æ–ª—É—á–µ–Ω–æ: {data.get('candles_count', 0)}")
                
                if not data.get('candles', pd.DataFrame()).empty:
                    df = data['candles']
                    print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {df.iloc[-1]['datetime']} - Close: {df.iloc[-1]['close']}")
    
    asyncio.run(test())
