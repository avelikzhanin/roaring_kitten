from sqlalchemy import create_engine, Column, Integer, Float, String, DateTime, Boolean, Text, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime
from pydantic import BaseModel
from typing import Optional, List, Dict
import json

Base = declarative_base()

# SQLAlchemy –º–æ–¥–µ–ª–∏
class StrategySettings(Base):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    __tablename__ = "strategy_settings"
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String(10), nullable=False)
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    atr_period = Column(Integer, default=14)
    rsi_period = Column(Integer, default=14)
    ema_period = Column(Integer, default=20)
    
    # –£—Ä–æ–≤–Ω–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã
    threshold_level = Column(Float, default=0.4)
    level_radius_factor = Column(Float, default=4.5)
    min_potential_strength = Column(Float, default=0.6)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    risk_percent = Column(Float, default=0.7)
    dynamic_lot = Column(Boolean, default=True)
    base_lot = Column(Float, default=0.03)
    min_lot = Column(Float, default=0.01)
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
    max_drawdown_percent = Column(Float, default=25.0)
    reduce_risk_on_drawdown = Column(Boolean, default=True)
    drawdown_risk_reduction = Column(Float, default=0.5)
    
    # SL/TP
    stop_loss_atr = Column(Float, default=2.5)
    take_profit_atr = Column(Float, default=3.5)
    enable_ladder = Column(Boolean, default=False)
    ladder_count = Column(Integer, default=2)
    ladder_step_atr = Column(Float, default=0.4)
    
    # –°–∏–≥–Ω–∞–ª—ã
    buy_rsi_threshold = Column(Float, default=40.0)
    sell_rsi_threshold = Column(Float, default=60.0)
    buy_threshold_multiplier = Column(Float, default=1.0)
    sell_threshold_multiplier = Column(Float, default=1.3)
    
    # –§–∏–ª—å—Ç—Ä—ã
    use_volatility_filter = Column(Boolean, default=True)
    max_atr_multiplier = Column(Float, default=2.2)
    use_volume_filter = Column(Boolean, default=True)
    min_volume_ratio = Column(Float, default=1.2)
    
    # –†–µ–∂–∏–º—ã
    mode = Column(String(20), default="LIMIT")  # LIMIT –∏–ª–∏ BREAKOUT
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class VirtualAccount(Base):
    """–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç"""
    __tablename__ = "virtual_account"
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String(10), nullable=False, unique=True)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    initial_balance = Column(Float, default=100000.0)
    current_balance = Column(Float, default=100000.0)
    max_balance = Column(Float, default=100000.0)
    current_drawdown = Column(Float, default=0.0)
    trading_blocked = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class VirtualTrade(Base):
    """–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞"""
    __tablename__ = "virtual_trades"
    
    id = Column(Integer, primary_key=True)
    account_id = Column(Integer, ForeignKey("virtual_account.id"))
    symbol = Column(String(10), nullable=False)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏
    direction = Column(String(10), nullable=False)  # BUY, SELL
    entry_price = Column(Float, nullable=False)
    exit_price = Column(Float, nullable=True)
    lot_size = Column(Float, nullable=False)
    stop_loss = Column(Float, nullable=True)
    take_profit = Column(Float, nullable=True)
    
    # –°—Ç–∞—Ç—É—Å
    status = Column(String(20), default="PENDING")  # PENDING, OPEN, CLOSED, CANCELLED
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    profit_loss = Column(Float, default=0.0)
    commission = Column(Float, default=0.0)
    
    # –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    h_fin = Column(Float, nullable=True)
    rsi = Column(Float, nullable=True)
    v_level = Column(Float, nullable=True)
    v_trend = Column(Float, nullable=True)
    v_rsi = Column(Float, nullable=True)
    v_total = Column(Float, nullable=True)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime, default=datetime.utcnow)
    opened_at = Column(DateTime, nullable=True)
    closed_at = Column(DateTime, nullable=True)
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comment = Column(Text, nullable=True)
    
    account = relationship("VirtualAccount")

class StrategyLog(Base):
    """–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    __tablename__ = "strategy_logs"
    
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=datetime.utcnow)
    symbol = Column(String(10), nullable=False)
    event_type = Column(String(50), nullable=False)  # SIGNAL, TRADE, ERROR, INFO
    message = Column(Text, nullable=False)
    data = Column(Text, nullable=True)  # JSON –¥–∞–Ω–Ω—ã–µ

class MarketLevel(Base):
    """–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
    __tablename__ = "market_levels"
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String(10), nullable=False)
    price = Column(Float, nullable=False)
    strength = Column(Float, nullable=False)
    is_resistance = Column(Boolean, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    level_time = Column(DateTime, nullable=False)

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class StrategySettingsRequest(BaseModel):
    symbol: str
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    atr_period: int = 14
    rsi_period: int = 14
    ema_period: int = 20
    
    # –£—Ä–æ–≤–Ω–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã
    threshold_level: float = 0.4
    level_radius_factor: float = 4.5
    min_potential_strength: float = 0.6
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    risk_percent: float = 0.7
    dynamic_lot: bool = True
    base_lot: float = 0.03
    min_lot: float = 0.01
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
    max_drawdown_percent: float = 25.0
    reduce_risk_on_drawdown: bool = True
    drawdown_risk_reduction: float = 0.5
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    use_volatility_filter: bool = True
    max_atr_multiplier: float = 2.2
    atr_period_for_avg: int = 50
    
    # SL/TP
    stop_loss_atr: float = 2.5
    take_profit_atr: float = 3.5
    enable_ladder: bool = False
    ladder_count: int = 2
    ladder_step_atr: float = 0.4
    
    # –°–∏–≥–Ω–∞–ª—ã
    buy_rsi_threshold: float = 40.0
    sell_rsi_threshold: float = 60.0
    buy_threshold_multiplier: float = 1.0
    sell_threshold_multiplier: float = 1.3
    
    # –§–∏–ª—å—Ç—Ä—ã
    use_volume_filter: bool = True
    min_volume_ratio: float = 1.2
    volume_period: int = 20
    
    # –†–µ–∂–∏–º—ã
    mode: str = "LIMIT"

class StrategySettingsResponse(BaseModel):
    id: int
    symbol: str
    atr_period: int
    rsi_period: int
    ema_period: int
    threshold_level: float
    level_radius_factor: float
    min_potential_strength: float
    risk_percent: float
    dynamic_lot: bool
    base_lot: float
    min_lot: float
    max_drawdown_percent: float
    reduce_risk_on_drawdown: bool
    drawdown_risk_reduction: float
    stop_loss_atr: float
    take_profit_atr: float
    enable_ladder: bool
    ladder_count: int
    ladder_step_atr: float
    buy_rsi_threshold: float
    sell_rsi_threshold: float
    buy_threshold_multiplier: float
    sell_threshold_multiplier: float
    use_volatility_filter: bool
    max_atr_multiplier: float
    use_volume_filter: bool
    min_volume_ratio: float
    mode: str
    created_at: datetime
    updated_at: datetime

class VirtualTradeResponse(BaseModel):
    id: int
    symbol: str
    direction: str
    entry_price: float
    exit_price: Optional[float]
    lot_size: float
    stop_loss: Optional[float]
    take_profit: Optional[float]
    status: str
    profit_loss: float
    commission: float
    h_fin: Optional[float]
    rsi: Optional[float]
    v_level: Optional[float]
    v_trend: Optional[float]
    v_rsi: Optional[float]
    v_total: Optional[float]
    created_at: datetime
    opened_at: Optional[datetime]
    closed_at: Optional[datetime]
    comment: Optional[str]

class AccountResponse(BaseModel):
    id: int
    symbol: str
    initial_balance: float
    current_balance: float
    max_balance: float
    current_drawdown: float
    trading_blocked: bool
    created_at: datetime
    updated_at: datetime

class AccountsStatisticsResponse(BaseModel):
    accounts: Dict[str, AccountResponse]
    trading_statistics: Dict[str, Dict]
    total_balance: float
    total_return: float

class MarketDataResponse(BaseModel):
    symbol: str
    current_price: Optional[float]
    bid: Optional[float]
    ask: Optional[float]
    volume: Optional[float]
    last_update: str

class StrategySignal(BaseModel):
    symbol: str
    direction: str  # BUY, SELL, NONE
    confidence: float
    entry_price: float
    stop_loss: float
    take_profit: float
    lot_size: float
    h_fin: float
    rsi: float
    v_level: float
    v_trend: float
    v_rsi: float
    v_total: float
    timestamp: datetime

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü"""
    import os
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –æ—Ç Railway
    database_url = os.getenv("DATABASE_URL")
    if database_url:
        # PostgreSQL –Ω–∞ Railway
        print("üêò –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL (Railway)")
        engine = create_engine(database_url)
    else:
        # SQLite –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        print("üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite (–ª–æ–∫–∞–ª—å–Ω–æ)")
        engine = create_engine("sqlite:///fp_strategy.db")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü
    if database_url:
        migrate_database(engine)
    
    Base.metadata.create_all(engine)
    return engine

def migrate_database(engine):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è PostgreSQL"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        from sqlalchemy import text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ symbol –≤ virtual_account
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'virtual_account' 
                AND column_name = 'symbol'
            """))
            
            if not result.fetchone():
                print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ symbol –≤ virtual_account...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É symbol
                conn.execute(text("ALTER TABLE virtual_account ADD COLUMN symbol VARCHAR(10)"))
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ symbol, —É–¥–∞–ª—è–µ–º –∏—Ö (–æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã)
                conn.execute(text("DELETE FROM virtual_account WHERE symbol IS NULL"))
                
                # –î–µ–ª–∞–µ–º –∫–æ–ª–æ–Ω–∫—É NOT NULL
                conn.execute(text("ALTER TABLE virtual_account ALTER COLUMN symbol SET NOT NULL"))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π constraint
                conn.execute(text("ALTER TABLE virtual_account ADD CONSTRAINT virtual_account_symbol_key UNIQUE (symbol)"))
                
                # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                conn.commit()
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ symbol —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        print("üîÑ –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É virtual_account...")
        
        # –ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        try:
            from sqlalchemy import text
            with engine.connect() as conn:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
                
                # –î—Ä–æ–ø–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
                conn.execute(text("DROP TABLE IF EXISTS virtual_account CASCADE"))
                conn.commit()
                
                print("‚úÖ –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è")
                
        except Exception as recreate_error:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {recreate_error}")
            print("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ - —Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∑–∞–Ω–æ–≤–æ")

def get_db_session():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    import os
    
    database_url = os.getenv("DATABASE_URL")
    if database_url:
        engine = create_engine(database_url)
    else:
        engine = create_engine("sqlite:///fp_strategy.db")
        
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    return SessionLocal()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    create_database()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
