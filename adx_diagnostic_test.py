#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å ADX
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ Railway –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import os
import sys
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

async def diagnose_adx_problem():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å ADX"""
    
    print("üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ ADX", flush=True)
    print("=" * 50, flush=True)
    
    tinkoff_token = os.getenv("TINKOFF_TOKEN")
    if not tinkoff_token:
        print("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!", flush=True)
        return
    
    try:
        from src.data_provider import TinkoffDataProvider
        from src.indicators import TechnicalIndicators
        import pandas as pd
        import numpy as np
        
        # 1. –¢–ï–°–¢ –†–ê–ó–ù–´–• –ü–ï–†–ò–û–î–û–í –î–ê–ù–ù–´–•
        print("\n1Ô∏è‚É£ –¢–ï–°–¢ –†–ê–ó–ù–´–• –ü–ï–†–ò–û–î–û–í –î–ê–ù–ù–´–•:", flush=True)
        
        provider = TinkoffDataProvider(tinkoff_token)
        
        periods_to_test = [50, 100, 150, 200]
        
        for hours in periods_to_test:
            print(f"\nüìä –¢–µ—Å—Ç —Å {hours} —á–∞—Å–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:", flush=True)
            
            candles = await provider.get_candles_for_ticker("BBG004730N88", hours=hours)
            if len(candles) < 30:
                print(f"   ‚ùå –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: {len(candles)}", flush=True)
                continue
            
            df = provider.candles_to_dataframe(candles)
            if df.empty:
                print(f"   ‚ùå –ü—É—Å—Ç–æ–π DataFrame", flush=True)
                continue
            
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            result = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            current_adx = result['adx'][-1] if not pd.isna(result['adx'][-1]) else None
            current_plus_di = result['plus_di'][-1] if not pd.isna(result['plus_di'][-1]) else None
            current_minus_di = result['minus_di'][-1] if not pd.isna(result['minus_di'][-1]) else None
            
            print(f"   ADX: {current_adx:.1f} | +DI: {current_plus_di:.1f} | -DI: {current_minus_di:.1f}", flush=True)
        
        # 2. –¢–ï–°–¢ –ü–û–°–õ–ï–î–ù–ò–• N –°–í–ï–ß–ï–ô
        print(f"\n2Ô∏è‚É£ –í–õ–ò–Ø–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–í–ï–ß–ï–ô –ù–ê –†–ï–ó–£–õ–¨–¢–ê–¢:", flush=True)
        
        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö
        candles = await provider.get_candles_for_ticker("BBG004730N88", hours=200)
        df = provider.candles_to_dataframe(candles)
        
        if not df.empty:
            full_closes = df['close'].tolist()
            full_highs = df['high'].tolist()
            full_lows = df['low'].tolist()
            
            test_sizes = [50, 75, 100, len(full_closes)]
            
            for size in test_sizes:
                if size <= len(full_closes):
                    test_closes = full_closes[-size:]
                    test_highs = full_highs[-size:]
                    test_lows = full_lows[-size:]
                    
                    result = TechnicalIndicators.calculate_adx(test_highs, test_lows, test_closes, 14)
                    
                    current_adx = result['adx'][-1] if not pd.isna(result['adx'][-1]) else None
                    current_plus_di = result['plus_di'][-1] if not pd.isna(result['plus_di'][-1]) else None
                    current_minus_di = result['minus_di'][-1] if not pd.isna(result['minus_di'][-1]) else None
                    
                    if current_adx:
                        error_from_target = abs(current_adx - 60.68)
                        print(f"   {size:3d} —Å–≤–µ—á–µ–π: ADX:{current_adx:5.1f} +DI:{current_plus_di:5.1f} -DI:{current_minus_di:5.1f} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç 60.68: {error_from_target:4.1f})", flush=True)
        
        # 3. –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –°–í–ï–ß–ï–ô
        print(f"\n3Ô∏è‚É£ –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•:", flush=True)
        
        if not df.empty and len(df) >= 10:
            print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π:", flush=True)
            for i in range(len(df) - 10, len(df)):
                row = df.iloc[i]
                print(f"   [{i:2d}] {row['timestamp'].strftime('%d.%m %H:%M')} "
                      f"O:{row['open']:6.2f} H:{row['high']:6.2f} L:{row['low']:6.2f} C:{row['close']:6.2f}", flush=True)
            
            # –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å–≤–µ—á–µ–π
            print(f"\n   –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç TR –∏ DM –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å–≤–µ—á–µ–π:", flush=True)
            
            for i in range(len(df) - 3, len(df)):
                if i > 0:
                    curr_h, curr_l, curr_c = df.iloc[i]['high'], df.iloc[i]['low'], df.iloc[i]['close']
                    prev_h, prev_l, prev_c = df.iloc[i-1]['high'], df.iloc[i-1]['low'], df.iloc[i-1]['close']
                    
                    # True Range
                    tr1 = curr_h - curr_l
                    tr2 = abs(curr_h - prev_c)
                    tr3 = abs(curr_l - prev_c)
                    tr = max(tr1, tr2, tr3)
                    
                    # Directional Movement
                    high_diff = curr_h - prev_h
                    low_diff = prev_l - curr_l
                    
                    plus_dm = max(high_diff, 0) if high_diff > low_diff else 0
                    minus_dm = max(low_diff, 0) if low_diff > high_diff else 0
                    
                    print(f"   [{i:2d}] TR:{tr:5.2f} +DM:{plus_dm:5.2f} -DM:{minus_dm:5.2f}", flush=True)
        
        # 4. –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –î–ê–ù–ù–´–•
        print(f"\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –î–ê–ù–ù–´–•:", flush=True)
        
        if not df.empty:
            first_candle = df.iloc[0]
            last_candle = df.iloc[-1]
            
            print(f"   –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞: {first_candle['timestamp']}", flush=True)
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {last_candle['timestamp']}", flush=True)
            print(f"   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now()}", flush=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            from datetime import datetime, timezone
            now = datetime.now(timezone.utc)
            last_candle_time = pd.to_datetime(last_candle['timestamp'], utc=True)
            time_diff = (now - last_candle_time).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
            
            print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {time_diff:.1f} —á–∞—Å–æ–≤", flush=True)
            
            if time_diff > 2:
                print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏!", flush=True)
        
        # 5. –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢ –° –†–ê–ó–ù–´–ú–ò –ü–ï–†–ò–û–î–ê–ú–ò ADX
        print(f"\n5Ô∏è‚É£ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢ –° –†–ê–ó–ù–´–ú–ò –ü–ï–†–ò–û–î–ê–ú–ò ADX:", flush=True)
        
        if not df.empty:
            test_periods = [10, 14, 18, 21]
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            for period in test_periods:
                result = TechnicalIndicators.calculate_adx(highs, lows, closes, period)
                
                current_adx = result['adx'][-1] if not pd.isna(result['adx'][-1]) else None
                current_plus_di = result['plus_di'][-1] if not pd.isna(result['plus_di'][-1]) else None
                current_minus_di = result['minus_di'][-1] if not pd.isna(result['minus_di'][-1]) else None
                
                if current_adx:
                    error_from_target = abs(current_adx - 60.68)
                    print(f"   –ü–µ—Ä–∏–æ–¥ {period:2d}: ADX:{current_adx:5.1f} +DI:{current_plus_di:5.1f} -DI:{current_minus_di:5.1f} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {error_from_target:4.1f})", flush=True)
        
        print(f"\n" + "=" * 50, flush=True)
        print("üéØ –í–´–í–û–î–´:", flush=True)
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∫–æ–π —Ç–µ—Å—Ç –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–ª–∏–∂–µ –∫ 60.68", flush=True)
        print("2. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö", flush=True)
        print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ADX", flush=True)
        print("=" * 50, flush=True)
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}", flush=True)
        import traceback
        traceback.print_exc()

async def main():
    await diagnose_adx_problem()

if __name__ == "__main__":
    asyncio.run(main())
