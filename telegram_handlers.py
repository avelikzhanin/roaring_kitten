import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters

from stock_service import StockService
from formatters import MessageFormatter
from config import SUPPORTED_STOCKS
from database import db
from gpt_analyst import gpt_analyst

logger = logging.getLogger(__name__)


class TelegramHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram"""
    
    def __init__(self):
        self.stock_service = StockService()
        self.formatter = MessageFormatter()
    
    def _create_main_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π ReplyKeyboard"""
        keyboard = [
            ["üìä –°–∏–≥–Ω–∞–ª—ã", "üíº –ü–æ–∑–∏—Ü–∏–∏"]
        ]
        return ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True
        )
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await db.add_user(user.id, user.username, user.first_name)
        
        welcome_message = self.formatter.format_welcome_message()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å ReplyKeyboard
        await update.message.reply_text(
            welcome_message,
            parse_mode='HTML',
            reply_markup=self._create_main_keyboard()
        )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ReplyKeyboard"""
        text = update.message.text
        user_id = update.effective_user.id
        
        if text == "üìä –°–∏–≥–Ω–∞–ª—ã":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π
            await self._send_stocks_list(update, user_id)
        
        elif text == "üíº –ü–æ–∑–∏—Ü–∏–∏":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            await self._send_positions(update, user_id)
    
    async def _send_stocks_list(self, update: Update, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π"""
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        for ticker, info in SUPPORTED_STOCKS.items():
            is_subscribed = await db.is_subscribed(user_id, ticker)
            icon = "‚≠ê " if is_subscribed else ""
            
            button = InlineKeyboardButton(
                text=f"{icon}{info['emoji']} {ticker} - {info['name']}",
                callback_data=f"stock:{ticker}"
            )
            keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = self.formatter.format_stocks_selection()
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    async def _send_positions(self, update: Update, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏"""
        open_positions = await db.get_open_positions(user_id)
        closed_positions = await db.get_closed_positions(user_id, limit=5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        current_prices = {}
        if open_positions:
            for pos in open_positions:
                ticker = pos['ticker']
                stock_data = await self.stock_service.get_stock_data(ticker)
                if stock_data:
                    current_prices[ticker] = stock_data.price.current_price
        
        message = self.formatter.format_positions_list(
            open_positions, 
            closed_positions,
            current_prices
        )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def stocks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stocks - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ —Å –∞–∫—Ü–∏—è–º–∏"""
        user_id = update.effective_user.id
        await self._send_stocks_list(update, user_id)
    
    async def positions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /positions - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏"""
        user_id = update.effective_user.id
        await self._send_positions(update, user_id)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        # –ü–∞—Ä—Å–∏–º callback_data
        if query.data.startswith("stock:"):
            ticker = query.data.split(":")[1]
            await self._show_stock_data(query, user_id, ticker)
        
        elif query.data.startswith("subscribe:"):
            ticker = query.data.split(":")[1]
            await self._handle_subscribe(query, user_id, ticker)
        
        elif query.data.startswith("unsubscribe:"):
            ticker = query.data.split(":")[1]
            await self._handle_unsubscribe(query, user_id, ticker)
        
        elif query.data.startswith("gpt_analyze:"):
            ticker = query.data.split(":")[1]
            await self._handle_gpt_analysis(query, user_id, ticker)
        
        elif query.data == "back_to_stocks":
            await self._show_stocks_list_inline(query, user_id)
        
        elif query.data == "main_menu":
            await self._show_main_menu(query)
        
        elif query.data == "menu_stocks":
            await self._show_stocks_list_inline(query, user_id)
        
        elif query.data == "menu_positions":
            await self._show_positions_inline(query, user_id)
    
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        welcome_message = self.formatter.format_welcome_message()
        
        await query.edit_message_text(welcome_message, parse_mode='HTML')
    
    async def _show_stocks_list_inline(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π (–¥–ª—è inline callback)"""
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        for ticker, info in SUPPORTED_STOCKS.items():
            is_subscribed = await db.is_subscribed(user_id, ticker)
            icon = "‚≠ê " if is_subscribed else ""
            
            button = InlineKeyboardButton(
                text=f"{icon}{info['emoji']} {ticker} - {info['name']}",
                callback_data=f"stock:{ticker}"
            )
            keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = self.formatter.format_stocks_selection()
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    async def _show_positions_inline(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è inline callback)"""
        open_positions = await db.get_open_positions(user_id)
        closed_positions = await db.get_closed_positions(user_id, limit=5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        current_prices = {}
        if open_positions:
            for pos in open_positions:
                ticker = pos['ticker']
                stock_data = await self.stock_service.get_stock_data(ticker)
                if stock_data:
                    current_prices[ticker] = stock_data.price.current_price
        
        message = self.formatter.format_positions_list(
            open_positions, 
            closed_positions,
            current_prices
        )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def _show_stock_data(self, query, user_id: int, ticker: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        await query.edit_message_text(self.formatter.format_loading_message(ticker))
        
        try:
            stock_data = await self.stock_service.get_stock_data(ticker)
            
            if not stock_data:
                await query.edit_message_text(
                    self.formatter.format_error_message("no_data")
                )
                return
            
            if not stock_data.is_valid():
                await query.edit_message_text(
                    self.formatter.format_error_message("insufficient_data")
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            is_subscribed = await db.is_subscribed(user_id, ticker)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.formatter.format_stock_message(stock_data, is_subscribed)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = []
            
            if is_subscribed:
                keyboard.append([
                    InlineKeyboardButton(
                        text="‚úñÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
                        callback_data=f"unsubscribe:{ticker}"
                    )
                ])
            else:
                keyboard.append([
                    InlineKeyboardButton(
                        text="‚≠ê –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                        callback_data=f"subscribe:{ticker}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data=f"stock:{ticker}"
                )
            ])
            
            keyboard.append([
                InlineKeyboardButton(
                    text="ü§ñ GPT –∞–Ω–∞–ª–∏–∑",
                    callback_data=f"gpt_analyze:{ticker}"
                )
            ])
            
            keyboard.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_stocks"
                )
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message, 
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error getting {ticker} data: {e}")
            await query.edit_message_text(
                self.formatter.format_error_message("general")
            )
    
    async def _handle_subscribe(self, query, user_id: int, ticker: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        success = await db.add_subscription(user_id, ticker)
        
        stock_info = SUPPORTED_STOCKS.get(ticker, {})
        emoji = stock_info.get('emoji', 'üìä')
        name = stock_info.get('name', ticker)
        
        if success:
            message = f"‚≠ê –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {emoji} {ticker} - {name}\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö!"
        else:
            message = "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∞–∫—Ü–∏—é."
        
        await query.answer(message, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ü–∏–∏
        await self._show_stock_data(query, user_id, ticker)
    
    async def _handle_unsubscribe(self, query, user_id: int, ticker: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏"""
        success = await db.remove_subscription(user_id, ticker)
        
        stock_info = SUPPORTED_STOCKS.get(ticker, {})
        emoji = stock_info.get('emoji', 'üìä')
        name = stock_info.get('name', ticker)
        
        if success:
            message = f"‚úñÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {emoji} {ticker} - {name}"
        else:
            message = "‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∞–∫—Ü–∏—é."
        
        await query.answer(message, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ü–∏–∏
        await self._show_stock_data(query, user_id, ticker)
    
    async def _handle_gpt_analysis(self, query, user_id: int, ticker: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GPT –∞–Ω–∞–ª–∏–∑–∞"""
        await query.edit_message_text("ü§ñ GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–µ—á–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏
            stock_data = await self.stock_service.get_stock_data(ticker)
            
            if not stock_data or not stock_data.is_valid():
                await query.edit_message_text(
                    self.formatter.format_error_message("no_data")
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            candles_data = await self.stock_service.moex_client.get_historical_candles(ticker)
            
            if not candles_data:
                await query.edit_message_text(
                    self.formatter.format_error_message("no_data")
                )
                return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPT –∞–Ω–∞–ª–∏–∑
            gpt_analysis = await gpt_analyst.analyze_stock(stock_data, candles_data)
            
            if not gpt_analysis:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.formatter.format_gpt_analysis_message(stock_data, gpt_analysis)
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ü–∏–∏", callback_data=f"stock:{ticker}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error in GPT analysis for {ticker}: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
    
    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        return [
            CommandHandler("start", self.start_command),
            CommandHandler("stocks", self.stocks_command),
            CommandHandler("positions", self.positions_command),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message),
            CallbackQueryHandler(self.button_callback),
        ]
