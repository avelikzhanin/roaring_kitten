import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler

from stock_service import StockService
from formatters import MessageFormatter
from config import SUPPORTED_STOCKS
from database import db

logger = logging.getLogger(__name__)


class TelegramHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram"""
    
    def __init__(self):
        self.stock_service = StockService()
        self.formatter = MessageFormatter()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await db.add_user(user.id, user.username, user.first_name)
        
        welcome_message = self.formatter.format_welcome_message()
        await update.message.reply_text(welcome_message, parse_mode='HTML')
    
    async def stocks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stocks - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ —Å –∞–∫—Ü–∏—è–º–∏"""
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
        for ticker, info in SUPPORTED_STOCKS.items():
            button = InlineKeyboardButton(
                text=f"{info['emoji']} {ticker} - {info['name']}",
                callback_data=f"stock:{ticker}"
            )
            keyboard.append([button])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = self.formatter.format_stocks_selection()
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    async def subscriptions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscriptions - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = update.effective_user.id
        
        subscriptions = await db.get_user_subscriptions(user_id)
        message = self.formatter.format_subscriptions_list(subscriptions)
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def positions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /positions - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        open_positions = await db.get_open_positions(user_id)
        closed_positions = await db.get_closed_positions(user_id, limit=5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        current_prices = {}
        if open_positions:
            for pos in open_positions:
                ticker = pos['ticker']
                stock_data = await self.stock_service.get_stock_data(ticker)
                if stock_data:
                    current_prices[ticker] = stock_data.price.current_price
        
        message = self.formatter.format_positions_list(
            open_positions, 
            closed_positions,
            current_prices
        )
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        # –ü–∞—Ä—Å–∏–º callback_data
        if query.data.startswith("stock:"):
            ticker = query.data.split(":")[1]
            await self._show_stock_data(query, user_id, ticker)
        
        elif query.data.startswith("subscribe:"):
            ticker = query.data.split(":")[1]
            await self._handle_subscribe(query, user_id, ticker)
        
        elif query.data.startswith("unsubscribe:"):
            ticker = query.data.split(":")[1]
            await self._handle_unsubscribe(query, user_id, ticker)
    
    async def _show_stock_data(self, query, user_id: int, ticker: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        await query.edit_message_text(self.formatter.format_loading_message(ticker))
        
        try:
            stock_data = await self.stock_service.get_stock_data(ticker)
            
            if not stock_data:
                await query.edit_message_text(
                    self.formatter.format_error_message("no_data")
                )
                return
            
            if not stock_data.is_valid():
                await query.edit_message_text(
                    self.formatter.format_error_message("insufficient_data")
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            is_subscribed = await db.is_subscribed(user_id, ticker)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.formatter.format_stock_message(stock_data, is_subscribed)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = []
            
            if is_subscribed:
                keyboard.append([
                    InlineKeyboardButton(
                        text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
                        callback_data=f"unsubscribe:{ticker}"
                    )
                ])
            else:
                keyboard.append([
                    InlineKeyboardButton(
                        text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                        callback_data=f"subscribe:{ticker}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data=f"stock:{ticker}"
                )
            ])
            
            keyboard.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_stocks"
                )
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message, 
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error getting {ticker} data: {e}")
            await query.edit_message_text(
                self.formatter.format_error_message("general")
            )
    
    async def _handle_subscribe(self, query, user_id: int, ticker: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        success = await db.add_subscription(user_id, ticker)
        
        if success:
            message = self.formatter.format_subscription_added(ticker)
        else:
            message = self.formatter.format_error_message("already_subscribed")
        
        await query.answer(message, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ü–∏–∏
        await self._show_stock_data(query, user_id, ticker)
    
    async def _handle_unsubscribe(self, query, user_id: int, ticker: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏"""
        success = await db.remove_subscription(user_id, ticker)
        
        if success:
            message = self.formatter.format_subscription_removed(ticker)
        else:
            message = self.formatter.format_error_message("not_subscribed")
        
        await query.answer(message, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ü–∏–∏
        await self._show_stock_data(query, user_id, ticker)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
    
    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        return [
            CommandHandler("start", self.start_command),
            CommandHandler("stocks", self.stocks_command),
            CommandHandler("subscriptions", self.subscriptions_command),
            CommandHandler("positions", self.positions_command),
            CallbackQueryHandler(self.button_callback),
        ]
