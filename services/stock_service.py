import logging
from typing import Optional

from api.moex_api import MoexApiClient
from indicators.technical_indicators import TechnicalIndicators
from models.stock import StockData, StockPrice, TechnicalData, StockInfo
from config import SUPPORTED_STOCKS, MAX_CANDLES

logger = logging.getLogger(__name__)


class StockService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫—Ü–∏–π"""
    
    def __init__(self):
        self.moex_client = MoexApiClient()
        self.indicators = TechnicalIndicators()
    
    async def get_stock_data(self, ticker: str) -> Optional[StockData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ü–∏–∏"""
        ticker = ticker.upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–∏–∫–µ—Ä–∞
        if ticker not in SUPPORTED_STOCKS:
            logger.error(f"Unsupported ticker: {ticker}")
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            current_price = await self.moex_client.get_current_price(ticker)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            candles_data = await self.moex_client.get_historical_candles(ticker)
            if not candles_data:
                return None
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            if len(candles_data) > MAX_CANDLES:
                candles_data = candles_data[-MAX_CANDLES:]
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self._log_candles_info(ticker, candles_data)
            
            # –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            technical_data = self.indicators.calculate_all_indicators(candles_data)
            if not technical_data:
                return None
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            stock_info = StockInfo(
                ticker=ticker,
                name=SUPPORTED_STOCKS[ticker]['name'],
                emoji=SUPPORTED_STOCKS[ticker]['emoji']
            )
            
            price_data = StockPrice(
                current_price=current_price if current_price else candles_data[-1]['close'],
                last_close=candles_data[-1]['close']
            )
            
            technical = TechnicalData(
                ema20=technical_data['ema20'],
                adx_standard=technical_data['adx_standard'],
                di_plus_standard=technical_data['di_plus_standard'],
                di_minus_standard=technical_data['di_minus_standard'],
                adx_pinescript=technical_data['adx_pinescript'],
                di_plus_pinescript=technical_data['di_plus_pinescript'],
                di_minus_pinescript=technical_data['di_minus_pinescript']
            )
            
            stock_data = StockData(
                info=stock_info,
                price=price_data,
                technical=technical
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if not stock_data.is_valid():
                logger.error(f"Invalid technical data for {ticker}")
                return None
            
            return stock_data
            
        except Exception as e:
            logger.error(f"Error getting stock data for {ticker}: {e}")
            return None
    
    def _log_candles_info(self, ticker: str, candles_data: list):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–µ—á–∞—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        if candles_data:
            logger.info(f"üîç –ü–û–°–õ–ï–î–ù–ò–ï 3 –°–í–ï–ß–ò {ticker} (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤):")
            for i, candle in enumerate(candles_data[-3:]):
                logger.info(f"   {i+1}. {candle['time']} | O:{candle['open']:.2f} H:{candle['high']:.2f} L:{candle['low']:.2f} C:{candle['close']:.2f}")
            
            first_time = candles_data[0]['time']
            last_time = candles_data[-1]['time']
            logger.info(f"–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö): {first_time} ‚Üí {last_time}")
            logger.info(f"–¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏: {candles_data[-1]['close']:.2f} ‚ÇΩ")
