from typing import List, Dict, Any
from datetime import datetime

from models import StockData, Signal, SignalType
from config import ADX_THRESHOLD, SUPPORTED_STOCKS


class MessageFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def format_stock_message(data: StockData, is_subscribed: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫—Ü–∏–∏"""
        
        adx_strength = "–°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥" if data.technical.adx > ADX_THRESHOLD else "–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª
        signal_emoji = ""
        signal_text = ""
        if data.technical.adx > ADX_THRESHOLD and data.technical.di_plus > ADX_THRESHOLD:
            signal_emoji = "üü¢"
            signal_text = "BUY —Å–∏–≥–Ω–∞–ª"
        elif data.technical.adx <= ADX_THRESHOLD or data.technical.di_plus <= ADX_THRESHOLD:
            signal_emoji = "üî¥"
            signal_text = "SELL —Å–∏–≥–Ω–∞–ª"
        
        subscription_status = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞" if is_subscribed else ""
        
        message = f"""{data.info.emoji} <b>{data.info.ticker} - {data.info.name}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {data.price.current_price:.2f} ‚ÇΩ
üìä <b>EMA20:</b> {data.technical.ema20:.2f} ‚ÇΩ

üìà <b>ADX:</b> {data.technical.adx:.2f} ({adx_strength})
<b>DI+:</b> {data.technical.di_plus:.2f} | <b>DI-:</b> {data.technical.di_minus:.2f}

{signal_emoji} <b>{signal_text}</b>
{subscription_status}"""
        
        return message
    
    @staticmethod
    def format_buy_signal_notification(signal: Signal, stock_name: str, stock_emoji: str) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        return f"""üü¢ <b>–°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£!</b>

{stock_emoji} <b>{signal.ticker} - {stock_name}</b>

üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {signal.price:.2f} ‚ÇΩ

üìà <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ ADX: {signal.adx:.2f}
‚Ä¢ DI+: {signal.di_plus:.2f}
‚Ä¢ DI-: {signal.di_minus:.2f}

‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞! –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É."""
    
    @staticmethod
    def format_sell_signal_notification(
        signal: Signal, 
        stock_name: str, 
        stock_emoji: str,
        entry_price: float,
        profit_percent: float
    ) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        profit_emoji = "üìà" if profit_percent > 0 else "üìâ"
        profit_sign = "+" if profit_percent > 0 else ""
        
        return f"""üî¥ <b>–°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£!</b>

{stock_emoji} <b>{signal.ticker} - {stock_name}</b>

üí∞ <b>–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞:</b> {signal.price:.2f} ‚ÇΩ
üíµ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {entry_price:.2f} ‚ÇΩ

{profit_emoji} <b>–ü—Ä–∏–±—ã–ª—å:</b> {profit_sign}{profit_percent:.2f}%

üìà <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ ADX: {signal.adx:.2f}
‚Ä¢ DI+: {signal.di_plus:.2f}
‚Ä¢ DI-: {signal.di_minus:.2f}

‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞!"""
    
    @staticmethod
    def format_welcome_message() -> str:
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –†–µ–≤—É—â–∏–π –∫–æ—Ç—ë–Ω–æ–∫, –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–∏–≥–Ω–∞–ª—ã –æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Ä—ã–Ω–∫–∞ –∞–∫—Ü–∏–π üê±

üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏ –∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö
‚Ä¢ –ü–æ–ª—É—á–∞–π BUY/SELL —Å–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–∏–±—ã–ª—å –ø–æ —Å–¥–µ–ª–∫–∞–º

üü¢ <b>BUY —Å–∏–≥–Ω–∞–ª:</b> ADX > 25 AND DI+ > 25
üî¥ <b>SELL —Å–∏–≥–Ω–∞–ª:</b> ADX ‚â§ 25 OR DI+ ‚â§ 25

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"""
    
    @staticmethod
    def format_stocks_selection() -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–∏"""
        return "üìà –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\nüîî - –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞"
    
    @staticmethod
    def format_subscriptions_list(subscriptions: List[str]) -> str:
        """–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not subscriptions:
            return """üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stocks –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–∫—Ü–∏–∏."""
        
        message = "üîî <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        for ticker in subscriptions:
            stock_info = SUPPORTED_STOCKS.get(ticker, {})
            emoji = stock_info.get('emoji', 'üìä')
            name = stock_info.get('name', ticker)
            message += f"{emoji} <b>{ticker}</b> - {name}\n"
        
        message += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫—Ü–∏—é –≤ /stocks —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"
        return message
    
    @staticmethod
    def format_positions_list(
        open_positions: List[Dict[str, Any]], 
        closed_positions: List[Dict[str, Any]],
        current_prices: Dict[str, float] = None
    ) -> str:
        """–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if not open_positions and not closed_positions:
            return """üìä –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π.

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ /stocks –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π!"""
        
        message = ""
        
        # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if open_positions:
            message += "üü¢ <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n"
            for pos in open_positions:
                ticker = pos['ticker']
                stock_info = SUPPORTED_STOCKS.get(ticker, {})
                emoji = stock_info.get('emoji', 'üìä')
                name = stock_info.get('name', ticker)
                
                entry_price = float(pos['entry_price'])
                current_price = current_prices.get(ticker) if current_prices else None
                
                profit_text = ""
                if current_price:
                    profit = ((current_price - entry_price) / entry_price) * 100
                    profit_emoji = "üìà" if profit > 0 else "üìâ"
                    profit_sign = "+" if profit > 0 else ""
                    profit_text = f"\n  üí∞ –¢–µ–∫—É—â–∞—è: {current_price:.2f} ‚ÇΩ ({profit_emoji} {profit_sign}{profit:.2f}%)"
                
                entry_time = pos['entry_time'].strftime("%d.%m.%Y %H:%M")
                
                message += f"{emoji} <b>{ticker}</b> - {name}\n"
                message += f"  üìÖ {entry_time}\n"
                message += f"  üíµ –í—Ö–æ–¥: {entry_price:.2f} ‚ÇΩ{profit_text}\n\n"
        
        # –ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if closed_positions:
            message += "\nüî¥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n"
            for pos in closed_positions:
                ticker = pos['ticker']
                stock_info = SUPPORTED_STOCKS.get(ticker, {})
                emoji = stock_info.get('emoji', 'üìä')
                name = stock_info.get('name', ticker)
                
                entry_price = float(pos['entry_price'])
                exit_price = float(pos['exit_price'])
                profit_percent = float(pos['profit_percent'])
                
                profit_emoji = "üìà" if profit_percent > 0 else "üìâ"
                profit_sign = "+" if profit_percent > 0 else ""
                
                exit_time = pos['exit_time'].strftime("%d.%m.%Y %H:%M")
                
                message += f"{emoji} <b>{ticker}</b> - {name}\n"
                message += f"  üìÖ {exit_time}\n"
                message += f"  üíµ {entry_price:.2f} ‚ÇΩ ‚Üí {exit_price:.2f} ‚ÇΩ\n"
                message += f"  {profit_emoji} <b>{profit_sign}{profit_percent:.2f}%</b>\n\n"
        
        return message
    
    @staticmethod
    def format_subscription_added(ticker: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        stock_info = SUPPORTED_STOCKS.get(ticker, {})
        emoji = stock_info.get('emoji', 'üìä')
        name = stock_info.get('name', ticker)
        return f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {emoji} <b>{ticker} - {name}</b>\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö!"
    
    @staticmethod
    def format_subscription_removed(ticker: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        stock_info = SUPPORTED_STOCKS.get(ticker, {})
        emoji = stock_info.get('emoji', 'üìä')
        name = stock_info.get('name', ticker)
        return f"üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {emoji} <b>{ticker} - {name}</b>"
    
    @staticmethod
    def format_error_message(error_type: str = "general") -> str:
        """–°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö"""
        error_messages = {
            "no_data": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "insufficient_data": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "general": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            "already_subscribed": "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∞–∫—Ü–∏—é.",
            "not_subscribed": "‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∞–∫—Ü–∏—é."
        }
        return error_messages.get(error_type, error_messages["general"])
    
    @staticmethod
    def format_loading_message(ticker: str = None) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if ticker:
            return f"‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ {ticker}..."
        return "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ..."
