import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional
import pandas as pd
from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
from tinkoff.invest.utils import now

logger = logging.getLogger(__name__)

class TinkoffDataProvider:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Tinkoff Invest API - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    def __init__(self, token: str):
        self.token = token
        self._client = None
    
    async def get_candles_for_ticker(self, figi: str, hours: int = 100) -> List[HistoricCandle]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –ø–æ FIGI"""
        max_retries = 3
        retry_delay = 2
        
        for attempt in range(max_retries):
            try:
                with Client(self.token) as client:
                    to_time = now()
                    from_time = to_time - timedelta(hours=hours)
                    
                    logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö {figi} –∑–∞ {hours}—á (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    
                    response = client.market_data.get_candles(
                        figi=figi,
                        from_=from_time,
                        to=to_time,
                        interval=CandleInterval.CANDLE_INTERVAL_HOUR
                    )
                    
                    if response.candles:
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(response.candles)} —Å–≤–µ—á–µ–π –¥–ª—è {figi}")
                        return response.candles
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è {figi}")
                        return []
                        
            except RequestError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API Tinkoff –¥–ª—è {figi} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2
                else:
                    logger.error(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {figi}")
                    raise
            except Exception as e:
                logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {figi}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                else:
                    raise
        
        return []
    
    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    async def get_candles(self, hours: int = 100) -> List[HistoricCandle]:
        """–£–°–¢–ê–†–ï–í–®–ò–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SBER (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ get_candles(). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_candles_for_ticker()")
        return await self.get_candles_for_ticker("BBG004730N88", hours)  # SBER FIGI
    
    def candles_to_dataframe(self, candles: List[HistoricCandle]) -> pd.DataFrame:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ DataFrame - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not candles:
            logger.warning("üìä –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π")
            return pd.DataFrame()
        
        data = []
        valid_candles = 0
        
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(candles)} —Å–≤–µ—á–µ–π...")
        
        for i, candle in enumerate(candles):
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Quotation –≤ float
                open_price = self._quotation_to_float(candle.open)
                high_price = self._quotation_to_float(candle.high)
                low_price = self._quotation_to_float(candle.low)
                close_price = self._quotation_to_float(candle.close)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω
                if all(price > 0 for price in [open_price, high_price, low_price, close_price]):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ü–µ–Ω (low <= open,close <= high)
                    if low_price <= open_price <= high_price and low_price <= close_price <= high_price:
                        data.append({
                            'timestamp': candle.time,
                            'open': open_price,
                            'high': high_price,
                            'low': low_price,
                            'close': close_price,
                            'volume': candle.volume
                        })
                        valid_candles += 1
                    else:
                        logger.warning(f"üîç –°–≤–µ—á–∞ {i}: –Ω–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ü–µ–Ω O:{open_price:.2f} H:{high_price:.2f} L:{low_price:.2f} C:{close_price:.2f}")
                else:
                    logger.warning(f"üîç –°–≤–µ—á–∞ {i}: –Ω—É–ª–µ–≤—ã–µ/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã O:{open_price:.2f} H:{high_price:.2f} L:{low_price:.2f} C:{close_price:.2f}")
                    
            except Exception as e:
                logger.warning(f"üîç –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏ {i}: {e}")
                continue
        
        if not data:
            logger.error("‚ùå –í—Å–µ —Å–≤–µ—á–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏!")
            return pd.DataFrame()
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {valid_candles}/{len(candles)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime —Å UTC
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df = df.sort_values('timestamp').reset_index(drop=True)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–π
        original_len = len(df)
        df = df.drop_duplicates(subset=['timestamp'], keep='last').reset_index(drop=True)
        
        if len(df) < original_len:
            logger.info(f"üîÑ –£–¥–∞–ª–µ–Ω–æ {original_len - len(df)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if not df.empty:
            logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π DataFrame: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df.iloc[0]['timestamp'].strftime('%H:%M %d.%m')} - {df.iloc[-1]['timestamp'].strftime('%H:%M %d.%m')}")
            logger.info(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {df.iloc[-1]['close']:.2f} ‚ÇΩ")
            logger.info(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω: {df['close'].min():.2f} - {df['close'].max():.2f} ‚ÇΩ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
            logger.info("üîç –ü–û–°–õ–ï–î–ù–ò–ï 3 –°–í–ï–ß–ò:")
            for i in range(max(0, len(df) - 3), len(df)):
                row = df.iloc[i]
                logger.info(f"üîç [{i:2d}] {row['timestamp'].strftime('%H:%M %d.%m')} "
                           f"O:{row['open']:6.2f} H:{row['high']:6.2f} L:{row['low']:6.2f} C:{row['close']:6.2f} "
                           f"V:{row['volume']:,}")
        
        return df
    
    def _quotation_to_float(self, quotation) -> float:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Quotation –≤ float"""
        try:
            if quotation is None:
                logger.warning("üîç Quotation is None")
                return 0.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ units –∏ nano
            if hasattr(quotation, 'units') and hasattr(quotation, 'nano'):
                units = quotation.units
                nano = quotation.nano
                
                # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: units + nano/10^9
                result = float(units) + float(nano) / 1_000_000_000
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π
                if 0.01 <= result <= 100_000:  # –æ—Ç –∫–æ–ø–µ–π–∫–∏ –¥–æ 100–∫ —Ä—É–±–ª–µ–π
                    return result
                else:
                    logger.warning(f"üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞: units={units}, nano={nano}, result={result}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–∞–≤–Ω–æ, –º–æ–∂–µ—Ç —ç—Ç–æ –≤–∞–ª—é—Ç–Ω–∞—è —Ü–µ–Ω–∞
                    return result
            else:
                # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ float –Ω–∞–ø—Ä—è–º—É—é
                logger.warning(f"üîç Quotation –±–µ–∑ units/nano: {type(quotation)}, value={quotation}")
                try:
                    return float(quotation) if quotation else 0.0
                except (ValueError, TypeError):
                    logger.error(f"üîç –ù–µ –º–æ–≥—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float: {quotation}")
                    return 0.0
                
        except (AttributeError, TypeError, ValueError) as e:
            logger.warning(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è quotation: {e}")
            logger.warning(f"üîç –¢–∏–ø quotation: {type(quotation)}")
            logger.warning(f"üîç –ó–Ω–∞—á–µ–Ω–∏–µ: {quotation}")
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            try:
                return float(quotation) if quotation else 0.0
            except:
                return 0.0
    
    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    @staticmethod
    def quotation_to_decimal(quotation) -> float:
        """–£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _quotation_to_float"""
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ quotation_to_decimal")
        provider = TinkoffDataProvider("dummy")
        return provider._quotation_to_float(quotation)
    
    async def get_current_price(self, figi: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞"""
        try:
            logger.info(f"üí∞ –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {figi}")
            candles = await self.get_candles_for_ticker(figi, hours=3)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞
            
            if candles:
                df = self.candles_to_dataframe(candles)
                if not df.empty:
                    current_price = float(df.iloc[-1]['close'])
                    logger.info(f"‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {figi}: {current_price:.2f} ‚ÇΩ")
                    return current_price
            
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {figi}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {figi}: {e}")
            return None
    
    async def get_multiple_candles(self, tickers_figi: List[str], hours: int = 100) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        results = {}
        
        for figi in tickers_figi:
            try:
                logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {figi}")
                candles = await self.get_candles_for_ticker(figi, hours)
                results[figi] = candles
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.3)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {figi}: {e}")
                results[figi] = []
        
        return results
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API...")
            
            with Client(self.token) as client:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
                accounts = client.users.get_accounts()
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts.accounts)}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ SBER
                test_candles = await self.get_candles_for_ticker("BBG004730N88", hours=5)
                logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_candles)} —Å–≤–µ—á–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                if test_candles:
                    df = self.candles_to_dataframe(test_candles)
                    logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π DataFrame: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tinkoff API: {e}")
            return False
    
    async def get_ticker_info(self, figi: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–µ —á–µ—Ä–µ–∑ API"""
        try:
            with Client(self.token) as client:
                response = client.instruments.share_by(
                    id_type=1,  # –ü–æ FIGI
                    class_code="",
                    id=figi
                )
                
                if response.instrument:
                    instrument = response.instrument
                    return {
                        'figi': instrument.figi,
                        'ticker': instrument.ticker,
                        'name': instrument.name,
                        'currency': instrument.currency,
                        'lot': instrument.lot,
                        'trading_status': instrument.trading_status.name if hasattr(instrument.trading_status, 'name') else str(instrument.trading_status)
                    }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–µ {figi}: {e}")
        
        return None
    
    async def validate_figis(self, figis: List[str]) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ FIGI –∫–æ–¥–æ–≤"""
        results = {}
        
        for figi in figis:
            ticker_info = await self.get_ticker_info(figi)
            results[figi] = {
                'valid': ticker_info is not None,
                'info': ticker_info
            }
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        
        return results
