import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional
import pandas as pd
import pytz
from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
from tinkoff.invest.utils import now

logger = logging.getLogger(__name__)

class TinkoffDataProvider:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π data_provider —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, token: str):
        self.token = token
        self._client = None
        # –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
        self.moscow_tz = pytz.timezone('Europe/Moscow')
    
    async def get_candles_for_ticker(self, figi: str, hours: int = 100) -> List[HistoricCandle]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        max_retries = 3
        retry_delay = 2
        
        for attempt in range(max_retries):
            try:
                with Client(self.token) as client:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    to_time = now()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC
                    from_time = to_time - timedelta(hours=hours)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
                    moscow_from = from_time.astimezone(self.moscow_tz)
                    moscow_to = to_time.astimezone(self.moscow_tz)
                    
                    logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö {figi} –∑–∞ {hours}—á (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    logger.info(f"üïê –ü–µ—Ä–∏–æ–¥ –ú–°–ö: {moscow_from.strftime('%d.%m %H:%M')} - {moscow_to.strftime('%d.%m %H:%M')}")
                    
                    response = client.market_data.get_candles(
                        figi=figi,
                        from_=from_time,
                        to=to_time,
                        interval=CandleInterval.CANDLE_INTERVAL_HOUR
                    )
                    
                    if response.candles:
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(response.candles)} —Å–≤–µ—á–µ–π –¥–ª—è {figi}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                        if response.candles:
                            first_candle_moscow = response.candles[0].time.astimezone(self.moscow_tz)
                            last_candle_moscow = response.candles[-1].time.astimezone(self.moscow_tz)
                            logger.info(f"üìÖ –°–≤–µ—á–∏ –ú–°–ö: {first_candle_moscow.strftime('%d.%m %H:%M')} - {last_candle_moscow.strftime('%d.%m %H:%M')}")
                        
                        return response.candles
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è {figi}")
                        return []
                        
            except RequestError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API Tinkoff –¥–ª—è {figi} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2
                else:
                    logger.error(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {figi}")
                    raise
            except Exception as e:
                logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {figi}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                else:
                    raise
        
        return []
    
    def candles_to_dataframe(self, candles: List[HistoricCandle]) -> pd.DataFrame:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ DataFrame —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not candles:
            logger.warning("üìä –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π")
            return pd.DataFrame()
        
        data = []
        valid_candles = 0
        
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(candles)} —Å–≤–µ—á–µ–π...")
        
        for i, candle in enumerate(candles):
            try:
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Quotation –≤ float
                open_price = self._quotation_to_float(candle.open)
                high_price = self._quotation_to_float(candle.high)
                low_price = self._quotation_to_float(candle.low)
                close_price = self._quotation_to_float(candle.close)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω
                if all(price > 0 for price in [open_price, high_price, low_price, close_price]):
                    if low_price <= open_price <= high_price and low_price <= close_price <= high_price:
                        data.append({
                            'timestamp': candle.time,
                            'open': open_price,
                            'high': high_price,
                            'low': low_price,
                            'close': close_price,
                            'volume': candle.volume
                        })
                        valid_candles += 1
                    else:
                        logger.warning(f"üîç –°–≤–µ—á–∞ {i}: –Ω–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ü–µ–Ω O:{open_price:.2f} H:{high_price:.2f} L:{low_price:.2f} C:{close_price:.2f}")
                else:
                    logger.warning(f"üîç –°–≤–µ—á–∞ {i}: –Ω—É–ª–µ–≤—ã–µ/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã")
                    
            except Exception as e:
                logger.warning(f"üîç –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏ {i}: {e}")
                continue
        
        if not data:
            logger.error("‚ùå –í—Å–µ —Å–≤–µ—á–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏!")
            return pd.DataFrame()
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {valid_candles}/{len(candles)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime —Å UTC
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df = df.sort_values('timestamp').reset_index(drop=True)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        original_len = len(df)
        df = df.drop_duplicates(subset=['timestamp'], keep='last').reset_index(drop=True)
        
        if len(df) < original_len:
            logger.info(f"üîÑ –£–¥–∞–ª–µ–Ω–æ {original_len - len(df)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        if not df.empty:
            first_moscow = df.iloc[0]['timestamp'].astimezone(self.moscow_tz)
            last_moscow = df.iloc[-1]['timestamp'].astimezone(self.moscow_tz)
            current_moscow = datetime.now(self.moscow_tz)
            
            logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π DataFrame: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –ú–°–ö: {first_moscow.strftime('%d.%m %H:%M')} - {last_moscow.strftime('%d.%m %H:%M')}")
            logger.info(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {current_moscow.strftime('%d.%m %H:%M')}")
            logger.info(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {df.iloc[-1]['close']:.2f} ‚ÇΩ")
            logger.info(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω: {df['close'].min():.2f} - {df['close'].max():.2f} ‚ÇΩ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            time_diff = (current_moscow.replace(tzinfo=None) - last_moscow.replace(tzinfo=None)).total_seconds() / 3600
            
            if time_diff > 2:
                logger.warning(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –Ω–∞ {time_diff:.1f} —á–∞—Å–æ–≤!")
                logger.warning(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {last_moscow.strftime('%d.%m %H:%M')} –ú–°–ö")
                logger.warning(f"   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_moscow.strftime('%d.%m %H:%M')} –ú–°–ö")
            else:
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ (–∑–∞–¥–µ—Ä–∂–∫–∞ {time_diff:.1f}—á)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            logger.info("üîç –ü–û–°–õ–ï–î–ù–ò–ï 3 –°–í–ï–ß–ò (–ú–°–ö):")
            for i in range(max(0, len(df) - 3), len(df)):
                row = df.iloc[i]
                moscow_time = row['timestamp'].astimezone(self.moscow_tz)
                logger.info(f"üîç [{i:2d}] {moscow_time.strftime('%d.%m %H:%M')} "
                           f"O:{row['open']:6.2f} H:{row['high']:6.2f} L:{row['low']:6.2f} C:{row['close']:6.2f} "
                           f"V:{row['volume']:,}")
        
        return df
    
    def _quotation_to_float(self, quotation) -> float:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Quotation –≤ float"""
        try:
            if quotation is None:
                return 0.0
            
            if hasattr(quotation, 'units') and hasattr(quotation, 'nano'):
                result = float(quotation.units) + float(quotation.nano) / 1_000_000_000
                
                if 0.01 <= result <= 100_000:
                    return result
                else:
                    logger.warning(f"üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {result}")
                    return result
            else:
                try:
                    return float(quotation) if quotation else 0.0
                except (ValueError, TypeError):
                    logger.error(f"üîç –ù–µ –º–æ–≥—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float: {quotation}")
                    return 0.0
                
        except Exception as e:
            logger.warning(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è quotation: {e}")
            try:
                return float(quotation) if quotation else 0.0
            except:
                return 0.0
    
    async def get_current_price(self, figi: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            logger.info(f"üí∞ –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {figi}")
            candles = await self.get_candles_for_ticker(figi, hours=3)
            
            if candles:
                df = self.candles_to_dataframe(candles)
                if not df.empty:
                    current_price = float(df.iloc[-1]['close'])
                    logger.info(f"‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {figi}: {current_price:.2f} ‚ÇΩ")
                    return current_price
            
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {figi}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {figi}: {e}")
            return None
    
    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def get_candles(self, hours: int = 100) -> List[HistoricCandle]:
        """–£–°–¢–ê–†–ï–í–®–ò–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SBER"""
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ get_candles()")
        return await self.get_candles_for_ticker("BBG004730N88", hours)
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API...")
            
            with Client(self.token) as client:
                accounts = client.users.get_accounts()
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts.accounts)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
                current_time_utc = now()
                current_time_moscow = current_time_utc.astimezone(self.moscow_tz)
                logger.info(f"üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ Tinkoff (–ú–°–ö): {current_time_moscow.strftime('%d.%m.%Y %H:%M:%S')}")
                
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                test_candles = await self.get_candles_for_ticker("BBG004730N88", hours=5)
                logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_candles)} —Å–≤–µ—á–µ–π")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tinkoff API: {e}")
            return False
    
    async def get_ticker_info(self, figi: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–µ"""
        try:
            with Client(self.token) as client:
                response = client.instruments.share_by(
                    id_type=1,
                    class_code="",
                    id=figi
                )
                
                if response.instrument:
                    instrument = response.instrument
                    return {
                        'figi': instrument.figi,
                        'ticker': instrument.ticker,
                        'name': instrument.name,
                        'currency': instrument.currency,
                        'lot': instrument.lot,
                        'trading_status': instrument.trading_status.name if hasattr(instrument.trading_status, 'name') else str(instrument.trading_status)
                    }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–µ {figi}: {e}")
        
        return None
