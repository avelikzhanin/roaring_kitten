import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional
import pandas as pd
from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
from tinkoff.invest.utils import now

logger = logging.getLogger(__name__)

class TinkoffDataProvider:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Tinkoff Invest API"""
    
    def __init__(self, token: str):
        self.token = token
        self._client = None
    
    async def get_candles(self, hours: int = 100) -> List[HistoricCandle]:
        """–£–°–¢–ê–†–ï–í–®–ò–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SBER (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ get_candles(). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_candles_for_ticker()")
        return await self.get_candles_for_ticker("BBG004730N88", hours)  # SBER FIGI
    
    async def get_candles_for_ticker(self, figi: str, hours: int = 100) -> List[HistoricCandle]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –ø–æ FIGI"""
        max_retries = 3
        retry_delay = 5
        
        for attempt in range(max_retries):
            try:
                with Client(self.token) as client:
                    to_time = now()
                    from_time = to_time - timedelta(hours=hours)
                    
                    logger.info(f"üìä –ó–∞–ø—Ä–æ—Å {hours}—á –¥–∞–Ω–Ω—ã—Ö {figi}")
                    
                    response = client.market_data.get_candles(
                        figi=figi,
                        from_=from_time,
                        to=to_time,
                        interval=CandleInterval.CANDLE_INTERVAL_HOUR
                    )
                    
                    if response.candles:
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(response.candles)} —Å–≤–µ—á–µ–π")
                        return response.candles
                    else:
                        logger.warning(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è {figi}")
                        return []
                        
            except RequestError as e:
                logger.error(f"–û—à–∏–±–∫–∞ API Tinkoff –¥–ª—è {figi} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2
                else:
                    raise
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {figi}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                else:
                    raise
        
        return []
    
    async def get_multiple_candles(self, tickers_figi: List[str], hours: int = 100) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        results = {}
        
        for figi in tickers_figi:
            try:
                candles = await self.get_candles_for_ticker(figi, hours)
                results[figi] = candles
                await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {figi}: {e}")
                results[figi] = []
        
        return results
    
    def candles_to_dataframe(self, candles: List[HistoricCandle]) -> pd.DataFrame:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ DataFrame"""
        if not candles:
            return pd.DataFrame()
        
        data = []
        for candle in candles:
            try:
                data.append({
                    'timestamp': candle.time,
                    'open': self.quotation_to_decimal(candle.open),
                    'high': self.quotation_to_decimal(candle.high),
                    'low': self.quotation_to_decimal(candle.low),
                    'close': self.quotation_to_decimal(candle.close),
                    'volume': candle.volume
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏: {e}")
                continue
        
        if not data:
            return pd.DataFrame()
        
        df = pd.DataFrame(data)
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        df = df.sort_values('timestamp').reset_index(drop=True)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        df = df.drop_duplicates(subset=['timestamp'], keep='last')
        
        return df
    
    async def get_current_price(self, figi: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞"""
        try:
            candles = await self.get_candles_for_ticker(figi, hours=2)
            if candles:
                df = self.candles_to_dataframe(candles)
                if not df.empty:
                    return float(df.iloc[-1]['close'])
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {figi}: {e}")
            return None
    
    async def get_ticker_info(self, figi: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–µ —á–µ—Ä–µ–∑ API"""
        try:
            with Client(self.token) as client:
                response = client.instruments.share_by(
                    id_type=1,  # –ü–æ FIGI
                    class_code="",
                    id=figi
                )
                
                if response.instrument:
                    instrument = response.instrument
                    return {
                        'figi': instrument.figi,
                        'ticker': instrument.ticker,
                        'name': instrument.name,
                        'currency': instrument.currency,
                        'lot': instrument.lot,
                        'trading_status': instrument.trading_status
                    }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–µ {figi}: {e}")
        
        return None
    
    @staticmethod
    def quotation_to_decimal(quotation) -> float:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ quotation –≤ decimal"""
        try:
            return float(quotation.units + quotation.nano / 1e9)
        except (AttributeError, TypeError):
            return 0.0
    
    async def validate_figis(self, figis: List[str]) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ FIGI –∫–æ–¥–æ–≤"""
        results = {}
        
        for figi in figis:
            ticker_info = await self.get_ticker_info(figi)
            results[figi] = {
                'valid': ticker_info is not None,
                'info': ticker_info
            }
        
        return results
    
    async def get_market_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞"""
        try:
            with Client(self.token) as client:
                response = client.instruments.trading_schedules(
                    exchange="MOEX",
                    from_=now() - timedelta(days=1),
                    to=now() + timedelta(days=1)
                )
                
                market_status = {
                    'is_open': False,
                    'next_open': None,
                    'next_close': None
                }
                
                if response.exchanges:
                    for exchange in response.exchanges:
                        if exchange.days:
                            today = exchange.days[0]
                            current_time = now()
                            
                            if today.start_time <= current_time <= today.end_time:
                                market_status['is_open'] = True
                            
                            market_status['next_open'] = today.start_time
                            market_status['next_close'] = today.end_time
                
                return market_status
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞: {e}")
            return {'is_open': None, 'next_open': None, 'next_close': None}
