import numpy as np
import pandas as pd
from typing import List, Dict
import logging

logger = logging.getLogger(__name__)

class TechnicalIndicators:
    """–ö–ª–∞—Å—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è Railway - —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç, –±–µ–∑ TA-Lib"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        """–†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç EMA (–¥–ª—è Railway –±–µ–∑ TA-Lib)"""
        if len(prices) < period:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA{period}: {len(prices)} < {period}")
            return [np.nan] * len(prices)
        
        try:
            result = [np.nan] * len(prices)
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            multiplier = 2.0 / (period + 1)
            
            # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA = SMA
            sma = np.mean(prices[:period])
            result[period - 1] = sma
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for i in range(period, len(prices)):
                ema = (prices[i] * multiplier) + (result[i - 1] * (1 - multiplier))
                result[i] = ema
            
            current_ema = result[-1] if not pd.isna(result[-1]) else None
            logger.info(f"üìà EMA{period}: {current_ema:.2f}" if current_ema else f"üìà EMA{period}: NaN")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA{period}: {e}")
            return [np.nan] * len(prices)
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç ADX –¥–ª—è Railway"""
        
        if len(highs) < period * 2:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ADX: {len(highs)} < {period * 2}")
            return {
                'adx': [np.nan] * len(highs),
                'plus_di': [np.nan] * len(highs),
                'minus_di': [np.nan] * len(highs)
            }
        
        try:
            n = len(highs)
            
            # 1. –†–∞—Å—á–µ—Ç True Range
            tr_values = [0.0] * n
            for i in range(1, n):
                tr1 = highs[i] - lows[i]
                tr2 = abs(highs[i] - closes[i-1])
                tr3 = abs(lows[i] - closes[i-1])
                tr_values[i] = max(tr1, tr2, tr3)
            
            # 2. –†–∞—Å—á–µ—Ç Directional Movement
            plus_dm = [0.0] * n
            minus_dm = [0.0] * n
            
            for i in range(1, n):
                high_diff = highs[i] - highs[i-1]
                low_diff = lows[i-1] - lows[i]
                
                if high_diff > low_diff and high_diff > 0:
                    plus_dm[i] = high_diff
                else:
                    plus_dm[i] = 0.0
                
                if low_diff > high_diff and low_diff > 0:
                    minus_dm[i] = low_diff
                else:
                    minus_dm[i] = 0.0
            
            # 3. –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Wilder)
            smoothed_tr = TechnicalIndicators._simple_smooth(tr_values, period)
            smoothed_plus_dm = TechnicalIndicators._simple_smooth(plus_dm, period)
            smoothed_minus_dm = TechnicalIndicators._simple_smooth(minus_dm, period)
            
            # 4. –†–∞—Å—á–µ—Ç DI
            plus_di = [np.nan] * n
            minus_di = [np.nan] * n
            
            for i in range(period, n):
                if smoothed_tr[i] > 0:
                    plus_di[i] = 100.0 * smoothed_plus_dm[i] / smoothed_tr[i]
                    minus_di[i] = 100.0 * smoothed_minus_dm[i] / smoothed_tr[i]
                else:
                    plus_di[i] = 0.0
                    minus_di[i] = 0.0
            
            # 5. –†–∞—Å—á–µ—Ç DX
            dx_values = [np.nan] * n
            
            for i in range(period, n):
                if not pd.isna(plus_di[i]) and not pd.isna(minus_di[i]):
                    di_sum = plus_di[i] + minus_di[i]
                    if di_sum > 0:
                        dx_values[i] = 100.0 * abs(plus_di[i] - minus_di[i]) / di_sum
                    else:
                        dx_values[i] = 0.0
            
            # 6. ADX = –ø—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ç DX
            adx_values = TechnicalIndicators._simple_smooth(dx_values, period)
            
            result = {
                'adx': adx_values,
                'plus_di': plus_di,
                'minus_di': minus_di
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            current_adx = result['adx'][-1] if not pd.isna(result['adx'][-1]) else None
            current_plus_di = result['plus_di'][-1] if not pd.isna(result['plus_di'][-1]) else None
            current_minus_di = result['minus_di'][-1] if not pd.isna(result['minus_di'][-1]) else None
            
            if current_adx and current_plus_di and current_minus_di:
                logger.info(f"üìä ADX: {current_adx:.1f} | +DI: {current_plus_di:.1f} | -DI: {current_minus_di:.1f}")
            else:
                logger.warning("üìä ADX –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç NaN")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ADX: {e}")
            import traceback
            traceback.print_exc()
            return {
                'adx': [np.nan] * len(highs),
                'plus_di': [np.nan] * len(highs),
                'minus_di': [np.nan] * len(highs)
            }
    
    @staticmethod
    def _simple_smooth(values: List[float], period: int) -> List[float]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è Railway"""
        result = [np.nan] * len(values)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–∞
        start_idx = period - 1
        
        # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –ø—Ä–æ—Å—Ç–∞—è —Å—Ä–µ–¥–Ω—è—è
        if start_idx < len(values):
            window_values = []
            for i in range(max(0, start_idx - period + 1), start_idx + 1):
                if not pd.isna(values[i]) and values[i] != 0:
                    window_values.append(values[i])
            
            if len(window_values) > 0:
                result[start_idx] = sum(window_values) / len(window_values)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        alpha = 2.0 / (period + 1)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        
        for i in range(start_idx + 1, len(values)):
            if not pd.isna(result[i-1]) and not pd.isna(values[i]):
                result[i] = alpha * values[i] + (1 - alpha) * result[i-1]
        
        return result
    
    @staticmethod
    def validate_data(highs: List[float], lows: List[float], closes: List[float]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º"""
        if not (len(highs) == len(lows) == len(closes)):
            logger.error(f"‚ùå –†–∞–∑–ª–∏—á–Ω–∞—è –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–æ–≤: H:{len(highs)} L:{len(lows)} C:{len(closes)}")
            return False
        
        if len(highs) < 30:
            logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: {len(highs)} < 30")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω
        invalid_count = 0
        for i in range(len(highs)):
            h, l, c = highs[i], lows[i], closes[i]
            if not (l <= c <= h and l <= h and l > 0):
                invalid_count += 1
                if invalid_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                    logger.warning(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å {i}: H:{h:.2f} L:{l:.2f} C:{c:.2f}")
        
        valid_ratio = (len(highs) - invalid_count) / len(highs)
        
        if valid_ratio < 0.8:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 80% –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {invalid_count}/{len(highs)} ({valid_ratio:.1%})")
            return False
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã: {len(highs)} —Å–≤–µ—á–µ–π, {invalid_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ({valid_ratio:.1%})")
        return True
    
    @staticmethod
    def debug_data(highs: List[float], lows: List[float], closes: List[float], count: int = 5):
        """–û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê –ü–û–°–õ–ï–î–ù–ò–• {count} –°–í–ï–ß–ï–ô:")
        start_idx = max(0, len(closes) - count)
        
        for i in range(start_idx, len(closes)):
            logger.info(f"üîç [{i:2d}] H:{highs[i]:7.2f} L:{lows[i]:7.2f} C:{closes[i]:7.2f}")
    
    @staticmethod
    def calculate_simple_trend(prices: List[float], short_period: int = 5, long_period: int = 20) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if len(prices) < long_period:
            return "insufficient_data"
        
        try:
            # –ö–æ—Ä–æ—Ç–∫–∞—è –∏ –¥–ª–∏–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω–∏–µ
            short_sma = np.mean(prices[-short_period:])
            long_sma = np.mean(prices[-long_period:])
            current_price = prices[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            if current_price > short_sma > long_sma:
                return "strong_uptrend"
            elif current_price > short_sma and short_sma > long_sma * 1.001:  # –ù–µ–±–æ–ª—å—à–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                return "uptrend"
            elif current_price < short_sma < long_sma:
                return "strong_downtrend"
            elif current_price < short_sma and short_sma < long_sma * 0.999:
                return "downtrend"
            else:
                return "sideways"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return "error"
