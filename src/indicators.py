import numpy as np
import pandas as pd
from typing import List, Dict
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TA-Lib (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
try:
    import talib
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ TA-Lib –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    logger = logging.getLogger(__name__)
    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TA-Lib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! {e}")
    logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TA-Lib: pip install TA-Lib")
    raise ImportError("TA-Lib –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

class TechnicalIndicators:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ TA-Lib (–¢–û–õ–¨–ö–û TA-Lib)"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        """–†–∞—Å—á–µ—Ç EMA —á–µ—Ä–µ–∑ TA-Lib"""
        if len(prices) < period:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA{period}: {len(prices)} < {period}")
            return [np.nan] * len(prices)
        
        try:
            logger.info(f"üìà –†–∞—Å—á–µ—Ç EMA{period} —á–µ—Ä–µ–∑ TA-Lib...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            prices_array = np.array(prices, dtype=float)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ TA-Lib
            ema = talib.EMA(prices_array, timeperiod=period)
            result = ema.tolist()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            current_ema = result[-1] if not pd.isna(result[-1]) else np.nan
            logger.info(f"   ‚úÖ EMA{period} —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = {current_ema:.2f}")
            logger.info(f"   üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è: {[round(x, 2) if not pd.isna(x) else 'NaN' for x in result[-3:]]}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA{period} —á–µ—Ä–µ–∑ TA-Lib: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å EMA{period}: {e}")
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        """–†–∞—Å—á–µ—Ç ADX, +DI, -DI –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ TA-Lib"""
        
        if len(highs) < period * 2:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ADX{period}: {len(highs)} < {period * 2}")
            return {
                'adx': [np.nan] * len(highs), 
                'plus_di': [np.nan] * len(highs), 
                'minus_di': [np.nan] * len(highs)
            }
        
        try:
            logger.info(f"üìä –†–∞—Å—á–µ—Ç ADX{period} —á–µ—Ä–µ–∑ TA-Lib –¥–ª—è {len(highs)} —Å–≤–µ—á–µ–π...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy arrays
            high_array = np.array(highs, dtype=float)
            low_array = np.array(lows, dtype=float)
            close_array = np.array(closes, dtype=float)
            
            logger.info(f"   üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:")
            logger.info(f"      –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {len(high_array)}")
            logger.info(f"      –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã: H={high_array[-1]:.2f}, L={low_array[-1]:.2f}, C={close_array[-1]:.2f}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ TA-Lib
            logger.info(f"   üßÆ –í—ã–∑—ã–≤–∞–µ–º TA-Lib —Ñ—É–Ω–∫—Ü–∏–∏...")
            
            adx = talib.ADX(high_array, low_array, close_array, timeperiod=period)
            plus_di = talib.PLUS_DI(high_array, low_array, close_array, timeperiod=period)
            minus_di = talib.MINUS_DI(high_array, low_array, close_array, timeperiod=period)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–∫–∏
            adx_values = adx.tolist()
            plus_di_values = plus_di.tolist()
            minus_di_values = minus_di.tolist()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_adx = adx_values[-1] if not pd.isna(adx_values[-1]) else np.nan
            current_plus_di = plus_di_values[-1] if not pd.isna(plus_di_values[-1]) else np.nan
            current_minus_di = minus_di_values[-1] if not pd.isna(minus_di_values[-1]) else np.nan
            current_di_diff = current_plus_di - current_minus_di
            
            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.info(f"")
            logger.info(f"üéØ TA-LIB ADX –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            logger.info(f"   üìä ADX: {current_adx:.1f}")
            logger.info(f"   üìà +DI: {current_plus_di:.1f}")
            logger.info(f"   üìâ -DI: {current_minus_di:.1f}")
            logger.info(f"   üîÑ –†–∞–∑–Ω–∏—Ü–∞ DI: {current_di_diff:.1f}")
            logger.info(f"   üí™ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {'–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô' if current_adx > 45 else '–°–ò–õ–¨–ù–´–ô' if current_adx > 25 else '–°–õ–ê–ë–´–ô'}")
            logger.info(f"   üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–í–í–ï–†–•' if current_plus_di > current_minus_di else '–í–ù–ò–ó'}")
            logger.info(f"")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            nan_adx = sum(1 for x in adx_values[-10:] if pd.isna(x))
            nan_plus_di = sum(1 for x in plus_di_values[-10:] if pd.isna(x))  
            nan_minus_di = sum(1 for x in minus_di_values[-10:] if pd.isna(x))
            
            if nan_adx > 0 or nan_plus_di > 0 or nan_minus_di > 0:
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–µ—Ä–∏–æ–¥–∞—Ö:")
                logger.warning(f"   ADX NaN: {nan_adx}/10, +DI NaN: {nan_plus_di}/10, -DI NaN: {nan_minus_di}/10")
            else:
                logger.info(f"‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–µ—Ç NaN –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–µ—Ä–∏–æ–¥–∞—Ö)")
            
            return {
                'adx': adx_values,
                'plus_di': plus_di_values,
                'minus_di': minus_di_values
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê TA-Lib ADX: {e}")
            logger.error(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: highs={len(highs)}, lows={len(lows)}, closes={len(closes)}, period={period}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ADX —á–µ—Ä–µ–∑ TA-Lib: {e}")
    
    @staticmethod
    def calculate_rsi(closes: List[float], period: int = 14) -> List[float]:
        """–†–∞—Å—á–µ—Ç RSI —á–µ—Ä–µ–∑ TA-Lib"""
        if len(closes) < period + 1:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI{period}: {len(closes)} < {period + 1}")
            return [np.nan] * len(closes)
        
        try:
            logger.info(f"üìä –†–∞—Å—á–µ—Ç RSI{period} —á–µ—Ä–µ–∑ TA-Lib...")
            
            close_array = np.array(closes, dtype=float)
            rsi = talib.RSI(close_array, timeperiod=period)
            result = rsi.tolist()
            
            current_rsi = result[-1] if not pd.isna(result[-1]) else np.nan
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è RSI
            if current_rsi > 70:
                rsi_status = "–ü–ï–†–ï–ö–£–ü–õ–ï–ù"
            elif current_rsi < 30:
                rsi_status = "–ü–ï–†–ï–ü–†–û–î–ê–ù"
            else:
                rsi_status = "–ù–ï–ô–¢–†–ê–õ–¨–ù–ê–Ø –ó–û–ù–ê"
            
            logger.info(f"   ‚úÖ RSI{period}: {current_rsi:.1f} ({rsi_status})")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI{period} —á–µ—Ä–µ–∑ TA-Lib: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å RSI{period}: {e}")
    
    @staticmethod
    def calculate_macd(closes: List[float], fast_period: int = 12, slow_period: int = 26, signal_period: int = 9) -> Dict:
        """–†–∞—Å—á–µ—Ç MACD —á–µ—Ä–µ–∑ TA-Lib"""
        if len(closes) < slow_period + signal_period:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MACD: {len(closes)} < {slow_period + signal_period}")
            return {
                'macd': [np.nan] * len(closes),
                'signal': [np.nan] * len(closes), 
                'histogram': [np.nan] * len(closes)
            }
        
        try:
            logger.info(f"üìä –†–∞—Å—á–µ—Ç MACD({fast_period},{slow_period},{signal_period}) —á–µ—Ä–µ–∑ TA-Lib...")
            
            close_array = np.array(closes, dtype=float)
            macd, signal, histogram = talib.MACD(close_array, 
                                               fastperiod=fast_period,
                                               slowperiod=slow_period, 
                                               signalperiod=signal_period)
            
            current_macd = macd[-1] if not pd.isna(macd[-1]) else np.nan
            current_signal = signal[-1] if not pd.isna(signal[-1]) else np.nan
            current_histogram = histogram[-1] if not pd.isna(histogram[-1]) else np.nan
            
            logger.info(f"   ‚úÖ MACD: {current_macd:.2f}, Signal: {current_signal:.2f}, Histogram: {current_histogram:.2f}")
            
            return {
                'macd': macd.tolist(),
                'signal': signal.tolist(),
                'histogram': histogram.tolist()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ MACD —á–µ—Ä–µ–∑ TA-Lib: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å MACD: {e}")
    
    @staticmethod
    def calculate_bollinger_bands(closes: List[float], period: int = 20, std_dev: float = 2.0) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ TA-Lib"""
        if len(closes) < period:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Bollinger Bands: {len(closes)} < {period}")
            return {
                'upper': [np.nan] * len(closes),
                'middle': [np.nan] * len(closes),
                'lower': [np.nan] * len(closes)
            }
        
        try:
            logger.info(f"üìä –†–∞—Å—á–µ—Ç Bollinger Bands({period}, {std_dev}) —á–µ—Ä–µ–∑ TA-Lib...")
            
            close_array = np.array(closes, dtype=float)
            upper, middle, lower = talib.BBANDS(close_array, 
                                               timeperiod=period,
                                               nbdevup=std_dev, 
                                               nbdevdn=std_dev)
            
            current_upper = upper[-1] if not pd.isna(upper[-1]) else np.nan
            current_middle = middle[-1] if not pd.isna(middle[-1]) else np.nan  
            current_lower = lower[-1] if not pd.isna(lower[-1]) else np.nan
            current_price = closes[-1]
            
            # –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–æ—Å
            if current_price > current_upper:
                bb_position = "–í–´–®–ï –í–ï–†–•–ù–ï–ô –ü–û–õ–û–°–´"
            elif current_price < current_lower:
                bb_position = "–ù–ò–ñ–ï –ù–ò–ñ–ù–ï–ô –ü–û–õ–û–°–´"
            else:
                bb_position = "–í–ù–£–¢–†–ò –ü–û–õ–û–°"
            
            logger.info(f"   ‚úÖ BB: Upper={current_upper:.2f}, Middle={current_middle:.2f}, Lower={current_lower:.2f}")
            logger.info(f"   üìç –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã: {bb_position}")
            
            return {
                'upper': upper.tolist(),
                'middle': middle.tolist(),
                'lower': lower.tolist()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Bollinger Bands —á–µ—Ä–µ–∑ TA-Lib: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å Bollinger Bands: {e}")
    
    @staticmethod
    def find_support_resistance_levels(highs: List[float], lows: List[float], period: int = 20) -> Dict:
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            if len(highs) < period:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Ä–æ–≤–Ω–µ–π: {len(highs)} < {period}")
                return {'support': None, 'resistance': None}
            
            logger.info(f"üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∑–∞ {period} –ø–µ—Ä–∏–æ–¥–æ–≤...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
            recent_highs = highs[-period:]
            recent_lows = lows[-period:]
            current_price = highs[-1]  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
            # –ü—Ä–æ—Å—Ç—ã–µ —É—Ä–æ–≤–Ω–∏
            resistance = max(recent_highs)
            support = min(recent_lows)
            
            # –ë–æ–ª–µ–µ —É–º–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            resistance_levels = []
            support_levels = []
            
            # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
            for i in range(2, len(recent_highs) - 2):
                # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
                if (recent_highs[i] > recent_highs[i-1] and 
                    recent_highs[i] > recent_highs[i-2] and
                    recent_highs[i] > recent_highs[i+1] and 
                    recent_highs[i] > recent_highs[i+2]):
                    resistance_levels.append(recent_highs[i])
                
                # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
                if (recent_lows[i] < recent_lows[i-1] and 
                    recent_lows[i] < recent_lows[i-2] and
                    recent_lows[i] < recent_lows[i+1] and 
                    recent_lows[i] < recent_lows[i+2]):
                    support_levels.append(recent_lows[i])
            
            # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–Ω–∞—á–∏–º—ã–µ —É—Ä–æ–≤–Ω–∏
            if resistance_levels:
                # –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                resistance_above = [r for r in resistance_levels if r > current_price]
                if resistance_above:
                    resistance = min(resistance_above)
                else:
                    resistance = max(resistance_levels)
            
            if support_levels:
                # –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                support_below = [s for s in support_levels if s < current_price]
                if support_below:
                    support = max(support_below)
                else:
                    support = min(support_levels)
            
            logger.info(f"   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {support:.2f}, –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {resistance:.2f}")
            
            return {
                'support': round(support, 2),
                'resistance': round(resistance, 2)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {'support': None, 'resistance': None}
