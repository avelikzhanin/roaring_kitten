import numpy as np
import pandas as pd
from typing import List, Dict
import logging

logger = logging.getLogger(__name__)

class TechnicalIndicators:
    """–ö–ª–∞—Å—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º ADX"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        """–ù–∞–¥–µ–∂–Ω—ã–π —Ä–∞—Å—á–µ—Ç EMA"""
        if len(prices) < period:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA{period}: {len(prices)} < {period}")
            return [np.nan] * len(prices)
        
        try:
            result = [np.nan] * len(prices)
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            multiplier = 2.0 / (period + 1)
            
            # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA = SMA
            sma = np.mean(prices[:period])
            result[period - 1] = sma
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for i in range(period, len(prices)):
                ema = (prices[i] * multiplier) + (result[i - 1] * (1 - multiplier))
                result[i] = ema
            
            current_ema = result[-1] if not pd.isna(result[-1]) else None
            logger.info(f"üìà EMA{period}: {current_ema:.2f}" if current_ema else f"üìà EMA{period}: NaN")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA{period}: {e}")
            return [np.nan] * len(prices)
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç ADX —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        
        if len(highs) < period * 2:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ADX: {len(highs)} < {period * 2}")
            return {
                'adx': [np.nan] * len(highs),
                'plus_di': [np.nan] * len(highs),
                'minus_di': [np.nan] * len(highs)
            }
        
        try:
            logger.info(f"üî¢ –†–∞—Å—á–µ—Ç ADX –¥–ª—è {len(highs)} —Å–≤–µ—á–µ–π, period={period}")
            
            n = len(highs)
            
            # 1. –†–∞—Å—á–µ—Ç True Range
            tr_values = [0.0] * n
            for i in range(1, n):
                tr1 = highs[i] - lows[i]
                tr2 = abs(highs[i] - closes[i-1]) if i > 0 else 0
                tr3 = abs(lows[i] - closes[i-1]) if i > 0 else 0
                tr_values[i] = max(tr1, tr2, tr3)
            
            # 2. –†–∞—Å—á–µ—Ç Directional Movement
            plus_dm = [0.0] * n
            minus_dm = [0.0] * n
            
            for i in range(1, n):
                high_diff = highs[i] - highs[i-1]
                low_diff = lows[i-1] - lows[i]
                
                if high_diff > low_diff and high_diff > 0:
                    plus_dm[i] = high_diff
                else:
                    plus_dm[i] = 0.0
                
                if low_diff > high_diff and low_diff > 0:
                    minus_dm[i] = low_diff
                else:
                    minus_dm[i] = 0.0
            
            # 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            smoothed_tr = TechnicalIndicators._robust_smooth(tr_values, period)
            smoothed_plus_dm = TechnicalIndicators._robust_smooth(plus_dm, period)
            smoothed_minus_dm = TechnicalIndicators._robust_smooth(minus_dm, period)
            
            # 4. –†–∞—Å—á–µ—Ç DI —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            plus_di = [np.nan] * n
            minus_di = [np.nan] * n
            
            for i in range(period, n):
                if smoothed_tr[i] > 0.001:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª—ã–µ —á–∏—Å–ª–∞
                    plus_di[i] = 100.0 * smoothed_plus_dm[i] / smoothed_tr[i]
                    minus_di[i] = 100.0 * smoothed_minus_dm[i] / smoothed_tr[i]
                else:
                    plus_di[i] = 0.0
                    minus_di[i] = 0.0
            
            # 5. –†–∞—Å—á–µ—Ç DX —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–æ–π
            dx_values = [np.nan] * n
            
            for i in range(period, n):
                if not pd.isna(plus_di[i]) and not pd.isna(minus_di[i]):
                    di_sum = plus_di[i] + minus_di[i]
                    if di_sum > 0.1:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª—ã–µ —Å—É–º–º—ã
                        dx_values[i] = 100.0 * abs(plus_di[i] - minus_di[i]) / di_sum
                    else:
                        dx_values[i] = 0.0
            
            # 6. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç ADX - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            adx_values = TechnicalIndicators._robust_smooth(dx_values, period)
            
            # 7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ NaN –≤ –∫–æ–Ω—Ü–µ
            # –ï—Å–ª–∏ ADX –≤—Å–µ –µ—â–µ NaN, –Ω–æ DI –µ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç
            final_adx = []
            for i in range(n):
                if pd.isna(adx_values[i]) and not pd.isna(plus_di[i]) and not pd.isna(minus_di[i]):
                    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è ADX
                    di_sum = plus_di[i] + minus_di[i]
                    if di_sum > 0:
                        simple_adx = 100.0 * abs(plus_di[i] - minus_di[i]) / di_sum
                        final_adx.append(simple_adx)
                    else:
                        final_adx.append(0.0)
                else:
                    final_adx.append(adx_values[i])
            
            result = {
                'adx': final_adx,
                'plus_di': plus_di,
                'minus_di': minus_di
            }
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            current_adx = result['adx'][-1] if not pd.isna(result['adx'][-1]) else None
            current_plus_di = result['plus_di'][-1] if not pd.isna(result['plus_di'][-1]) else None
            current_minus_di = result['minus_di'][-1] if not pd.isna(result['minus_di'][-1]) else None
            
            if current_adx is not None and current_plus_di is not None and current_minus_di is not None:
                logger.info(f"üìä ADX: {current_adx:.1f} | +DI: {current_plus_di:.1f} | -DI: {current_minus_di:.1f}")
            else:
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                logger.warning(f"‚ö†Ô∏è ADX —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–µ–Ω:")
                logger.warning(f"   ADX: {current_adx}")
                logger.warning(f"   +DI: {current_plus_di}")
                logger.warning(f"   -DI: {current_minus_di}")
                logger.warning(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ TR: {smoothed_tr[-3:]}")
                logger.warning(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ DX: {dx_values[-3:]}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ADX: {e}")
            import traceback
            traceback.print_exc()
            return {
                'adx': [np.nan] * len(highs),
                'plus_di': [np.nan] * len(highs),
                'minus_di': [np.nan] * len(highs)
            }
    
    @staticmethod
    def _robust_smooth(values: List[float], period: int) -> List[float]:
        """–£–õ–£–ß–®–ï–ù–ù–û–ï —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NaN"""
        result = [np.nan] * len(values)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        start_idx = period - 1
        
        # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –æ–∫–Ω–æ
        while start_idx < len(values):
            window_values = []
            for i in range(max(0, start_idx - period + 1), start_idx + 1):
                if i < len(values) and not pd.isna(values[i]) and values[i] >= 0:
                    window_values.append(values[i])
            
            if len(window_values) >= period // 2:  # –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π
                result[start_idx] = sum(window_values) / len(window_values)
                break
            
            start_idx += 1
        
        if start_idx >= len(values):
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è")
            return result
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        alpha = 2.0 / (period + 1)
        
        for i in range(start_idx + 1, len(values)):
            if not pd.isna(result[i-1]) and not pd.isna(values[i]) and values[i] >= 0:
                result[i] = alpha * values[i] + (1 - alpha) * result[i-1]
            elif not pd.isna(result[i-1]):
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NaN, –∫–æ–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
                result[i] = result[i-1]
        
        return result
    
    @staticmethod
    def validate_data(highs: List[float], lows: List[float], closes: List[float]) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if not (len(highs) == len(lows) == len(closes)):
            logger.error(f"‚ùå –†–∞–∑–ª–∏—á–Ω–∞—è –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–æ–≤: H:{len(highs)} L:{len(lows)} C:{len(closes)}")
            return False
        
        if len(highs) < 30:
            logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(highs)} < 30")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        invalid_count = 0
        zero_range_count = 0
        
        for i in range(len(highs)):
            h, l, c = highs[i], lows[i], closes[i]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            if not (l <= c <= h and l <= h and l > 0):
                invalid_count += 1
                if invalid_count <= 5:
                    logger.warning(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å {i}: –ª–æ–≥–∏–∫–∞ —Ü–µ–Ω H:{h:.2f} L:{l:.2f} C:{c:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ ADX)
            if abs(h - l) < 0.01:
                zero_range_count += 1
        
        valid_ratio = (len(highs) - invalid_count) / len(highs)
        
        logger.info(f"üìä –í–∞–ª–∏–¥–∞—Ü–∏—è: {len(highs)} —Å–≤–µ—á–µ–π, {invalid_count} –æ—à–∏–±–æ–∫, {zero_range_count} –Ω—É–ª–µ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ ({valid_ratio:.1%} –≤–∞–ª–∏–¥–Ω—ã—Ö)")
        
        return valid_ratio >= 0.8  # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 80% –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    @staticmethod
    def debug_data(highs: List[float], lows: List[float], closes: List[float], count: int = 5):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê –ü–û–°–õ–ï–î–ù–ò–• {count} –°–í–ï–ß–ï–ô:")
        start_idx = max(0, len(closes) - count)
        
        for i in range(start_idx, len(closes)):
            h, l, c = highs[i], lows[i], closes[i]
            range_val = h - l
            logger.info(f"üîç [{i:2d}] H:{h:7.2f} L:{l:7.2f} C:{c:7.2f} Range:{range_val:5.2f}")
    
    @staticmethod
    def calculate_simple_trend(prices: List[float], short_period: int = 5, long_period: int = 20) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞"""
        if len(prices) < long_period:
            return "insufficient_data"
        
        try:
            short_sma = np.mean(prices[-short_period:])
            long_sma = np.mean(prices[-long_period:])
            current_price = prices[-1]
            
            if current_price > short_sma > long_sma:
                return "strong_uptrend"
            elif current_price > short_sma:
                return "uptrend"
            elif current_price < short_sma < long_sma:
                return "strong_downtrend"
            elif current_price < short_sma:
                return "downtrend"
            else:
                return "sideways"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return "error"
    
    @staticmethod
    def test_adx_calculation(test_data: bool = False):
        """–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ ADX"""
        if test_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
            logger.info("üß™ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ ADX —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
            highs = [100 + i * 0.5 + np.random.random() * 2 for i in range(50)]
            lows = [h - 2 - np.random.random() * 2 for h in highs]
            closes = [l + np.random.random() * (h - l) for h, l in zip(highs, lows)]
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            for i in range(len(highs)):
                if closes[i] < lows[i]:
                    closes[i] = lows[i]
                if closes[i] > highs[i]:
                    closes[i] = highs[i]
            
            logger.info(f"üß™ –°–æ–∑–¥–∞–Ω–æ {len(highs)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
            logger.info(f"üß™ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {min(lows):.2f} - {max(highs):.2f}")
            
            result = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            final_adx = result['adx'][-1]
            final_plus_di = result['plus_di'][-1]
            final_minus_di = result['minus_di'][-1]
            
            logger.info(f"üß™ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
            logger.info(f"   ADX: {final_adx:.1f}" if not pd.isna(final_adx) else "   ADX: NaN")
            logger.info(f"   +DI: {final_plus_di:.1f}" if not pd.isna(final_plus_di) else "   +DI: NaN")
            logger.info(f"   -DI: {final_minus_di:.1f}" if not pd.isna(final_minus_di) else "   -DI: NaN")
            
            return not pd.isna(final_adx)
        
        return True
