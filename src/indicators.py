import numpy as np
import pandas as pd
from typing import List, Dict
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TA-Lib
try:
    import talib
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ TA-Lib –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    logger = logging.getLogger(__name__)
    logger.error(f"‚ùå TA-Lib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    raise ImportError("TA-Lib –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

class TechnicalIndicators:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        """–†–∞—Å—á–µ—Ç EMA —á–µ—Ä–µ–∑ TA-Lib"""
        if len(prices) < period:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA{period}")
            return [np.nan] * len(prices)
        
        try:
            prices_array = np.array(prices, dtype=float)
            ema = talib.EMA(prices_array, timeperiod=period)
            result = ema.tolist()
            
            current_ema = result[-1] if not pd.isna(result[-1]) else np.nan
            logger.info(f"üìà EMA{period}: {current_ema:.2f}")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA{period}: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å EMA{period}: {e}")
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        """–†–∞—Å—á–µ—Ç ADX, +DI, -DI —á–µ—Ä–µ–∑ TA-Lib"""
        
        if len(highs) < period * 2:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ADX{period}")
            return {
                'adx': [np.nan] * len(highs), 
                'plus_di': [np.nan] * len(highs), 
                'minus_di': [np.nan] * len(highs)
            }
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy arrays
            high_array = np.array(highs, dtype=float)
            low_array = np.array(lows, dtype=float)
            close_array = np.array(closes, dtype=float)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ TA-Lib
            adx = talib.ADX(high_array, low_array, close_array, timeperiod=period)
            plus_di = talib.PLUS_DI(high_array, low_array, close_array, timeperiod=period)
            minus_di = talib.MINUS_DI(high_array, low_array, close_array, timeperiod=period)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–∫–∏
            adx_values = adx.tolist()
            plus_di_values = plus_di.tolist()
            minus_di_values = minus_di.tolist()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_adx = adx_values[-1] if not pd.isna(adx_values[-1]) else np.nan
            current_plus_di = plus_di_values[-1] if not pd.isna(plus_di_values[-1]) else np.nan
            current_minus_di = minus_di_values[-1] if not pd.isna(minus_di_values[-1]) else np.nan
            
            logger.info(f"üìä ADX: {current_adx:.1f} | +DI: {current_plus_di:.1f} | -DI: {current_minus_di:.1f}")
            
            return {
                'adx': adx_values,
                'plus_di': plus_di_values,
                'minus_di': minus_di_values
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ADX{period}: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ADX{period}: {e}")
    
    @staticmethod
    def calculate_rsi(closes: List[float], period: int = 14) -> List[float]:
        """–†–∞—Å—á–µ—Ç RSI —á–µ—Ä–µ–∑ TA-Lib"""
        if len(closes) < period + 1:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI{period}")
            return [np.nan] * len(closes)
        
        try:
            close_array = np.array(closes, dtype=float)
            rsi = talib.RSI(close_array, timeperiod=period)
            result = rsi.tolist()
            
            current_rsi = result[-1] if not pd.isna(result[-1]) else np.nan
            
            if current_rsi > 70:
                rsi_status = "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω"
            elif current_rsi < 30:
                rsi_status = "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω"
            else:
                rsi_status = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
            
            logger.info(f"üìä RSI{period}: {current_rsi:.1f} ({rsi_status})")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI{period}: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å RSI{period}: {e}")
    
    @staticmethod
    def calculate_macd(closes: List[float], fast_period: int = 12, slow_period: int = 26, signal_period: int = 9) -> Dict:
        """–†–∞—Å—á–µ—Ç MACD —á–µ—Ä–µ–∑ TA-Lib"""
        if len(closes) < slow_period + signal_period:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MACD")
            return {
                'macd': [np.nan] * len(closes),
                'signal': [np.nan] * len(closes), 
                'histogram': [np.nan] * len(closes)
            }
        
        try:
            close_array = np.array(closes, dtype=float)
            macd, signal, histogram = talib.MACD(close_array, 
                                               fastperiod=fast_period,
                                               slowperiod=slow_period, 
                                               signalperiod=signal_period)
            
            current_macd = macd[-1] if not pd.isna(macd[-1]) else np.nan
            current_signal = signal[-1] if not pd.isna(signal[-1]) else np.nan
            current_histogram = histogram[-1] if not pd.isna(histogram[-1]) else np.nan
            
            logger.info(f"üìä MACD: {current_macd:.3f} | Signal: {current_signal:.3f}")
            
            return {
                'macd': macd.tolist(),
                'signal': signal.tolist(),
                'histogram': histogram.tolist()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ MACD: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å MACD: {e}")
    
    @staticmethod
    def calculate_bollinger_bands(closes: List[float], period: int = 20, std_dev: float = 2.0) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ TA-Lib"""
        if len(closes) < period:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Bollinger Bands")
            return {
                'upper': [np.nan] * len(closes),
                'middle': [np.nan] * len(closes),
                'lower': [np.nan] * len(closes)
            }
        
        try:
            close_array = np.array(closes, dtype=float)
            upper, middle, lower = talib.BBANDS(close_array, 
                                               timeperiod=period,
                                               nbdevup=std_dev, 
                                               nbdevdn=std_dev)
            
            current_upper = upper[-1] if not pd.isna(upper[-1]) else np.nan
            current_middle = middle[-1] if not pd.isna(middle[-1]) else np.nan  
            current_lower = lower[-1] if not pd.isna(lower[-1]) else np.nan
            current_price = closes[-1]
            
            if current_price > current_upper:
                bb_position = "–≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π"
            elif current_price < current_lower:
                bb_position = "–Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π"
            else:
                bb_position = "–≤ –ø–æ–ª–æ—Å–∞—Ö"
            
            logger.info(f"üìä BB: {current_lower:.2f} < {current_middle:.2f} < {current_upper:.2f} ({bb_position})")
            
            return {
                'upper': upper.tolist(),
                'middle': middle.tolist(),
                'lower': lower.tolist()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Bollinger Bands: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å Bollinger Bands: {e}")
    
    @staticmethod
    def find_support_resistance_levels(highs: List[float], lows: List[float], period: int = 20) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            if len(highs) < period:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Ä–æ–≤–Ω–µ–π")
                return {'support': None, 'resistance': None}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
            recent_highs = highs[-period:]
            recent_lows = lows[-period:]
            
            # –ü—Ä–æ—Å—Ç—ã–µ —É—Ä–æ–≤–Ω–∏
            resistance = max(recent_highs)
            support = min(recent_lows)
            
            # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            resistance_levels = []
            support_levels = []
            
            for i in range(2, len(recent_highs) - 2):
                # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
                if (recent_highs[i] > recent_highs[i-1] and 
                    recent_highs[i] > recent_highs[i-2] and
                    recent_highs[i] > recent_highs[i+1] and 
                    recent_highs[i] > recent_highs[i+2]):
                    resistance_levels.append(recent_highs[i])
                
                # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
                if (recent_lows[i] < recent_lows[i-1] and 
                    recent_lows[i] < recent_lows[i-2] and
                    recent_lows[i] < recent_lows[i+1] and 
                    recent_lows[i] < recent_lows[i+2]):
                    support_levels.append(recent_lows[i])
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ —É—Ä–æ–≤–Ω–∏
            if resistance_levels:
                resistance = max(resistance_levels)
            if support_levels:
                support = min(support_levels)
            
            logger.info(f"üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {support:.2f} | –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {resistance:.2f}")
            
            return {
                'support': round(support, 2),
                'resistance': round(resistance, 2)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {'support': None, 'resistance': None}
