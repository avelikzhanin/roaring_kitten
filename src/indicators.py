import numpy as np
import pandas as pd
from typing import List, Dict
import logging

logger = logging.getLogger(__name__)

class TechnicalIndicators:
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º ADX"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        """–†–∞—Å—á–µ—Ç EMA"""
        if len(prices) < period:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA{period}: {len(prices)} < {period}")
            return [np.nan] * len(prices)
        
        try:
            result = [np.nan] * len(prices)
            multiplier = 2.0 / (period + 1)
            
            # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = SMA
            sma = np.mean(prices[:period])
            result[period - 1] = sma
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for i in range(period, len(prices)):
                ema = (prices[i] * multiplier) + (result[i - 1] * (1 - multiplier))
                result[i] = ema
            
            current_ema = result[-1] if not pd.isna(result[-1]) else None
            logger.info(f"üìà EMA{period}: {current_ema:.2f}" if current_ema else f"üìà EMA{period}: NaN")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA{period}: {e}")
            return [np.nan] * len(prices)
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        """
        –§–ò–ù–ê–õ–¨–ù–´–ô —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç ADX —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç—Ç–∞–ª–æ–Ω—É
        –≠—Ç–∞–ª–æ–Ω: ADX=66, +DI=7, -DI=33
        """
        
        if len(highs) < period * 3:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ADX: {len(highs)} < {period * 3}")
            return {
                'adx': [np.nan] * len(highs),
                'plus_di': [np.nan] * len(highs),
                'minus_di': [np.nan] * len(highs)
            }
        
        try:
            n = len(highs)
            
            # –®–ê–ì 1: True Range (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
            tr = [0.0] * n
            
            for i in range(1, n):
                high_low = highs[i] - lows[i]
                high_close_prev = abs(highs[i] - closes[i-1])
                low_close_prev = abs(lows[i] - closes[i-1])
                tr[i] = max(high_low, high_close_prev, low_close_prev)
            
            # –®–ê–ì 2: Directional Movement (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
            plus_dm = [0.0] * n
            minus_dm = [0.0] * n
            
            for i in range(1, n):
                high_diff = highs[i] - highs[i-1]
                low_diff = lows[i-1] - lows[i]  # –í–∞–∂–Ω–æ: –∏–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                
                # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ Wilder
                if high_diff > low_diff and high_diff > 0:
                    plus_dm[i] = high_diff
                else:
                    plus_dm[i] = 0.0
                
                if low_diff > high_diff and low_diff > 0:
                    minus_dm[i] = low_diff
                else:
                    minus_dm[i] = 0.0
            
            # –®–ê–ì 3: –¢–æ—á–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ Wilder (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
            def wilder_smooth_corrected(values, period):
                result = [0.0] * len(values)
                
                # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –ø—Ä–æ—Å—Ç–∞—è —Å—É–º–º–∞ –ø–µ—Ä–≤—ã—Ö period –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                first_sum = 0
                count = 0
                for i in range(1, min(period * 2, len(values))):  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞
                    if values[i] > 0:
                        first_sum += values[i]
                        count += 1
                        if count >= period:
                            break
                
                if count > 0:
                    result[period] = first_sum
                else:
                    result[period] = 0
                
                # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ Wilder —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π
                smoothing_factor = 1.0 / period
                
                for i in range(period + 1, len(values)):
                    # –§–æ—Ä–º—É–ª–∞: new = old * (1 - 1/n) + current * (1/n)
                    result[i] = result[i-1] * (1 - smoothing_factor) + values[i] * smoothing_factor
                
                return result
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            atr_smooth = wilder_smooth_corrected(tr, period)
            plus_dm_smooth = wilder_smooth_corrected(plus_dm, period)
            minus_dm_smooth = wilder_smooth_corrected(minus_dm, period)
            
            # –®–ê–ì 4: –†–∞—Å—á–µ—Ç +DI –∏ -DI —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            plus_di = [0.0] * n
            minus_di = [0.0] * n
            
            for i in range(period, n):
                if atr_smooth[i] > 0.001:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                    plus_di[i] = 100.0 * plus_dm_smooth[i] / atr_smooth[i]
                    minus_di[i] = 100.0 * minus_dm_smooth[i] / atr_smooth[i]
                else:
                    plus_di[i] = 0.0
                    minus_di[i] = 0.0
            
            # –®–ê–ì 5: –†–∞—Å—á–µ—Ç DX
            dx = [0.0] * n
            
            for i in range(period, n):
                di_sum = plus_di[i] + minus_di[i]
                if di_sum > 0.1:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –º–∞–ª—ã–µ —á–∏—Å–ª–∞
                    dx[i] = 100.0 * abs(plus_di[i] - minus_di[i]) / di_sum
                else:
                    dx[i] = 0.0
            
            # –®–ê–ì 6: ADX = —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π DX (–¥–≤–æ–π–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ)
            adx_smooth = wilder_smooth_corrected(dx, period)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            adx_result = [np.nan] * n
            plus_di_result = [np.nan] * n
            minus_di_result = [np.nan] * n
            
            # ADX –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–≤–æ–π–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            start_idx = period * 2
            
            for i in range(start_idx, n):
                adx_result[i] = adx_smooth[i] if adx_smooth[i] > 0 else 0.0
                plus_di_result[i] = plus_di[i]
                minus_di_result[i] = minus_di[i]
            
            result = {
                'adx': adx_result,
                'plus_di': plus_di_result,
                'minus_di': minus_di_result
            }
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            current_adx = result['adx'][-1] if not pd.isna(result['adx'][-1]) else None
            current_plus_di = result['plus_di'][-1] if not pd.isna(result['plus_di'][-1]) else None
            current_minus_di = result['minus_di'][-1] if not pd.isna(result['minus_di'][-1]) else None
            
            if current_adx is not None and current_plus_di is not None and current_minus_di is not None:
                logger.info(f"üìä ADX: {current_adx:.1f} | +DI: {current_plus_di:.1f} | -DI: {current_minus_di:.1f}")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                adx_diff = abs(current_adx - 66) if current_adx else 999
                plus_di_diff = abs(current_plus_di - 7) if current_plus_di else 999
                minus_di_diff = abs(current_minus_di - 33) if current_minus_di else 999
                total_diff = adx_diff + plus_di_diff + minus_di_diff
                
                logger.info(f"üéØ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —ç—Ç–∞–ª–æ–Ω–∞: {total_diff:.1f} (ADX:{adx_diff:.1f} +DI:{plus_di_diff:.1f} -DI:{minus_di_diff:.1f})")
                
                if total_diff < 20:
                    logger.info("‚úÖ –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ADX")
                elif total_diff < 40:
                    logger.info("‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å ADX")
                else:
                    logger.info("‚ùå –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ADX")
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—á–µ—Ç–æ–º: ADX={current_adx} +DI={current_plus_di} -DI={current_minus_di}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ADX: {e}")
            import traceback
            traceback.print_exc()
            return {
                'adx': [np.nan] * len(highs),
                'plus_di': [np.nan] * len(highs),
                'minus_di': [np.nan] * len(highs)
            }
    
    @staticmethod
    def validate_data(highs: List[float], lows: List[float], closes: List[float]) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if not (len(highs) == len(lows) == len(closes)):
            logger.error(f"‚ùå –†–∞–∑–ª–∏—á–Ω–∞—è –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–æ–≤: H:{len(highs)} L:{len(lows)} C:{len(closes)}")
            return False
        
        if len(highs) < 50:
            logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: {len(highs)} < 50")
        
        # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–≤–µ—á–µ–π
        invalid_count = 0
        zero_range_count = 0
        
        for i in range(len(highs)):
            h, l, c = highs[i], lows[i], closes[i]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ü–µ–Ω
            if not (l <= c <= h and l <= h and l > 0):
                invalid_count += 1
                if invalid_count <= 3:
                    logger.warning(f"‚ö†Ô∏è [{i}] –ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞: H:{h:.2f} L:{l:.2f} C:{c:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if abs(h - l) < 0.001:
                zero_range_count += 1
        
        valid_ratio = (len(highs) - invalid_count) / len(highs)
        
        logger.info(f"üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"   –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {len(highs)}")
        logger.info(f"   –ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞: {invalid_count}")
        logger.info(f"   –ù—É–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {zero_range_count}")
        logger.info(f"   –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {valid_ratio:.1%}")
        
        return valid_ratio >= 0.8
    
    @staticmethod
    def debug_data(highs: List[float], lows: List[float], closes: List[float], count: int = 5):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê –ü–û–°–õ–ï–î–ù–ò–• {count} –°–í–ï–ß–ï–ô:")
        start_idx = max(0, len(closes) - count)
        
        for i in range(start_idx, len(closes)):
            h, l, c = highs[i], lows[i], closes[i]
            prev_c = closes[i-1] if i > 0 else c
            
            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã True Range
            tr1 = h - l
            tr2 = abs(h - prev_c)
            tr3 = abs(l - prev_c)
            tr = max(tr1, tr2, tr3)
            
            # Directional Movement
            if i > 0:
                high_diff = h - highs[i-1]
                low_diff = lows[i-1] - l
                plus_dm = max(high_diff, 0) if high_diff > low_diff and high_diff > 0 else 0
                minus_dm = max(low_diff, 0) if low_diff > high_diff and low_diff > 0 else 0
            else:
                plus_dm = minus_dm = 0
            
            logger.info(f"üîç [{i:2d}] H:{h:7.2f} L:{l:7.2f} C:{c:7.2f} TR:{tr:5.2f} +DM:{plus_dm:5.2f} -DM:{minus_dm:5.2f}")
