import numpy as np
import pandas as pd
import pandas_ta as ta
from typing import List, Dict
import logging

logger = logging.getLogger(__name__)

class TechnicalIndicators:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pandas-ta"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        """–†–∞—Å—á–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π"""
        if len(prices) < period:
            return [np.nan] * len(prices)
        
        try:
            df = pd.DataFrame({'close': prices})
            ema = ta.ema(df['close'], length=period)
            result = ema.fillna(method='bfill').tolist()
            
            logger.info(f"EMA{period} calculated: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {result[-5:]}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            series = pd.Series(prices)
            ema = series.ewm(span=period, adjust=False).mean()
            return ema.tolist()
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç ADX, +DI, -DI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pandas-ta
        –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ TradingView
        """
        if len(highs) < period * 2:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ADX: {len(highs)} < {period * 2}")
            return {
                'adx': [np.nan] * len(highs), 
                'plus_di': [np.nan] * len(highs), 
                'minus_di': [np.nan] * len(highs)
            }
        
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame({
                'high': highs,
                'low': lows,
                'close': closes
            })
            
            logger.info(f"–†–∞—Å—á–µ—Ç ADX –¥–ª—è {len(df)} —Å–≤–µ—á–µ–π, –ø–µ—Ä–∏–æ–¥ {period}")
            logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π: {df.tail().to_dict('records')}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas-ta –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ADX
            adx_data = ta.adx(
                high=df['high'], 
                low=df['low'], 
                close=df['close'], 
                length=period
            )
            
            if adx_data is None or adx_data.empty:
                logger.error("pandas-ta –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ADX")
                return {
                    'adx': [np.nan] * len(highs), 
                    'plus_di': [np.nan] * len(highs), 
                    'minus_di': [np.nan] * len(highs)
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ (pandas-ta –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞)
            adx_col = f'ADX_{period}'
            plus_di_col = f'DMP_{period}'  # Directional Movement Positive
            minus_di_col = f'DMN_{period}'  # Directional Movement Negative
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            available_cols = list(adx_data.columns)
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ ADX: {available_cols}")
            
            if adx_col not in available_cols:
                logger.error(f"–ö–æ–ª–æ–Ω–∫–∞ {adx_col} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ pandas-ta")
                return {
                    'adx': [np.nan] * len(highs), 
                    'plus_di': [np.nan] * len(highs), 
                    'minus_di': [np.nan] * len(highs)
                }
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–∫–∏
            adx_values = adx_data[adx_col].fillna(method='bfill').tolist()
            plus_di_values = adx_data[plus_di_col].fillna(method='bfill').tolist()
            minus_di_values = adx_data[minus_di_col].fillna(method='bfill').tolist()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"ADX —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
            logger.info(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ ADX: {adx_values[-5:]}")
            logger.info(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ +DI: {plus_di_values[-5:]}")
            logger.info(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ -DI: {minus_di_values[-5:]}")
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞)
            current_adx = adx_values[-1] if not pd.isna(adx_values[-1]) else np.nan
            current_plus_di = plus_di_values[-1] if not pd.isna(plus_di_values[-1]) else np.nan
            current_minus_di = minus_di_values[-1] if not pd.isna(minus_di_values[-1]) else np.nan
            
            logger.info(f"üîç –¢–ï–ö–£–©–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ò–ù–î–ò–ö–ê–¢–û–†–û–í:")
            logger.info(f"   ADX: {current_adx:.1f}")
            logger.info(f"   +DI: {current_plus_di:.1f}")
            logger.info(f"   -DI: {current_minus_di:.1f}")
            logger.info(f"   –†–∞–∑–Ω–∏—Ü–∞ DI: {current_plus_di - current_minus_di:.1f}")
            
            return {
                'adx': adx_values,
                'plus_di': plus_di_values,
                'minus_di': minus_di_values
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ADX —á–µ—Ä–µ–∑ pandas-ta: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return {
                'adx': [np.nan] * len(highs), 
                'plus_di': [np.nan] * len(highs), 
                'minus_di': [np.nan] * len(highs)
            }
    
    @staticmethod
    def calculate_rsi(closes: List[float], period: int = 14) -> List[float]:
        """–†–∞—Å—á–µ—Ç RSI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pandas-ta"""
        if len(closes) < period + 1:
            return [np.nan] * len(closes)
        
        try:
            df = pd.DataFrame({'close': closes})
            rsi = ta.rsi(df['close'], length=period)
            result = rsi.fillna(method='bfill').tolist()
            
            logger.info(f"RSI{period} calculated: –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {result[-1]:.1f}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
            return [np.nan] * len(closes)
    
    @staticmethod
    def find_support_resistance_levels(highs: List[float], lows: List[float], period: int = 20) -> Dict:
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            if len(highs) < period:
                return {'support': None, 'resistance': None}
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–µ—Ä–∏–æ–¥–æ–≤
            recent_highs = highs[-period:]
            recent_lows = lows[-period:]
            
            # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            resistance = max(recent_highs)
            support = min(recent_lows)
            
            logger.info(f"–£—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ {support:.2f}, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ {resistance:.2f}")
            
            return {
                'support': support,
                'resistance': resistance
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {'support': None, 'resistance': None}
    
    @staticmethod
    def analyze_volume_trend(volumes: List[int], period: int = 20) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –æ–±—ä–µ–º–æ–≤"""
        try:
            if len(volumes) < period:
                return {'volume_ratio': 1.0, 'volume_trend': 'unknown'}
            
            recent_volume = np.mean(volumes[-5:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–µ—Ä–∏–æ–¥–æ–≤
            avg_volume = np.mean(volumes[-period:])  # –°—Ä–µ–¥–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
            
            volume_ratio = recent_volume / avg_volume if avg_volume > 0 else 1.0
            
            if volume_ratio > 1.5:
                volume_trend = 'high'
            elif volume_ratio < 0.7:
                volume_trend = 'low'
            else:
                volume_trend = 'normal'
            
            logger.info(f"–û–±—ä–µ–º—ã: —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {volume_ratio:.1f}x, —Ç—Ä–µ–Ω–¥ {volume_trend}")
            
            return {
                'volume_ratio': volume_ratio,
                'volume_trend': volume_trend
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤: {e}")
            return {'volume_ratio': 1.0, 'volume_trend': 'unknown'}
