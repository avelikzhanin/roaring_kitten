import TelegramBot from 'node-telegram-bot-api';
import { TinkoffInvestGrpcApi } from '@tinkoff/invest-js';
import { EMA, ADX } from 'technicalindicators';
import * as dotenv from 'dotenv';

dotenv.config();

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN!;
const TINKOFF_TOKEN = process.env.TINKOFF_TOKEN!;
const SBER_FIGI = 'BBG004730N88'; // FIGI –¥–ª—è –°–±–µ—Ä–±–∞–Ω–∫–∞

if (!TELEGRAM_TOKEN || !TINKOFF_TOKEN) {
    console.error('Missing required environment variables');
    process.exit(1);
}

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const tinkoffApi = new TinkoffInvestGrpcApi({
    token: TINKOFF_TOKEN,
    appName: 'SberTelegramBot'
});

interface CandleData {
    high: number;
    low: number;
    close: number;
    volume: number;
}

async function getSberData(): Promise<{
    currentPrice: number;
    ema20: number;
    adx: number;
    diPlus: number;
    diMinus: number;
} | null> {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        const to = new Date();
        const from = new Date(to.getTime() - 30 * 24 * 60 * 60 * 1000);
        
        const candlesResponse = await tinkoffApi.marketdata.getCandles({
            figi: SBER_FIGI,
            from: from,
            to: to,
            interval: 1 // CandleInterval.CANDLE_INTERVAL_DAY
        });

        if (!candlesResponse.candles || candlesResponse.candles.length === 0) {
            console.error('No candle data received');
            return null;
        }

        const candles = candlesResponse.candles;
        const candleData: CandleData[] = candles.map((candle: any) => ({
            high: parseFloat(candle.high?.units || '0') + parseFloat(candle.high?.nano || '0') / 1000000000,
            low: parseFloat(candle.low?.units || '0') + parseFloat(candle.low?.nano || '0') / 1000000000,
            close: parseFloat(candle.close?.units || '0') + parseFloat(candle.close?.nano || '0') / 1000000000,
            volume: parseFloat(candle.volume || '0')
        }));

        const closePrices = candleData.map(c => c.close);
        const highPrices = candleData.map(c => c.high);
        const lowPrices = candleData.map(c => c.low);

        // –†–∞—Å—á–µ—Ç EMA20
        const emaResult = EMA.calculate({
            period: 20,
            values: closePrices
        });
        const ema20 = emaResult[emaResult.length - 1] || 0;

        // –†–∞—Å—á–µ—Ç ADX, DI+, DI-
        const adxResult = ADX.calculate({
            period: 14,
            high: highPrices,
            low: lowPrices,
            close: closePrices
        });
        
        const lastAdxData = adxResult[adxResult.length - 1];
        const adx = lastAdxData?.adx || 0;
        const diPlus = lastAdxData?.pdi || 0;
        const diMinus = lastAdxData?.mdi || 0;

        const currentPrice = closePrices[closePrices.length - 1];

        return {
            currentPrice,
            ema20,
            adx,
            diPlus,
            diMinus
        };

    } catch (error) {
        console.error('Error fetching SBER data:', error);
        return null;
    }
}

function formatSberMessage(data: {
    currentPrice: number;
    ema20: number;
    adx: number;
    diPlus: number;
    diMinus: number;
}): string {
    const trend = data.currentPrice > data.ema20 ? 'üìà –í—ã—à–µ EMA' : 'üìâ –ù–∏–∂–µ EMA';
    const adxStrength = data.adx > 25 ? '–°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥' : '–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥';
    const diDirection = data.diPlus > data.diMinus ? 'üü¢ –ë—ã—á–∏–π' : 'üî¥ –ú–µ–¥–≤–µ–∂–∏–π';
    
    return `üè¶ <b>SBER - –°–±–µ—Ä–±–∞–Ω–∫</b>
    
üí∞ <b>–¶–µ–Ω–∞:</b> ${data.currentPrice.toFixed(2)} ‚ÇΩ
üìä <b>EMA20:</b> ${data.ema20.toFixed(2)} ‚ÇΩ
${trend}

üìà <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> ${data.adx.toFixed(2)} (${adxStrength})
‚Ä¢ <b>DI+:</b> ${data.diPlus.toFixed(2)}
‚Ä¢ <b>DI-:</b> ${data.diMinus.toFixed(2)}
‚Ä¢ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> ${diDirection}

‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}</i>`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sber
bot.onText(/\/sber/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        await bot.sendMessage(chatId, '‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ SBER...');
        
        const sberData = await getSberData();
        
        if (!sberData) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ SBER. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }

        const message = formatSberMessage(sberData);
        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        
    } catch (error) {
        console.error('Error handling /sber command:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ü–∏–π SBER.

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/sber - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –°–±–µ—Ä–±–∞–Ω–∫—É

<i>–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ, EMA20, ADX, DI+ –∏ DI-</i>`;
    
    await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

console.log('ü§ñ SBER Telegram Bot started...');
