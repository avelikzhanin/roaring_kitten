# src/gpt_analyzer.py - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
import logging
import aiohttp
import json
import asyncio
import numpy as np
import pandas as pd
from typing import Dict, Optional, List
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class GPTAdvice:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç GPT —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    recommendation: str  # "BUY", "AVOID", "WEAK_BUY", "WAIT"
    confidence: int      # 0-100%
    reasoning: str       # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    risk_warning: str    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
    
    # ADX –∫–∞–∫ –æ–¥–∏–Ω –∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    calculated_adx: Optional[float] = None        
    calculated_plus_di: Optional[float] = None   
    calculated_minus_di: Optional[float] = None   
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    take_profit: Optional[str] = None
    stop_loss: Optional[str] = None
    expected_levels: Optional[str] = None
    timeframe: Optional[str] = None
    key_factors: Optional[str] = None  # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–µ—à–µ–Ω–∏—è

class GPTMarketAnalyzer:
    """GPT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫–æ –≤—Å–µ–º —Ñ–∞–∫—Ç–æ—Ä–∞–º"""
    
    def __init__(self, openai_api_key: str):
        self.api_key = openai_api_key
        self.base_url = "https://api.openai.com/v1/chat/completions"
        
        # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-4.1
        self.base_system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≥–æ–ª—É–±—ã–º–∏ —Ñ–∏—à–∫–∞–º–∏ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º –∑–Ω–∞–Ω–∏–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–¢–í–û–Ø –†–û–õ–¨: –ü—Ä–æ–≤–µ—Å—Ç–∏ –ì–õ–£–ë–û–ö–ò–ô –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {symbol}.

–ê–ù–ê–õ–ò–ó–ò–†–£–ô –í–°–ï –§–ê–ö–¢–û–†–´ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û:

1. üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (–ü–†–ò–û–†–ò–¢–ï–¢):
   - EMA20 (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä)
   - ADX/DI (—Å–∏–ª–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞) - –¢–û–ß–ù–û –†–ê–°–°–ß–ò–¢–ê–ô –∏–∑ —Å–≤–µ—á–µ–π
   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏)
   - –ü–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏ –ø—Ä–æ–±–æ–∏

2. üìà –¶–ï–ù–û–í–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê (–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó):
   - –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (1—á, 4—á, 12—á, 1–¥, 3–¥)
   - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
   - –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∏—Ö –∫–∞—á–µ—Å—Ç–≤–æ
   - –ü—Ä–æ–±–æ–∏ —É—Ä–æ–≤–Ω–µ–π –∏ –∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

3. üîä –û–ë–™–ï–ú–´ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ê–ö–¢–û–†):
   - –¢–µ–∫—É—â–∏–π vs —Å—Ä–µ–¥–Ω–∏–π (—Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã)
   - –¢—Ä–µ–Ω–¥ –æ–±—ä–µ–º–æ–≤ –∏ –µ–≥–æ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
   - –í—Å–ø–ª–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω—ã
   - –ö–∞—á–µ—Å—Ç–≤–æ –¥–≤–∏–∂–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–±—ä–µ–º–∞–º–∏

4. ‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ö–û–ù–¢–ï–ö–°–¢ (–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ü–û–î–•–û–î):
   - –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏
   - –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —Å–ø—Ä–µ–¥—ã
   - –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã

5. üéØ –†–´–ù–û–ß–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø (–≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó):
   - –ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
   - –ë–ª–∏–∑–æ—Å—Ç—å –∫ –≤–∞–∂–Ω—ã–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∑–æ–Ω–∞–º
   - –û–±—â–∏–π –Ω–∞—Å—Ç—Ä–æ–π —Ä—ã–Ω–∫–∞ –∏ —Å–µ–∫—Ç–æ—Ä–∞
   - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏

{ticker_specific_context}

–ü–†–ò–ù–¶–ò–ü–´ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø:
- BUY: –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –ø–æ–∑–∏—Ç–∏–≤–Ω—ã, —Ä–∏—Å–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã, –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
- WEAK_BUY: –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è
- WAIT: –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã, –ª—É—á—à–µ –¥–æ–∂–¥–∞—Ç—å—Å—è —è—Å–Ω–æ—Å—Ç–∏
- AVOID: –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏–ª–∏ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–µ —Ä–∏—Å–∫–∏

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–ê–ß–ï–°–¢–í–£ –ê–ù–ê–õ–ò–ó–ê:
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
- –û–±–æ—Å–Ω—É–π –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- –£–∫–∞–∂–∏ —Ç–æ—á–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
- –û—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ —Ç—Ä–µ–∑–≤–æ –∏ —á–µ—Å—Ç–Ω–æ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - –°–¢–†–û–ì–û JSON:
{{
  "calculated_adx": —á–∏—Å–ª–æ_–∏–ª–∏_null (–µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω–æ),
  "calculated_plus_di": —á–∏—Å–ª–æ_–∏–ª–∏_null,
  "calculated_minus_di": —á–∏—Å–ª–æ_–∏–ª–∏_null,
  "recommendation": "BUY/WEAK_BUY/WAIT/AVOID",
  "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
  "reasoning": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏",
  "key_factors": "3-4 –≥–ª–∞–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
  "take_profit": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏–ª–∏ null",
  "stop_loss": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏–ª–∏ null", 
  "expected_levels": "–∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ null",
  "timeframe": "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç —Å–¥–µ–ª–∫–∏ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º",
  "risk_warning": "–æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"
}}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ —á–µ—Å—Ç–Ω—ã–º. –õ—É—á—à–µ –ø—Ä–∏–∑–Ω–∞—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å, —á–µ–º –¥–∞—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–π —Å–æ–≤–µ—Ç!"""

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.ticker_contexts = {
            'SBER': """
–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ SBER:
- –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: 280-330‚ÇΩ, —Ç–∏–ø–∏—á–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-5%
- –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: 11:00-16:00 –ú–°–ö (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)
- –ö–ª—é—á–µ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã: —Ä–µ—à–µ–Ω–∏—è –¶–ë –†–§, —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞, —Ü–µ–Ω—ã –Ω–∞ –Ω–µ—Ñ—Ç—å, –¥–∏–≤–∏–¥–µ–Ω–¥–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö—É—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 275-285‚ÇΩ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 320-340‚ÇΩ
- –û–±—ä–µ–º–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –Ω–æ—Ä–º–∞ 1-3–ú/—á–∞—Å, –≤—Å–ø–ª–µ—Å–∫–∏ 5–ú+ –Ω–∞ –º–∞–∫—Ä–æ–Ω–æ–≤–æ—Å—Ç—è—Ö
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: –≤—ã—Å–æ–∫–∞—è —Å —Ä—É–±–ª–µ–º, –Ω–µ—Ñ—Ç—å—é, –∏–Ω–¥–µ–∫—Å–æ–º MOEX
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —Å–∏—Å—Ç–µ–º–æ–æ–±—Ä–∞–∑—É—é—â–∏–π –±–∞–Ω–∫, –ª–∏–¥–µ—Ä —Å–µ–∫—Ç–æ—Ä–∞, –≤—ã—Å–æ–∫–∞—è –¥–∏–≤–∏–¥–µ–Ω–¥–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å""",

            'GAZP': """
–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ GAZP:
- –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: 120-180‚ÇΩ, –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 3-7%
- –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 11:00-16:00 –ú–°–ö, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –≤–µ—á–µ—Ä–æ–º
- –ö–ª—é—á–µ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã: —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑ –≤ –ï–≤—Ä–æ–ø–µ, —Å–∞–Ω–∫—Ü–∏–∏, –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞, –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö—É—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 125-135‚ÇΩ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 170-185‚ÇΩ
- –û–±—ä–µ–º–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: —Å—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, —Ä–µ–∑–∫–∏–µ –≤—Å–ø–ª–µ—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: –≥–∞–∑–æ–≤—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã, –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –≤—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –≤–Ω–µ—à–Ω–∏–º —Ñ–∞–∫—Ç–æ—Ä–∞–º, —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä""",

            'LKOH': """
–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ LKOH:
- –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: 6000-8000‚ÇΩ, —É–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-6%
- –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 11:00-16:00 –ú–°–ö
- –ö–ª—é—á–µ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã: –Ω–µ—Ñ—Ç—å Brent, —Å–∞–Ω–∫—Ü–∏–∏, –∫—É—Ä—Å —Ä—É–±–ª—è, –¥–∏–≤–∏–¥–µ–Ω–¥–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö—É—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 6000-6200‚ÇΩ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 7500-8000‚ÇΩ
- –û–±—ä–µ–º–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –Ω–∏–∂–µ SBER, –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–µ —Å–ø—Ä–µ–¥—ã
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: –Ω–µ—Ñ—Ç—å Brent, —Ä—É–±–ª—å, –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤—ã–π —Å–µ–∫—Ç–æ—Ä
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã""",

            'DEFAULT': """
–û–ë–©–ò–ï –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
- –í—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–π –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–µ–º–∏—É–º-–≤—Ä–µ–º—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: 11:00-16:00 –ú–°–ö (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)
- –ë—É–¥—å –æ—Å–æ–±–µ–Ω–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥—ã –Ω–∏–∑–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        }

    def get_system_prompt(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        context = self.ticker_contexts.get(symbol, self.ticker_contexts['DEFAULT'])
        return self.base_system_prompt.format(
            symbol=symbol,
            ticker_specific_context=context
        )

    async def analyze_signal(self, signal_data: Dict, candles_data: Optional[List] = None, 
                           is_manual_check: bool = False, symbol: str = 'SBER') -> Optional[GPTAdvice]:
        """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ GPT-4.1"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = self.get_system_prompt(symbol)
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            prompt = self._create_professional_prompt(signal_data, candles_data, is_manual_check, symbol)
            
            response = await self._call_openai_api(prompt, system_prompt)
            
            if response:
                return self._parse_professional_advice(response)
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ GPT-4.1 –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    def _create_professional_prompt(self, signal_data: Dict, candles_data: Optional[List], 
                                   is_manual_check: bool, symbol: str = 'SBER') -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–≤–µ—á–∏ –¥–æ 50 –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã GPT-4.1
        if candles_data and len(candles_data) > 50:
            candles_data = candles_data[-50:]
            logger.info(f"üî¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ 50 —Å–≤–µ—á–µ–π –¥–ª—è GPT-4.1 –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if not candles_data or len(candles_data) < 20:
            return f"""–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–• –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}:
–ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(candles_data) if candles_data else 0}
–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: 20 –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

{{
  "calculated_adx": null,
  "calculated_plus_di": null, 
  "calculated_minus_di": null,
  "recommendation": "WAIT",
  "confidence": 15,
  "reasoning": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤",
  "key_factors": "–î–µ—Ñ–∏—Ü–∏—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ ADX/DI",
  "risk_warning": "–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑—ã –∫—Ä–∞–π–Ω–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ"
}}"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–£–Æ —Ç–∞–±–ª–∏—Ü—É —Å–≤–µ—á–µ–π
        candles_table = "‚Ññ  | –í–†–ï–ú–Ø –ú–°–ö   | OPEN    | HIGH    | LOW     | CLOSE   | VOLUME   | –ò–ó–ú–ï–ù–ï–ù–ò–ï\n"
        candles_table += "---|-------------|---------|---------|---------|---------|----------|----------\n"
        
        for i, candle in enumerate(candles_data):
            timestamp = candle.get('timestamp', datetime.now())
            if hasattr(timestamp, 'strftime'):
                time_str = timestamp.strftime('%d.%m %H:%M')
            else:
                time_str = str(timestamp)[:11]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤–µ—á–∏
            change_pct = ((candle['close'] - candle['open']) / candle['open'] * 100) if candle['open'] > 0 else 0
            change_str = f"{change_pct:+.1f}%"
            
            candles_table += f"{i+1:2d} |{time_str:11s}|{candle['open']:8.2f}|{candle['high']:8.2f}|{candle['low']:8.2f}|{candle['close']:8.2f}|{candle['volume']:9,}|{change_str:8s}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        current_price = signal_data.get('price', 0)
        current_ema20 = signal_data.get('ema20', 0)
        session = signal_data.get('trading_session', 'unknown')
        time_quality = signal_data.get('time_quality', 'unknown')
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
        volume_info = ""
        if 'volume_analysis' in signal_data:
            vol = signal_data['volume_analysis']
            volume_info = f"""
üîä –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ú–û–í:
‚Ä¢ –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: {vol.get('current_volume', 0):,}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ 5 –ø–µ—Ä–∏–æ–¥–æ–≤: {vol.get('avg_5', 0):,}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ 20 –ø–µ—Ä–∏–æ–¥–æ–≤: {vol.get('avg_20', 0):,}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ 50 –ø–µ—Ä–∏–æ–¥–æ–≤: {vol.get('avg_50', 0):,}
‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É: {vol.get('current_vs_avg', 1.0):.2f}x
‚Ä¢ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥: {vol.get('recent_vs_medium', 1.0):.2f}x
‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥: {vol.get('recent_vs_long', 1.0):.2f}x
‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {vol.get('trend', 'unknown')}"""

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ü–µ–Ω–æ–≤–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
        movement_info = ""
        changes = []
        for key in ['change_1h', 'change_4h', 'change_12h', 'change_1d', 'change_3d']:
            if key in signal_data:
                period = key.replace('change_', '').upper()
                changes.append(f"{period}: {signal_data[key]:+.2f}%")
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility_data = []
        for key in ['volatility_1d', 'volatility_3d', 'volatility_5d']:
            if key in signal_data:
                period = key.replace('volatility_', '').upper()
                volatility_data.append(f"Vol{period}: {signal_data[key]:.2f}%")
        
        if changes or volatility_data:
            movement_info = f"\nüìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –¶–ï–ù–û–í–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê:\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è: " + " | ".join(changes)
            if volatility_data:
                movement_info += f"\n‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: " + " | ".join(volatility_data)

        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        levels_info = ""
        if 'price_levels' in signal_data and signal_data['price_levels']:
            levels = signal_data['price_levels']
            resistance = levels.get('nearest_resistance')
            support = levels.get('nearest_support')
            recent_low = levels.get("recent_low", 0)
            recent_high = levels.get("recent_high", 0)
            range_size = levels.get("range_size_pct", 0)
            position_pct = levels.get("position_in_range_pct", 50)
            
            resistance_text = f"{resistance:.2f}‚ÇΩ ({((resistance/current_price-1)*100):+.1f}%)" if resistance else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            support_text = f"{support:.2f}‚ÇΩ ({((support/current_price-1)*100):+.1f}%)" if support else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            
            levels_info = f"""
üìä –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –£–†–û–í–ù–ò:
‚Ä¢ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {resistance_text}
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {support_text}
‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Å—Å–∏–∏: {recent_low:.2f} - {recent_high:.2f}‚ÇΩ (—Ä–∞–∑–º–µ—Ä: {range_size:.1f}%)
‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {position_pct:.1f}% (0%=–¥–Ω–æ, 100%=–≤–µ—Ä—à–∏–Ω–∞)"""

        signal_type = "–†—É—á–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" if is_manual_check else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        check_peak = signal_data.get('check_peak', False)
        task_description = "–û–¶–ï–ù–ò–¢–¨ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞" if check_peak else "–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = f"""–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó {symbol} - –≠–ö–°–ü–ï–†–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê:

üí∞ –¢–ï–ö–£–©–ê–Ø –†–´–ù–û–ß–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
‚Ä¢ –¶–µ–Ω–∞: {current_price:.2f}‚ÇΩ
‚Ä¢ EMA20: {current_ema20:.2f}‚ÇΩ ({'‚úÖ —Ü–µ–Ω–∞ –≤—ã—à–µ' if current_price > current_ema20 else '‚ùå —Ü–µ–Ω–∞ –Ω–∏–∂–µ'})
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç EMA20: {((current_price/current_ema20-1)*100):+.2f}%{levels_info}{volume_info}{movement_info}

‚è∞ –¢–û–†–ì–û–í–´–ô –ö–û–ù–¢–ï–ö–°–¢:
‚Ä¢ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M –ú–°–ö, %d.%m.%Y')}
‚Ä¢ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session}
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏: {time_quality}
‚Ä¢ –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {signal_type}

üìä –î–ï–¢–ê–õ–¨–ù–´–ï –°–í–ï–ß–ù–´–ï –î–ê–ù–ù–´–ï ({len(candles_data)} —Å–≤–µ—á–µ–π):
{candles_table}

üéØ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê: {task_description}

–í–´–ü–û–õ–ù–ò –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó:
1. üìä –¢–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–π ADX/DI –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
2. üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–µ–Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–≤–∏–∂–µ–Ω–∏—è  
3. üîä –û—Ü–µ–Ω–∏ –æ–±—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
4. ‚è∞ –£—á—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
5. üéØ –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –∏ –∑–æ–Ω—ã
6. üí° –î–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏

–¢–†–ï–ë–£–Æ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –¢–û–ß–ù–û–°–¢–ò –ò –ß–ï–°–¢–ù–û–°–¢–ò –í –û–¶–ï–ù–ö–ê–•!"""

        return prompt
    
    def _parse_professional_advice(self, response: str) -> Optional[GPTAdvice]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ GPT-4.1"""
        try:
            data = json.loads(response.strip())
            
            # –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendation = data.get('recommendation', 'AVOID').upper()
            if recommendation not in ['BUY', 'WEAK_BUY', 'WAIT', 'AVOID']:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è GPT: {recommendation}, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ AVOID")
                recommendation = 'AVOID'
            
            # –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = data.get('confidence', 50)
            if not isinstance(confidence, (int, float)) or confidence < 0 or confidence > 100:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å GPT: {confidence}, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 50")
                confidence = 50
            
            reasoning = str(data.get('reasoning', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))[:1500]  # –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç
            risk_warning = str(data.get('risk_warning', ''))[:400]  # –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç
            
            # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ADX –¥–∞–Ω–Ω—ã—Ö
            calculated_adx = data.get('calculated_adx')
            calculated_plus_di = data.get('calculated_plus_di') 
            calculated_minus_di = data.get('calculated_minus_di')
            
            # –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ADX
            if calculated_adx is not None:
                try:
                    calculated_adx = float(calculated_adx)
                    if calculated_adx < 0 or calculated_adx > 100:
                        logger.warning(f"ADX –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {calculated_adx}")
                        calculated_adx = None
                except (ValueError, TypeError):
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ADX: {calculated_adx}")
                    calculated_adx = None
            
            if calculated_plus_di is not None:
                try:
                    calculated_plus_di = float(calculated_plus_di)
                    if calculated_plus_di < 0 or calculated_plus_di > 100:
                        logger.warning(f"+DI –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {calculated_plus_di}")
                        calculated_plus_di = None
                except (ValueError, TypeError):
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π +DI: {calculated_plus_di}")
                    calculated_plus_di = None
                    
            if calculated_minus_di is not None:
                try:
                    calculated_minus_di = float(calculated_minus_di)
                    if calculated_minus_di < 0 or calculated_minus_di > 100:
                        logger.warning(f"-DI –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {calculated_minus_di}")
                        calculated_minus_di = None
                except (ValueError, TypeError):
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π -DI: {calculated_minus_di}")
                    calculated_minus_di = None
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            key_factors = str(data.get('key_factors', ''))[:300] if data.get('key_factors') else None
            
            # TP/SL —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            take_profit = None
            stop_loss = None
            if recommendation in ['BUY', 'WEAK_BUY']:
                tp_raw = data.get('take_profit')
                sl_raw = data.get('stop_loss')
                take_profit = str(tp_raw)[:150] if tp_raw else None
                stop_loss = str(sl_raw)[:150] if sl_raw else None
            
            # Expected levels –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
            expected_levels = None
            if recommendation in ['WAIT', 'AVOID']:
                el_raw = data.get('expected_levels')
                expected_levels = str(el_raw)[:400] if el_raw else None
            
            timeframe_raw = data.get('timeframe')
            timeframe = str(timeframe_raw)[:200] if timeframe_raw else None
            
            advice = GPTAdvice(
                recommendation=recommendation,
                confidence=int(confidence),
                reasoning=reasoning,
                risk_warning=risk_warning,
                # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ ADX –¥–∞–Ω–Ω—ã–µ
                calculated_adx=calculated_adx,
                calculated_plus_di=calculated_plus_di,
                calculated_minus_di=calculated_minus_di,
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                key_factors=key_factors,
                take_profit=take_profit,
                stop_loss=stop_loss,
                expected_levels=expected_levels,
                timeframe=timeframe
            )
            
            # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            adx_info = ""
            if calculated_adx is not None:
                adx_info = f", ADX: {calculated_adx:.1f}"
                if calculated_plus_di is not None and calculated_minus_di is not None:
                    adx_info += f" (+DI: {calculated_plus_di:.1f}, -DI: {calculated_minus_di:.1f})"
            
            logger.info(f"üéØ GPT-4.1 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {recommendation} ({confidence}%){adx_info}")
            
            return advice
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç GPT-4.1: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç GPT-4.1: {response[:300]}...")
            return None
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ GPT-4.1: {e}")
            return None
    
    async def _call_openai_api(self, prompt: str, system_prompt: str = None) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenAI API —Å GPT-4.1 –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        if system_prompt is None:
            system_prompt = self.get_system_prompt('SBER')
        
        payload = {
            "model": "gpt-4.1",  # –û–ë–ù–û–í–õ–ï–ù–û –Ω–∞ GPT-4.1
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.05,  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨ (—Å–Ω–∏–∂–µ–Ω–æ —Å 0.2)
            "max_tokens": 2000,   # –£–í–ï–õ–ò–ß–ï–ù–û –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            "top_p": 0.9,        # –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è –±–æ–ª–µ–µ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            "frequency_penalty": 0.1,  # –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
            "presence_penalty": 0.1,   # –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            "response_format": {"type": "json_object"}
        }
        
        timeout = aiohttp.ClientTimeout(total=45)  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è GPT-4.1
        
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
                        usage = data.get('usage', {})
                        prompt_tokens = usage.get('prompt_tokens', 0)
                        completion_tokens = usage.get('completion_tokens', 0)
                        total_tokens = usage.get('total_tokens', 0)
                        
                        logger.info(f"‚úÖ GPT-4.1 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω (—Ç–æ–∫–µ–Ω—ã: {prompt_tokens}+{completion_tokens}={total_tokens})")
                        return content
                    elif response.status == 429:
                        logger.warning("‚ö†Ô∏è Rate limit OpenAI API GPT-4.1")
                        return None
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå OpenAI API GPT-4.1 –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI GPT-4.1")
            return None
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ OpenAI API GPT-4.1: {e}")
            return None
    
    def format_advice_for_telegram(self, advice: GPTAdvice, symbol: str = 'SBER') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ GPT-4.1 –¥–ª—è Telegram"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        rec_emoji = {
            'BUY': 'üöÄ',
            'WEAK_BUY': '‚ö°',
            'WAIT': '‚è≥', 
            'AVOID': '‚õî'
        }
        
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if advice.confidence >= 85:
            confidence_text = "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            confidence_emoji = 'üü¢'
        elif advice.confidence >= 70:
            confidence_text = "–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            confidence_emoji = 'üü¢'
        elif advice.confidence >= 55:
            confidence_text = "—É–º–µ—Ä–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"  
            confidence_emoji = 'üü°'
        elif advice.confidence >= 40:
            confidence_text = "–Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            confidence_emoji = 'üü†'
        else:
            confidence_text = "–æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            confidence_emoji = 'üî¥'
        
        result = f"""
ü§ñ <b>GPT-4.1 –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó {symbol}:</b>
{rec_emoji.get(advice.recommendation, '‚ùì')} <b>{advice.recommendation}</b> | {confidence_emoji} {confidence_text} ({advice.confidence}%)"""

        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–µ—à–µ–Ω–∏—è
        if advice.key_factors:
            result += f"""

üéØ <b>–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</b> {advice.key_factors}"""

        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ ADX –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã
        if advice.calculated_adx is not None:
            adx_status = "üü¢ –°–∏–ª—å–Ω—ã–π" if advice.calculated_adx > 25 else "üî¥ –°–ª–∞–±—ã–π"
            
            result += f"""

üìä <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ADX/DI:</b>
‚Ä¢ <b>ADX:</b> {advice.calculated_adx:.1f} {adx_status} —Ç—Ä–µ–Ω–¥"""
            
            if advice.calculated_plus_di is not None and advice.calculated_minus_di is not None:
                di_diff = advice.calculated_plus_di - advice.calculated_minus_di
                di_status = "üü¢ –í–æ—Å—Ö–æ–¥—è—â–∏–π" if di_diff > 1 else "üî¥ –ù–∏—Å—Ö–æ–¥—è—â–∏–π"
                result += f"""
‚Ä¢ <b>+DI:</b> {advice.calculated_plus_di:.1f} | <b>-DI:</b> {advice.calculated_minus_di:.1f}
‚Ä¢ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {di_status} (—Ä–∞–∑–Ω–∏—Ü–∞: {di_diff:+.1f})"""

        result += f"""

üí° <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b> {advice.reasoning}"""
        
        # TP/SL –¥–ª—è –ø–æ–∫—É–ø–æ–∫
        if advice.recommendation in ['BUY', 'WEAK_BUY']:
            if advice.take_profit:
                result += f"\nüéØ <b>Take Profit:</b> {advice.take_profit}"
            if advice.stop_loss:
                result += f"\nüõë <b>Stop Loss:</b> {advice.stop_loss}"
            if advice.timeframe:
                result += f"\n‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç:</b> {advice.timeframe}"
        
        # –£—Ä–æ–≤–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        elif advice.recommendation in ['WAIT', 'AVOID'] and advice.expected_levels:
            result += f"\nüìä <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É—Ä–æ–≤–Ω–∏:</b> {advice.expected_levels}"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
        if advice.risk_warning:
            result += f"\n\n‚ö†Ô∏è <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤:</b> {advice.risk_warning}"
        
        result += f"\n\n<i>ü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω GPT-4.1 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é</i>"
        
        return result
