# src/gpt_analyzer.py - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging
import aiohttp
import json
import asyncio
import numpy as np
import pandas as pd
from typing import Dict, Optional, List
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class GPTAdvice:
    """–°–æ–≤–µ—Ç –æ—Ç GPT –ø–æ —Å–∏–≥–Ω–∞–ª—É"""
    recommendation: str  # "BUY", "AVOID", "WEAK_BUY", "WAIT"
    confidence: int      # 0-100%
    reasoning: str       # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
    risk_warning: str    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
    take_profit: Optional[str] = None    # –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
    stop_loss: Optional[str] = None      # –°—Ç–æ–ø-–ª–æ—Å—Å
    expected_levels: Optional[str] = None # –û–∂–∏–¥–∞–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏
    timeframe: Optional[str] = None      # –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç

class GPTMarketAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT"""
    
    def __init__(self, openai_api_key: str):
        self.api_key = openai_api_key
        self.base_url = "https://api.openai.com/v1/chat/completions"
        
        self.system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –∞–∫—Ü–∏–π —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –°–±–µ—Ä–±–∞–Ω–∫–æ–º.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –î–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ SBER —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è –ó–ê–†–ê–ë–û–¢–ö–ê.

–ü–†–ò–ù–¶–ò–ü–´ –ê–ù–ê–õ–ò–ó–ê:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ü–û–õ–ù–£–Æ –∫–∞—Ä—Ç–∏–Ω—É: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã + –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ + —É—Ä–æ–≤–Ω–∏
- –û–ø—Ä–µ–¥–µ–ª—è–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø–æ —Å–≤–µ—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º
- –î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ TP/SL –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–∫—É–ø–æ–∫ (BUY/WEAK_BUY)
- –î–ª—è WAIT/AVOID —É–∫–∞–∑—ã–≤–∞–π –∫–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏/–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∂–¥–∞—Ç—å
- –£—á–∏—Ç—ã–≤–∞–π –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ –∏ –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω—ã
- –ë—É–¥—å –ß–ï–°–¢–ù–´–ú - –µ—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ—è—Å–Ω–∞—è, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- BUY: —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å (80-100%) + –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ TP/SL
- WEAK_BUY: –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ (60-79%) + –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–µ TP/SL  
- WAIT: –∂–¥–∞—Ç—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π (40-59%) + –∫–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –∂–¥–µ–º (–ë–ï–ó TP/SL!)
- AVOID: —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å (<40%) + –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É (–ë–ï–ó TP/SL!)

–ö–û–ù–¢–ï–ö–°–¢ SBER:
- –û–±—ã—á–Ω–æ —Ç–æ—Ä–≥—É–µ—Ç—Å—è 280-330 —Ä—É–±–ª–µ–π (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-5% –≤ –¥–µ–Ω—å)
- –ü—Ä–µ–º–∏—É–º –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤: 11:00-16:00 –ú–°–ö
- –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞: –Ω–æ–≤–æ—Å—Ç–∏ –¶–ë, —Å–∞–Ω–∫—Ü–∏–∏, –Ω–µ—Ñ—Ç—å, –¥–∏–≤–∏–¥–µ–Ω–¥—ã
- –õ–∏–∫–≤–∏–¥–Ω–∞—è –∞–∫—Ü–∏—è —Å —É–∑–∫–∏–º —Å–ø—Ä–µ–¥–æ–º

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã —É—Ä–æ–≤–Ω–µ–π (–Ω–µ "–æ–∫–æ–ª–æ", –∞ —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
- –õ–æ–≥–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è TP/SL —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏–π

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."""

    async def analyze_signal(self, signal_data: Dict, candles_data: Optional[List] = None, is_manual_check: bool = False) -> Optional[GPTAdvice]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é GPT —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            prompt = self._create_enhanced_prompt(signal_data, candles_data, is_manual_check)
            response = await self._call_openai_api(prompt)
            
            if response:
                return self._parse_enhanced_advice(response)
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GPT: {e}")
            return None
    
    def _analyze_price_levels(self, candles_data: List) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        if not candles_data or len(candles_data) < 20:
            return {}
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π
        recent_candles = candles_data[-50:] if len(candles_data) > 50 else candles_data
        
        highs = [candle['high'] for candle in recent_candles]
        lows = [candle['low'] for candle in recent_candles]
        closes = [candle['close'] for candle in recent_candles]
        volumes = [candle['volume'] for candle in recent_candles]
        
        current_price = closes[-1]
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π
        # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è - –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã
        resistances = []
        for i in range(2, len(highs) - 2):
            if (highs[i] > highs[i-1] and highs[i] > highs[i-2] and 
                highs[i] > highs[i+1] and highs[i] > highs[i+2]):
                if highs[i] > current_price:  # –¢–æ–ª—å–∫–æ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    resistances.append(highs[i])
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∏ - –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã  
        supports = []
        for i in range(2, len(lows) - 2):
            if (lows[i] < lows[i-1] and lows[i] < lows[i-2] and 
                lows[i] < lows[i+1] and lows[i] < lows[i+2]):
                if lows[i] < current_price:  # –¢–æ–ª—å–∫–æ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    supports.append(lows[i])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–µ
        resistances.sort()
        supports.sort(reverse=True)
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥
        price_changes = [abs(closes[i] - closes[i-1]) / closes[i-1] * 100 for i in range(1, len(closes))]
        avg_volatility = np.mean(price_changes) if price_changes else 2.0
        
        # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
        avg_volume = np.mean(volumes) if volumes else 0
        recent_volume = np.mean(volumes[-5:]) if len(volumes) >= 5 else avg_volume
        
        return {
            'current_price': current_price,
            'nearest_resistance': resistances[0] if resistances else None,
            'nearest_support': supports[0] if supports else None,
            'all_resistances': resistances[:3],  # –¢–æ–ø-3 –±–ª–∏–∂–∞–π—à–∏—Ö
            'all_supports': supports[:3],
            'avg_volatility': round(avg_volatility, 2),
            'volume_ratio': round(recent_volume / avg_volume, 2) if avg_volume > 0 else 1.0,
            'price_range_5d': {'high': max(highs[-25:]), 'low': min(lows[-25:])} if len(highs) >= 25 else None
        }
    
    def _create_enhanced_prompt(self, signal_data: Dict, candles_data: Optional[List], is_manual_check: bool) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        levels_analysis = {}
        candles_info = ""
        
        if candles_data:
            levels_analysis = self._analyze_price_levels(candles_data)
            
            if levels_analysis:
                candles_info = f"""
üìà –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–ï–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π):
‚Ä¢ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {levels_analysis.get('nearest_resistance', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')} ‚ÇΩ
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {levels_analysis.get('nearest_support', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')} ‚ÇΩ
‚Ä¢ –í—Å–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: {levels_analysis.get('all_resistances', [])}
‚Ä¢ –í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {levels_analysis.get('all_supports', [])}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {levels_analysis.get('avg_volatility', 0)}% –≤ –¥–µ–Ω—å
‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: {levels_analysis.get('volume_ratio', 1.0)} (—Ç–µ–∫—É—â–∏–π/—Å—Ä–µ–¥–Ω–∏–π)
‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω 5 –¥–Ω–µ–π: {levels_analysis.get('price_range_5d', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        conditions_met = signal_data.get('conditions_met', True)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        adx_value = signal_data['adx']
        if adx_value > 40:
            adx_strength = "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
            adx_risk = "–≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç"
        elif adx_value > 25:
            adx_strength = "—Å–∏–ª—å–Ω—ã–π" 
            adx_risk = "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥"
        else:
            adx_strength = "–°–õ–ê–ë–´–ô"
            adx_risk = "—Ç—Ä–µ–Ω–¥ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω"
        
        di_difference = signal_data['plus_di'] - signal_data['minus_di']
        if di_difference > 15:
            di_strength = "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ"
        elif di_difference > 10:
            di_strength = "—Å–∏–ª—å–Ω–æ–µ"
        elif di_difference > 5:
            di_strength = "—Å—Ä–µ–¥–Ω–µ–µ"
        elif di_difference > 1:
            di_strength = "—Å–ª–∞–±–æ–µ"
        else:
            di_strength = "–û–¢–°–£–¢–°–¢–í–£–ï–¢"
        
        price_above_ema_percent = ((signal_data['price'] / signal_data['ema20'] - 1) * 100)
        
        current_hour = datetime.now().hour
        if 11 <= current_hour <= 16:
            session_quality = "–ø—Ä–µ–º–∏—É–º –≤—Ä–µ–º—è"
        elif 10 <= current_hour <= 18:
            session_quality = "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"
        else:
            session_quality = "–ø–ª–æ—Ö–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Ö–æ–¥–∞"
        
        signal_type = "–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" if is_manual_check else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ª–æ–≤–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if conditions_met:
            strategy_status = "‚úÖ –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´"
            analysis_focus = "–î–ê–¢–¨ –ö–û–ù–ö–†–ï–¢–ù–´–ï TP/SL –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
        else:
            strategy_status = "‚ùå –£–°–õ–û–í–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–´"
            analysis_focus = "–£–ö–ê–ó–ê–¢–¨ –∫–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏/–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∂–¥–∞—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ (–ë–ï–ó TP/SL)"
        
        prompt = f"""–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–û–ô –°–ò–¢–£–ê–¶–ò–ò SBER:

üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:
‚Ä¢ –¶–µ–Ω–∞: {signal_data['price']:.2f} ‚ÇΩ
‚Ä¢ EMA20: {signal_data['ema20']:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ {'–≤—ã—à–µ' if price_above_ema_percent > 0 else '–Ω–∏–∂–µ'} –Ω–∞ {abs(price_above_ema_percent):.1f}%)
‚Ä¢ ADX: {adx_value:.1f} ({adx_strength} —Ç—Ä–µ–Ω–¥, {adx_risk})
‚Ä¢ +DI: {signal_data['plus_di']:.1f} vs -DI: {signal_data['minus_di']:.1f}
‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ DI: {di_difference:.1f} ({di_strength} –¥–æ–º–∏–Ω–∞—Ü–∏—è){candles_info}

‚è∞ –ö–û–ù–¢–ï–ö–°–¢:
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M –ú–°–ö')} ({session_quality})
‚Ä¢ –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {signal_type}
‚Ä¢ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_status}

üéØ –ì–õ–ê–í–ù–ê–Ø –ó–ê–î–ê–ß–ê: {analysis_focus}

–í–ê–ñ–ù–û: TP/SL —É–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å BUY –∏–ª–∏ WEAK_BUY!

–û—Ç–≤–µ—Ç—å –≤ JSON:
{{
  "recommendation": "BUY/WEAK_BUY/WAIT/AVOID",
  "confidence": —á–∏—Å–ª–æ_0_100,
  "reasoning": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω—è–º–∏ (–¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤)",
  "take_profit": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ TP —Ç–æ–ª—å–∫–æ –¥–ª—è BUY/WEAK_BUY –∏–ª–∏ null",
  "stop_loss": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ SL —Ç–æ–ª—å–∫–æ –¥–ª—è BUY/WEAK_BUY –∏–ª–∏ null", 
  "expected_levels": "—á—Ç–æ –∂–¥–∞—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è WAIT/AVOID) –∏–ª–∏ null",
  "timeframe": "–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç",
  "risk_warning": "–≥–ª–∞–≤–Ω—ã–µ —Ä–∏—Å–∫–∏"
}}"""
        
        return prompt
    
    async def _call_openai_api(self, prompt: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenAI API —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gpt-4o-mini",  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
            "max_tokens": 1000,   # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            "response_format": {"type": "json_object"}
        }
        
        timeout = aiohttp.ClientTimeout(total=25)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
        
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']
                        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT")
                        return content
                    elif response.status == 429:
                        logger.warning("‚ö†Ô∏è Rate limit OpenAI API")
                        return None
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå OpenAI API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI (25s)")
            return None
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")
            return None
    
    def _parse_enhanced_advice(self, response: str) -> Optional[GPTAdvice]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ GPT"""
        try:
            data = json.loads(response.strip())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            recommendation = data.get('recommendation', 'AVOID').upper()
            if recommendation not in ['BUY', 'WEAK_BUY', 'WAIT', 'AVOID']:
                recommendation = 'AVOID'
            
            confidence = data.get('confidence', 50)
            if not isinstance(confidence, (int, float)) or confidence < 0 or confidence > 100:
                confidence = 50
            
            # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è reasoning –¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤
            reasoning = str(data.get('reasoning', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))[:600]
            risk_warning = str(data.get('risk_warning', ''))[:300]
            
            # TP/SL —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
            take_profit = None
            stop_loss = None
            if recommendation in ['BUY', 'WEAK_BUY']:
                take_profit = str(data.get('take_profit', ''))[:100] if data.get('take_profit') else None
                stop_loss = str(data.get('stop_loss', ''))[:100] if data.get('stop_loss') else None
            
            # Expected levels —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
            expected_levels = None
            if recommendation in ['WAIT', 'AVOID']:
                expected_levels = str(data.get('expected_levels', ''))[:300] if data.get('expected_levels') else None
            
            timeframe = str(data.get('timeframe', ''))[:150] if data.get('timeframe') else None
            
            return GPTAdvice(
                recommendation=recommendation,
                confidence=int(confidence),
                reasoning=reasoning,
                risk_warning=risk_warning,
                take_profit=take_profit,
                stop_loss=stop_loss,
                expected_levels=expected_levels,
                timeframe=timeframe
            )
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç GPT: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç: {response[:500]}...")
            return None
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GPT –æ—Ç–≤–µ—Ç–∞: {e}")
            return None
    
    def format_advice_for_telegram(self, advice: GPTAdvice) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ GPT –¥–ª—è Telegram - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        rec_emoji = {
            'BUY': 'üöÄ',
            'WEAK_BUY': '‚ö°',
            'WAIT': '‚è≥', 
            'AVOID': '‚õî'
        }
        
        # –û—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏–π –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        if advice.confidence >= 80:
            confidence_text = "–æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
            confidence_emoji = 'üü¢'
        elif advice.confidence >= 60:
            confidence_text = "—Å—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è"
            confidence_emoji = 'üü°'
        else:
            confidence_text = "–ø–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è"
            confidence_emoji = 'üî¥'
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        result = f"""
üê± <b>–†–ï–í–£–©–ò–ô –ö–û–¢–Å–ù–û–ö –°–û–û–ë–©–ê–ï–¢:</b>
{rec_emoji.get(advice.recommendation, '‚ùì')} <b>{advice.recommendation}</b> | {confidence_emoji} {confidence_text}

üí° <b>–ê–Ω–∞–ª–∏–∑:</b> {advice.reasoning}"""
        
        # TP/SL –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–∫—É–ø–æ–∫
        if advice.recommendation in ['BUY', 'WEAK_BUY']:
            if advice.take_profit:
                result += f"\nüéØ <b>Take Profit:</b> {advice.take_profit}"
            if advice.stop_loss:
                result += f"\nüõë <b>Stop Loss:</b> {advice.stop_loss}"
        
        # Expected levels –¢–û–õ–¨–ö–û –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
        elif advice.recommendation in ['WAIT', 'AVOID'] and advice.expected_levels:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ JSON-–ø–æ–¥–æ–±–Ω–æ–π
            if advice.expected_levels.strip().startswith('{') and advice.expected_levels.strip().endswith('}'):
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                    levels_data = json.loads(advice.expected_levels)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
                    levels_text = []
                    if 'breakout_level' in levels_data:
                        levels_text.append(f"–ø—Ä–æ–±–æ–π {levels_data['breakout_level']} ‚ÇΩ")
                    if 'support_level' in levels_data:
                        levels_text.append(f"–ø–æ–¥–¥–µ—Ä–∂–∫–∞ {levels_data['support_level']} ‚ÇΩ")
                    if 'resistance_level' in levels_data:
                        levels_text.append(f"—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ {levels_data['resistance_level']} ‚ÇΩ")
                    
                    if levels_text:
                        result += f"\nüìä <b>–ñ–¥–∞—Ç—å:</b> {', '.join(levels_text)}"
                    else:
                        result += f"\nüìä <b>–ñ–¥–∞—Ç—å:</b> {advice.expected_levels}"
                        
                except (json.JSONDecodeError, KeyError):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
                    result += f"\nüìä <b>–ñ–¥–∞—Ç—å:</b> {advice.expected_levels}"
            else:
                # –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
                result += f"\nüìä <b>–ñ–¥–∞—Ç—å:</b> {advice.expected_levels}"
        
        # –£–ë–†–ê–õ–ò: –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –∏ —Ä–∏—Å–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        # if advice.timeframe:
        #     result += f"\n‚è±Ô∏è <b>–ì–æ—Ä–∏–∑–æ–Ω—Ç:</b> {advice.timeframe}"
        # if advice.risk_warning:
        #     result += f"\n‚ö†Ô∏è <b>–†–∏—Å–∫:</b> {advice.risk_warning}"
        
        return result
