# src/gpt_analyzer.py - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
import logging
import aiohttp
import json
import asyncio
import numpy as np
import pandas as pd
from typing import Dict, Optional, List
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class GPTAdvice:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç GPT —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    recommendation: str  # "BUY", "AVOID", "WEAK_BUY", "WAIT"
    confidence: int      # 0-100%
    reasoning: str       # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    risk_warning: str    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
    
    # ADX –∫–∞–∫ –æ–¥–∏–Ω –∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    calculated_adx: Optional[float] = None        
    calculated_plus_di: Optional[float] = None   
    calculated_minus_di: Optional[float] = None   
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    take_profit: Optional[str] = None
    stop_loss: Optional[str] = None
    expected_levels: Optional[str] = None
    timeframe: Optional[str] = None
    key_factors: Optional[str] = None  # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–µ—à–µ–Ω–∏—è

class GPTMarketAnalyzer:
    """GPT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫–æ –≤—Å–µ–º —Ñ–∞–∫—Ç–æ—Ä–∞–º"""
    
    def __init__(self, openai_api_key: str):
        self.api_key = openai_api_key
        self.base_url = "https://api.openai.com/v1/chat/completions"
        
        # –ù–û–í–´–ô –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        self.base_system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≥–æ–ª—É–±—ã–º–∏ —Ñ–∏—à–∫–∞–º–∏ –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–¢–í–û–Ø –†–û–õ–¨: –ü—Ä–æ–≤–µ—Å—Ç–∏ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {symbol}.

–ê–ù–ê–õ–ò–ó–ò–†–£–ô –í–°–ï –§–ê–ö–¢–û–†–´:

1. üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:
   - EMA20 (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä)
   - ADX/DI (—Å–∏–ª–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞) - –†–ê–°–°–ß–ò–¢–ê–ô –∏–∑ —Å–≤–µ—á–µ–π
   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
   - –ü–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ

2. üìà –¶–ï–ù–û–í–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê:
   - –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (1—á, 4—á, 1–¥)
   - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
   - –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
   - –ü—Ä–æ–±–æ–∏ —É—Ä–æ–≤–Ω–µ–π

3. üîä –û–ë–™–ï–ú–´:
   - –¢–µ–∫—É—â–∏–π vs —Å—Ä–µ–¥–Ω–∏–π
   - –¢—Ä–µ–Ω–¥ –æ–±—ä–µ–º–æ–≤  
   - –í—Å–ø–ª–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   - –ö–∞—á–µ—Å—Ç–≤–æ –¥–≤–∏–∂–µ–Ω–∏—è

4. ‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ö–û–ù–¢–ï–ö–°–¢:
   - –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è (main/evening/weekend)
   - –ö–∞—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ (premium/normal/–Ω–∏–∑–∫–æ–µ)
   - –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å

5. üéØ –†–´–ù–û–ß–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
   - –ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   - –ë–ª–∏–∑–æ—Å—Ç—å –∫ –∫–ª—é—á–µ–≤—ã–º —É—Ä–æ–≤–Ω—è–º
   - –û–±—â–∏–π –Ω–∞—Å—Ç—Ä–æ–π —Ä—ã–Ω–∫–∞

{ticker_specific_context}

–ü–†–ò–ù–¶–ò–ü–´ –†–ï–®–ï–ù–ò–Ø:
- BUY: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã, —Ä–∏—Å–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã
- WEAK_BUY: –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã, –Ω–æ –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ç–∏–≤–∞  
- WAIT: –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å, –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
- AVOID: –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏–ª–∏ –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - –°–¢–†–û–ì–û JSON:
{{
  "calculated_adx": —á–∏—Å–ª–æ_–∏–ª–∏_null (–µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å),
  "calculated_plus_di": —á–∏—Å–ª–æ_–∏–ª–∏_null,
  "calculated_minus_di": —á–∏—Å–ª–æ_–∏–ª–∏_null,
  "recommendation": "BUY/WEAK_BUY/WAIT/AVOID",
  "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
  "reasoning": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
  "key_factors": "3-4 –≥–ª–∞–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è",
  "take_profit": "—É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ null",
  "stop_loss": "—É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ null", 
  "expected_levels": "—á—Ç–æ –∂–¥–∞—Ç—å –∏–ª–∏ null",
  "timeframe": "–≥–æ—Ä–∏–∑–æ–Ω—Ç —Å–¥–µ–ª–∫–∏",
  "risk_warning": "–æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏"
}}

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï —Ñ–∞–∫—Ç–æ—Ä—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ. ADX - –≤–∞–∂–µ–Ω, –Ω–æ –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π!"""

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.ticker_contexts = {
            'SBER': """
–ö–û–ù–¢–ï–ö–°–¢ SBER:
- –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: 280-330‚ÇΩ, —Ç–∏–ø–∏—á–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-5%
- –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: 11:00-16:00 –ú–°–ö (–≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)
- –ö–ª—é—á–µ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã: –¶–ë –†–§, —Å–∞–Ω–∫—Ü–∏–∏, –Ω–µ—Ñ—Ç—å, –¥–∏–≤–∏–¥–µ–Ω–¥—ã
- –¢–µ—Ö—É—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ~275-285‚ÇΩ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ~320-340‚ÇΩ
- –û–±—ä–µ–º—ã: –Ω–æ—Ä–º–∞ 1-3–ú/—á–∞—Å, –≤—Å–ø–ª–µ—Å–∫–∏ 5–ú+ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –ª–∏–¥–µ—Ä —Å–µ–∫—Ç–æ—Ä–∞, –≤—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ä—É–±–ª–µ–º""",

            'GAZP': """
–ö–û–ù–¢–ï–ö–°–¢ GAZP:
- –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: 120-180‚ÇΩ, –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 3-7%
- –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: 11:00-16:00 –ú–°–ö  
- –ö–ª—é—á–µ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã: –≥–∞–∑ –≤ –ï–≤—Ä–æ–ø–µ, —Å–∞–Ω–∫—Ü–∏–∏, –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞, —Å–µ–∑–æ–Ω
- –¢–µ—Ö—É—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ~125-135‚ÇΩ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ~170-185‚ÇΩ
- –û–±—ä–µ–º—ã: —Å—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, —Ä–µ–∑–∫–∏–µ –≤—Å–ø–ª–µ—Å–∫–∏
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —Å–∏–ª—å–Ω–∞—è –≤–Ω–µ—à–Ω—è—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å""",

            'LKOH': """
–ö–û–ù–¢–ï–ö–°–¢ LKOH:
- –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: 6000-8000‚ÇΩ, —É–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-6%
- –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: 11:00-16:00 –ú–°–ö
- –ö–ª—é—á–µ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã: –Ω–µ—Ñ—Ç—å Brent, —Å–∞–Ω–∫—Ü–∏–∏, —Ä—É–±–ª—å, –¥–∏–≤–∏–¥–µ–Ω–¥—ã  
- –¢–µ—Ö—É—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ~6000-6200‚ÇΩ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ~7500-8000‚ÇΩ
- –û–±—ä–µ–º—ã: –Ω–∏–∂–µ —á–µ–º —É SBER, —à–∏—Ä–æ–∫–∏–µ —Å–ø—Ä–µ–¥—ã
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –Ω–µ—Ñ—Ç—è–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä""",

            'DEFAULT': """
–û–ë–©–ò–ï –ü–†–ò–ù–¶–ò–ü–´:
- –£—á–∏—Ç—ã–≤–∞–π –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π —Ä—ã–Ω–∫–∞
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–µ–º–∏—É–º-–≤—Ä–µ–º—è: 11:00-16:00 –ú–°–ö"""
        }

    def get_system_prompt(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        context = self.ticker_contexts.get(symbol, self.ticker_contexts['DEFAULT'])
        return self.base_system_prompt.format(
            symbol=symbol,
            ticker_specific_context=context
        )

    async def analyze_signal(self, signal_data: Dict, candles_data: Optional[List] = None, 
                           is_manual_check: bool = False, symbol: str = 'SBER') -> Optional[GPTAdvice]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ GPT"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = self.get_system_prompt(symbol)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –í–°–ï–ú–ò —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏
            prompt = self._create_comprehensive_prompt(signal_data, candles_data, is_manual_check, symbol)
            
            response = await self._call_openai_api(prompt, system_prompt)
            
            if response:
                return self._parse_comprehensive_advice(response)
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    def _create_comprehensive_prompt(self, signal_data: Dict, candles_data: Optional[List], 
                                   is_manual_check: bool, symbol: str = 'SBER') -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –í–°–ï–ú–ò —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏"""
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–≤–µ—á–∏ –¥–æ 50 –º–∞–∫—Å–∏–º—É–º
        if candles_data and len(candles_data) > 50:
            candles_data = candles_data[-50:]
            logger.info(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ 50 —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö
        if not candles_data or len(candles_data) < 20:
            return f"""–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–• –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}:
–ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(candles_data) if candles_data else 0}
–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: 20

{{
  "calculated_adx": null,
  "calculated_plus_di": null, 
  "calculated_minus_di": null,
  "recommendation": "WAIT",
  "confidence": 20,
  "reasoning": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
  "key_factors": "–ú–∞–ª–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
  "risk_warning": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã"
}}"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ö–û–ú–ü–ê–ö–¢–ù–£–Æ —Ç–∞–±–ª–∏—Ü—É —Å–≤–µ—á–µ–π (–º–∞–∫—Å–∏–º—É–º 50)
        candles_table = "‚Ññ | –í–†–ï–ú–Ø   | OPEN   | HIGH   | LOW    | CLOSE  | VOLUME\n"
        candles_table += "--|---------|--------|--------|--------|--------|---------\n"
        
        for i, candle in enumerate(candles_data):
            timestamp = candle.get('timestamp', datetime.now())
            if hasattr(timestamp, 'strftime'):
                time_str = timestamp.strftime('%d.%m %H:%M')
            else:
                time_str = str(timestamp)[:11]
            
            candles_table += f"{i+1:2d}|{time_str}|{candle['open']:7.2f}|{candle['high']:7.2f}|{candle['low']:7.2f}|{candle['close']:7.2f}|{candle['volume']:8,}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        current_price = signal_data.get('price', 0)
        current_ema20 = signal_data.get('ema20', 0)
        session = signal_data.get('trading_session', 'unknown')
        time_quality = signal_data.get('time_quality', 'unknown')
        
        # –û–±—ä–µ–º—ã
        volume_info = ""
        if 'volume_analysis' in signal_data:
            vol = signal_data['volume_analysis']
            volume_info = f"""
üîä –û–ë–™–ï–ú–´:
‚Ä¢ –¢–µ–∫—É—â–∏–π: {vol.get('current_volume', 0):,}
‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É: {vol.get('volume_ratio', 1.0):.1f}x
‚Ä¢ –¢—Ä–µ–Ω–¥: {vol.get('volume_trend', 'unknown')}"""

        # –¶–µ–Ω–æ–≤–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
        movement_info = ""
        changes = []
        for key in ['change_1h', 'change_4h', 'change_1d']:
            if key in signal_data:
                period = key.replace('change_', '').upper()
                changes.append(f"{period}: {signal_data[key]:+.1f}%")
        
        if 'volatility_5d' in signal_data:
            changes.append(f"Vol5–¥: {signal_data['volatility_5d']:.1f}%")
        
        if changes:
            movement_info = f"\nüìà –î–ò–ù–ê–ú–ò–ö–ê: " + " | ".join(changes)

        # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        levels_info = ""
        if 'price_levels' in signal_data and signal_data['price_levels']:
            levels = signal_data['price_levels']
            resistance = levels.get('nearest_resistance')
            support = levels.get('nearest_support')
            if resistance or support:
                levels_info = f"""
üìä –£–†–û–í–ù–ò:
‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {resistance:.2f}‚ÇΩ ({((resistance/current_price-1)*100):+.1f}%)" if resistance else "–Ω–µ—Ç"}
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {support:.2f}‚ÇΩ ({((support/current_price-1)*100):+.1f}%)" if support else "–Ω–µ—Ç"}
‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {levels.get('recent_low', 0):.2f} - {levels.get('recent_high', 0):.2f}‚ÇΩ"""

        signal_type = "–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" if is_manual_check else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        check_peak = signal_data.get('check_peak', False)
        task_description = "–ü–†–û–í–ï–†–ò–¢–¨ –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞" if check_peak else "–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = f"""–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó {symbol} - –í–°–ï –§–ê–ö–¢–û–†–´:

üí∞ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:
‚Ä¢ –¶–µ–Ω–∞: {current_price:.2f}‚ÇΩ
‚Ä¢ EMA20: {current_ema20:.2f}‚ÇΩ ({'‚úÖ–≤—ã—à–µ' if current_price > current_ema20 else '‚ùå–Ω–∏–∂–µ'})
‚Ä¢ –ü—Ä–æ–±–æ–π EMA20: {((current_price/current_ema20-1)*100):+.2f}%{levels_info}{volume_info}{movement_info}

‚è∞ –ö–û–ù–¢–ï–ö–°–¢:
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M –ú–°–ö')}
‚Ä¢ –°–µ—Å—Å–∏—è: {session} (–∫–∞—á–µ—Å—Ç–≤–æ: {time_quality})
‚Ä¢ –ê–Ω–∞–ª–∏–∑: {signal_type}

üìä –°–í–ï–ß–ù–´–ï –î–ê–ù–ù–´–ï ({len(candles_data)} —Å–≤–µ—á–µ–π):
{candles_table}

üéØ –ó–ê–î–ê–ß–ê: {task_description}

–ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô –í–°–ï –§–ê–ö–¢–û–†–´:
1. üìä –†–∞—Å—Å—á–∏—Ç–∞–π ADX/DI –∏–∑ —Å–≤–µ—á–µ–π (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
2. üìà –û—Ü–µ–Ω–∏ —Ü–µ–Ω–æ–≤—É—é –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã  
3. üîä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—ä–µ–º—ã –∏ –∏—Ö –∫–∞—á–µ—Å—Ç–≤–æ
4. ‚è∞ –£—á—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
5. üéØ –û—Ü–µ–Ω–∏ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∫–ª—é—á–µ–≤—ã–º —É—Ä–æ–≤–Ω—è–º
6. üí° –î–∞–π –≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é

–ù–ï –û–ì–†–ê–ù–ò–ß–ò–í–ê–ô–°–Ø —Ç–æ–ª—å–∫–æ ADX - —ç—Ç–æ –ª–∏—à—å –æ–¥–∏–Ω –∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤!"""

        return prompt
    
    def _parse_comprehensive_advice(self, response: str) -> Optional[GPTAdvice]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ GPT"""
        try:
            data = json.loads(response.strip())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            recommendation = data.get('recommendation', 'AVOID').upper()
            if recommendation not in ['BUY', 'WEAK_BUY', 'WAIT', 'AVOID']:
                recommendation = 'AVOID'
            
            confidence = data.get('confidence', 50)
            if not isinstance(confidence, (int, float)) or confidence < 0 or confidence > 100:
                confidence = 50
            
            reasoning = str(data.get('reasoning', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))[:1000]  # –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç
            risk_warning = str(data.get('risk_warning', ''))[:300]
            
            # ADX –¥–∞–Ω–Ω—ã–µ (–º–æ–≥—É—Ç –±—ã—Ç—å None)
            calculated_adx = data.get('calculated_adx')
            calculated_plus_di = data.get('calculated_plus_di') 
            calculated_minus_di = data.get('calculated_minus_di')
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è ADX –µ—Å–ª–∏ –µ—Å—Ç—å
            if calculated_adx is not None:
                try:
                    calculated_adx = float(calculated_adx)
                    if calculated_adx < 0 or calculated_adx > 100:
                        calculated_adx = None
                except (ValueError, TypeError):
                    calculated_adx = None
            
            if calculated_plus_di is not None:
                try:
                    calculated_plus_di = float(calculated_plus_di)
                    if calculated_plus_di < 0 or calculated_plus_di > 100:
                        calculated_plus_di = None
                except (ValueError, TypeError):
                    calculated_plus_di = None
                    
            if calculated_minus_di is not None:
                try:
                    calculated_minus_di = float(calculated_minus_di)
                    if calculated_minus_di < 0 or calculated_minus_di > 100:
                        calculated_minus_di = None
                except (ValueError, TypeError):
                    calculated_minus_di = None
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            key_factors = str(data.get('key_factors', ''))[:200] if data.get('key_factors') else None
            
            # TP/SL —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
            take_profit = None
            stop_loss = None
            if recommendation in ['BUY', 'WEAK_BUY']:
                take_profit = str(data.get('take_profit', ''))[:100] if data.get('take_profit') else None
                stop_loss = str(data.get('stop_loss', ''))[:100] if data.get('stop_loss') else None
            
            # Expected levels –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
            expected_levels = None
            if recommendation in ['WAIT', 'AVOID']:
                expected_levels = str(data.get('expected_levels', ''))[:300] if data.get('expected_levels') else None
            
            timeframe = str(data.get('timeframe', ''))[:150] if data.get('timeframe') else None
            
            advice = GPTAdvice(
                recommendation=recommendation,
                confidence=int(confidence),
                reasoning=reasoning,
                risk_warning=risk_warning,
                # ADX –¥–∞–Ω–Ω—ã–µ (–º–æ–≥—É—Ç –±—ã—Ç—å None)
                calculated_adx=calculated_adx,
                calculated_plus_di=calculated_plus_di,
                calculated_minus_di=calculated_minus_di,
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                key_factors=key_factors,
                take_profit=take_profit,
                stop_loss=stop_loss,
                expected_levels=expected_levels,
                timeframe=timeframe
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            adx_info = ""
            if calculated_adx is not None:
                adx_info = f", ADX: {calculated_adx:.1f}"
            
            logger.info(f"üéØ GPT –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {recommendation} ({confidence}%){adx_info}")
            
            return advice
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç GPT: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç GPT: {response[:200]}...")
            return None
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    async def _call_openai_api(self, prompt: str, system_prompt: str = None) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenAI API"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        if system_prompt is None:
            system_prompt = self.get_system_prompt('SBER')
        
        payload = {
            "model": "gpt-4o-mini",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.2,  # –ù–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—Å–∏–ª–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            "max_tokens": 1500,
            "response_format": {"type": "json_object"}
        }
        
        timeout = aiohttp.ClientTimeout(total=30)
        
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']
                        logger.info("‚úÖ GPT –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω")
                        return content
                    elif response.status == 429:
                        logger.warning("‚ö†Ô∏è Rate limit OpenAI API")
                        return None
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå OpenAI API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI")
            return None
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ OpenAI API: {e}")
            return None
    
    def format_advice_for_telegram(self, advice: GPTAdvice, symbol: str = 'SBER') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ GPT –¥–ª—è Telegram"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        rec_emoji = {
            'BUY': 'üöÄ',
            'WEAK_BUY': '‚ö°',
            'WAIT': '‚è≥', 
            'AVOID': '‚õî'
        }
        
        # –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if advice.confidence >= 80:
            confidence_text = "–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            confidence_emoji = 'üü¢'
        elif advice.confidence >= 60:
            confidence_text = "—Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"  
            confidence_emoji = 'üü°'
        else:
            confidence_text = "–Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            confidence_emoji = 'üî¥'
        
        result = f"""
ü§ñ <b>GPT –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó {symbol}:</b>
{rec_emoji.get(advice.recommendation, '‚ùì')} <b>{advice.recommendation}</b> | {confidence_emoji} {confidence_text} ({advice.confidence}%)"""

        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–µ—à–µ–Ω–∏—è
        if advice.key_factors:
            result += f"""

üéØ <b>–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</b> {advice.key_factors}"""

        # ADX –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        if advice.calculated_adx is not None:
            adx_status = "üü¢" if advice.calculated_adx > 25 else "üî¥"
            di_status = "üü¢" if (advice.calculated_plus_di or 0) > (advice.calculated_minus_di or 0) else "üî¥"
            
            result += f"""

üìä <b>ADX –∞–Ω–∞–ª–∏–∑:</b>
‚Ä¢ <b>ADX:</b> {advice.calculated_adx:.1f} {adx_status}
‚Ä¢ <b>+DI:</b> {advice.calculated_plus_di:.1f} | <b>-DI:</b> {advice.calculated_minus_di:.1f} {di_status}"""

        result += f"""

üí° <b>–ê–Ω–∞–ª–∏–∑:</b> {advice.reasoning}"""
        
        # TP/SL –¥–ª—è –ø–æ–∫—É–ø–æ–∫
        if advice.recommendation in ['BUY', 'WEAK_BUY']:
            if advice.take_profit:
                result += f"\nüéØ <b>Take Profit:</b> {advice.take_profit}"
            if advice.stop_loss:
                result += f"\nüõë <b>Stop Loss:</b> {advice.stop_loss}"
            if advice.timeframe:
                result += f"\n‚è∞ <b>–ì–æ—Ä–∏–∑–æ–Ω—Ç:</b> {advice.timeframe}"
        
        # –£—Ä–æ–≤–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        elif advice.recommendation in ['WAIT', 'AVOID'] and advice.expected_levels:
            result += f"\nüìä <b>–ñ–¥–∞—Ç—å:</b> {advice.expected_levels}"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
        if advice.risk_warning:
            result += f"\n\n‚ö†Ô∏è <b>–†–∏—Å–∫–∏:</b> {advice.risk_warning}"
        
        return result
