# src/gpt_analyzer.py
import logging
import aiohttp
import json
import asyncio
from typing import Dict, Optional
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class GPTAdvice:
    """–°–æ–≤–µ—Ç –æ—Ç GPT –ø–æ —Å–∏–≥–Ω–∞–ª—É"""
    recommendation: str  # "BUY", "AVOID", "WEAK_BUY"
    confidence: int      # 0-100%
    reasoning: str       # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
    risk_warning: str    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
    profit_target: Optional[str] = None  # –¶–µ–ª—å –ø–æ –ø—Ä–∏–±—ã–ª–∏

class GPTMarketAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT"""
    
    def __init__(self, openai_api_key: str):
        self.api_key = openai_api_key
        self.base_url = "https://api.openai.com/v1/chat/completions"
        
        self.system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –∞–∫—Ü–∏–π —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –°–±–µ—Ä–±–∞–Ω–∫–æ–º.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –î–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∏ —á–µ—Å—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é SBER –¥–ª—è –ó–ê–†–ê–ë–û–¢–ö–ê.

–ü–†–ò–ù–¶–ò–ü–´:
- –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ö–†–ê–¢–ö–û (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ reasoning)
- –ë—É–¥—å –ß–ï–°–¢–ù–´–ú - –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ–±—ä—è—Å–Ω–∏ —á—Ç–æ –Ω–µ —Ç–∞–∫
- –¶–ï–õ–¨: –ø–æ–º–æ—á—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –∞ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï —Å–∏—Ç—É–∞—Ü–∏–∏: –∏ –≥–æ—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã, –∏ –æ–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
- –£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤, —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ –∏ —Ä—ã–Ω–æ—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- BUY: —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å (80-100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏) - –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã + —Å–∏–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- WEAK_BUY: –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ (60-79%) - —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –Ω—é–∞–Ω—Å—ã
- WAIT: –∂–¥–∞—Ç—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π (40-59%) - —É—Å–ª–æ–≤–∏—è –ø–æ—á—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
- AVOID: —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å (<40%) - –ø–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è

–ö–û–ù–¢–ï–ö–°–¢ –°–ë–ï–†–ê:
- –û–±—ã—á–Ω–æ —Ç–æ—Ä–≥—É–µ—Ç—Å—è 280-330 —Ä—É–±–ª–µ–π
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-5% –≤ –¥–µ–Ω—å
- –õ—É—á—à–µ–µ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤: 11:00-16:00 –ú–°–ö
- –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¶–ë, —Å–∞–Ω–∫—Ü–∏–∏, –Ω–µ—Ñ—Ç—å

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."""

    async def analyze_signal(self, signal_data: Dict, is_manual_check: bool = False) -> Optional[GPTAdvice]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é GPT"""
        try:
            prompt = self._create_detailed_prompt(signal_data, is_manual_check)
            response = await self._call_openai_api(prompt)
            
            if response:
                return self._parse_advice_response(response)
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GPT: {e}")
            return None
    
    def _create_detailed_prompt(self, signal_data: Dict, is_manual_check: bool) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        conditions_met = signal_data.get('conditions_met', True)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        adx_value = signal_data['adx']
        if adx_value > 40:
            adx_strength = "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
            adx_risk = "–≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç"
        elif adx_value > 25:
            adx_strength = "—Å–∏–ª—å–Ω—ã–π" 
            adx_risk = "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥"
        else:
            adx_strength = "–°–õ–ê–ë–´–ô"
            adx_risk = "—Ç—Ä–µ–Ω–¥ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω"
        
        di_difference = signal_data['plus_di'] - signal_data['minus_di']
        if di_difference > 15:
            di_strength = "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ"
        elif di_difference > 10:
            di_strength = "—Å–∏–ª—å–Ω–æ–µ"
        elif di_difference > 5:
            di_strength = "—Å—Ä–µ–¥–Ω–µ–µ"
        elif di_difference > 1:
            di_strength = "—Å–ª–∞–±–æ–µ"
        else:
            di_strength = "–û–¢–°–£–¢–°–¢–í–£–ï–¢"
        
        price_above_ema_percent = ((signal_data['price'] / signal_data['ema20'] - 1) * 100)
        
        current_hour = datetime.now().hour
        if 11 <= current_hour <= 16:
            session_quality = "–ø—Ä–µ–º–∏—É–º –≤—Ä–µ–º—è"
        elif 10 <= current_hour <= 18:
            session_quality = "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"
        else:
            session_quality = "–ø–ª–æ—Ö–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Ö–æ–¥–∞"
        
        signal_type = "–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" if is_manual_check else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ª–æ–≤–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if conditions_met:
            strategy_status = "‚úÖ –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´"
            analysis_focus = "–ü–æ–∫—É–ø–∞—Ç—å –ª–∏ SBER –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
        else:
            strategy_status = "‚ùå –£–°–õ–û–í–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–´"
            analysis_focus = "–°—Ç–æ–∏—Ç –ª–∏ –∂–¥–∞—Ç—å –∏–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã?"
        
        prompt = f"""–ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–û–ô –°–ò–¢–£–ê–¶–ò–ò SBER:

üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:
‚Ä¢ –¶–µ–Ω–∞: {signal_data['price']:.2f} ‚ÇΩ
‚Ä¢ EMA20: {signal_data['ema20']:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ {'–≤—ã—à–µ' if price_above_ema_percent > 0 else '–Ω–∏–∂–µ'} –Ω–∞ {abs(price_above_ema_percent):.1f}%)
‚Ä¢ ADX: {adx_value:.1f} ({adx_strength} —Ç—Ä–µ–Ω–¥, {adx_risk})
‚Ä¢ +DI: {signal_data['plus_di']:.1f} vs -DI: {signal_data['minus_di']:.1f}
‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ DI: {di_difference:.1f} ({di_strength} –¥–æ–º–∏–Ω–∞—Ü–∏—è)

‚è∞ –ö–û–ù–¢–ï–ö–°–¢:
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M –ú–°–ö')} ({session_quality})
‚Ä¢ –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {signal_type}
‚Ä¢ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_status}

üéØ –ì–õ–ê–í–ù–´–ô –í–û–ü–†–û–°: {analysis_focus}

–î–∞–π —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É - —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∞—Ç—å SBER –≤ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö?

–û—Ç–≤–µ—Ç—å –≤ JSON:
{{
  "recommendation": "BUY/WEAK_BUY/WAIT/AVOID",
  "confidence": —á–∏—Å–ª–æ_0_100,
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
  "risk_warning": "–≥–ª–∞–≤–Ω—ã–π —Ä–∏—Å–∫ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
  "profit_target": "–æ–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å % –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç"
}}"""
        
        return prompt
    
    async def _call_openai_api(self, prompt: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenAI API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gpt-4o-mini",  # –ë—ã—Å—Ç—Ä–∞—è –∏ –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            "max_tokens": 400,
            "response_format": {"type": "json_object"}  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π JSON
        }
        
        timeout = aiohttp.ClientTimeout(total=15)
        
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']
                        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT")
                        return content
                    elif response.status == 429:
                        logger.warning("‚ö†Ô∏è Rate limit OpenAI API")
                        return None
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå OpenAI API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI (15s)")
            return None
        except aiohttp.ClientError as e:
            logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")
            return None
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")
            return None
    
    def _parse_advice_response(self, response: str) -> Optional[GPTAdvice]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            data = json.loads(response.strip())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            recommendation = data.get('recommendation', 'AVOID').upper()
            if recommendation not in ['BUY', 'WEAK_BUY', 'WAIT', 'AVOID']:
                recommendation = 'AVOID'
            
            confidence = data.get('confidence', 50)
            if not isinstance(confidence, (int, float)) or confidence < 0 or confidence > 100:
                confidence = 50
            
            reasoning = str(data.get('reasoning', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            risk_warning = str(data.get('risk_warning', ''))[:150]
            profit_target = str(data.get('profit_target', ''))[:100] if data.get('profit_target') else None
            
            return GPTAdvice(
                recommendation=recommendation,
                confidence=int(confidence),
                reasoning=reasoning,
                risk_warning=risk_warning,
                profit_target=profit_target
            )
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç GPT: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç: {response[:500]}...")
            return None
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GPT –æ—Ç–≤–µ—Ç–∞: {e}")
            return None
    
    def format_advice_for_telegram(self, advice: GPTAdvice) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ GPT –¥–ª—è Telegram"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        rec_emoji = {
            'BUY': 'üöÄ',
            'WEAK_BUY': '‚ö°',
            'WAIT': '‚è≥',
            'AVOID': '‚õî'
        }
        
        # –¶–≤–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if advice.confidence >= 80:
            confidence_emoji = 'üü¢'
        elif advice.confidence >= 60:
            confidence_emoji = 'üü°'
        else:
            confidence_emoji = 'üî¥'
        
        result = f"""
ü§ñ <b>–°–û–í–ï–¢ GPT:</b>
{rec_emoji.get(advice.recommendation, '‚ùì')} <b>{advice.recommendation}</b> | {confidence_emoji} {advice.confidence}%

üí° <b>–ê–Ω–∞–ª–∏–∑:</b> {advice.reasoning}"""
        
        if advice.profit_target:
            result += f"\nüéØ <b>–¶–µ–ª—å:</b> {advice.profit_target}"
        
        if advice.risk_warning:
            result += f"\n‚ö†Ô∏è <b>–†–∏—Å–∫:</b> {advice.risk_warning}"
        
        return result
