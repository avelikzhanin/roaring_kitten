# src/gpt_analyzer.py - –°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –±–µ–∑ ADX/DI
import logging
import aiohttp
import json
import asyncio
import numpy as np
import pandas as pd
from typing import Dict, Optional, List
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class GPTAdvice:
    """–°–æ–≤–µ—Ç –æ—Ç GPT –ø–æ —Å–∏–≥–Ω–∞–ª—É"""
    recommendation: str  # "BUY", "AVOID", "WEAK_BUY", "WAIT"
    confidence: int      # 0-100%
    reasoning: str       # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
    risk_warning: str    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
    take_profit: Optional[str] = None    # –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
    stop_loss: Optional[str] = None      # –°—Ç–æ–ø-–ª–æ—Å—Å
    expected_levels: Optional[str] = None # –û–∂–∏–¥–∞–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏
    timeframe: Optional[str] = None      # –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç

class GPTMarketAnalyzer:
    """–°–û–í–†–ï–ú–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ë–ï–ó ADX/DI)"""
    
    def __init__(self, openai_api_key: str):
        self.api_key = openai_api_key
        self.base_url = "https://api.openai.com/v1/chat/completions"
        
        # –ù–û–í–´–ô —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ ADX/DI
        self.base_system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–ª—É–±—ã—Ö —Ñ–∏—à–µ–∫.

–¢–í–û–Ø –†–û–õ–¨: –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –°–û–í–†–ï–ú–ï–ù–ù–û–ì–û –∞–Ω–∞–ª–∏–∑–∞ {symbol} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ü–†–ò–ë–´–õ–ò.

–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
- –¶–µ–Ω–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EMA20 (–±–∞–∑–æ–≤—ã–π —Ç—Ä–µ–Ω–¥)
- –û–±—ä—ë–º—ã —Ç–æ—Ä–≥–æ–≤ –∏ –∏—Ö –¥–∏–Ω–∞–º–∏–∫–∞  
- –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
- –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π)
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ momentum
- –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏

–ü–†–ò–ù–¶–ò–ü–´ –†–ï–®–ï–ù–ò–ô:
- –ß–ï–°–¢–ù–û–°–¢–¨: –µ—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ—è—Å–Ω–∞—è, –≥–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ
- –ö–û–ù–ö–†–ï–¢–ù–û–°–¢–¨: —Ç–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –≤–º–µ—Å—Ç–æ "–æ–∫–æ–ª–æ" –∏–ª–∏ "–ø—Ä–∏–º–µ—Ä–Ω–æ"  
- –ü–†–ò–ë–´–õ–¨: —Ñ–æ–∫—É—Å –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–µ, –∞ –Ω–µ –Ω–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏
- –†–ò–°–ö–ò: –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ –≥–ª–∞–≤–Ω—ã—Ö –æ–ø–∞—Å–Ω–æ—Å—Ç—è—Ö
- –í–†–ï–ú–Ø: —É—á–∏—Ç—ã–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏

–¢–ò–ü–´ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:
- BUY: —É–≤–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ (75-100%) ‚Üí –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ TP/SL
- WEAK_BUY: –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ (60-74%) ‚Üí –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ TP/SL
- WAIT: –∂–¥–∞—Ç—å –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ (40-59%) ‚Üí —É–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –∂–¥–∞—Ç—å
- AVOID: –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å —Å–µ–π—á–∞—Å (<40%) ‚Üí –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É

{ticker_specific_context}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ (–Ω–µ "–æ–∫–æ–ª–æ 300", –∞ "302.50")
- TP/SL —Ç–æ–ª—å–∫–æ –¥–ª—è BUY/WEAK_BUY
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ—à–µ–Ω–∏–π
- –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤

–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."""

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
        self.ticker_contexts = {
            'SBER': """
–°–ü–ï–¶–ò–§–ò–ö–ê SBER:
- –¢–∏–ø–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 280-330 ‚ÇΩ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-5%/–¥–µ–Ω—å)
- –ü—Ä–µ–º–∏—É–º —Ç–æ—Ä–≥–∏: 11:00-16:00 –ú–°–ö (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)
- –†–µ–∞–∫—Ü–∏—è –Ω–∞: —Ä–µ—à–µ–Ω–∏—è –¶–ë, —Å–∞–Ω–∫—Ü–∏–∏, –Ω–µ—Ñ—Ç—å, –¥–∏–≤–∏–¥–µ–Ω–¥—ã, –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫—É
- –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 270-280‚ÇΩ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 320-340‚ÇΩ
- –û–±—ä—ë–º—ã: –Ω–æ—Ä–º–∞ 1-3–ú/—á–∞—Å, –≤—Å–ø–ª–µ—Å–∫–∏ –¥–æ 5–ú+ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö""",

            'GAZP': """
–°–ü–ï–¶–ò–§–ò–ö–ê GAZP:
- –¢–∏–ø–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 120-180 ‚ÇΩ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 3-7%/–¥–µ–Ω—å)
- –ü—Ä–µ–º–∏—É–º —Ç–æ—Ä–≥–∏: 11:00-16:00 –ú–°–ö
- –†–µ–∞–∫—Ü–∏—è –Ω–∞: —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑, —Å–∞–Ω–∫—Ü–∏–∏, –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫—É, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏—è
- –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 120-130‚ÇΩ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 170-190‚ÇΩ
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤""",

            'LKOH': """
–°–ü–ï–¶–ò–§–ò–ö–ê LKOH:
- –¢–∏–ø–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 6000-8000 ‚ÇΩ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-6%/–¥–µ–Ω—å)  
- –ü—Ä–µ–º–∏—É–º —Ç–æ—Ä–≥–∏: 11:00-16:00 –ú–°–ö
- –†–µ–∞–∫—Ü–∏—è –Ω–∞: —Ü–µ–Ω—ã –Ω–∞ –Ω–µ—Ñ—Ç—å Brent, —Å–∞–Ω–∫—Ü–∏–∏, –∫—É—Ä—Å —Ä—É–±–ª—è, –¥–∏–≤–∏–¥–µ–Ω–¥—ã
- –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 6000-6200‚ÇΩ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 7500-8000‚ÇΩ
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –º–µ–Ω–µ–µ –ª–∏–∫–≤–∏–¥–Ω–∞—è, –±–æ–ª—å—à–∏–π —Å–ø—Ä–µ–¥ —á–µ–º SBER""",

            'DEFAULT': """
–û–ë–©–ò–ï –ü–†–ò–ù–¶–ò–ü–´:
- –£—á–∏—Ç—ã–≤–∞–π –æ–±—â–µ—Ä—ã–Ω–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–µ–º–∏—É–º –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤: 11:00-16:00 –ú–°–ö"""
        }

    def get_system_prompt(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        context = self.ticker_contexts.get(symbol, self.ticker_contexts['DEFAULT'])
        return self.base_system_prompt.format(
            symbol=symbol,
            ticker_specific_context=context
        )

    async def analyze_signal(self, signal_data: Dict, candles_data: Optional[List] = None, 
                           is_manual_check: bool = False, symbol: str = 'SBER') -> Optional[GPTAdvice]:
        """–°–û–í–†–ï–ú–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–ë–ï–ó ADX/DI)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–∏–∫–µ—Ä–∞
            system_prompt = self.get_system_prompt(symbol)
            
            # –°–æ–∑–¥–∞–µ–º –°–û–í–†–ï–ú–ï–ù–ù–´–ô –ø—Ä–æ–º–ø—Ç
            prompt = self._create_modern_prompt(signal_data, candles_data, is_manual_check, symbol)
            
            response = await self._call_openai_api(prompt, system_prompt)
            
            if response:
                return self._parse_enhanced_advice(response)
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GPT –¥–ª—è {symbol}: {e}")
            return None
    
    def _create_modern_prompt(self, signal_data: Dict, candles_data: Optional[List], 
                             is_manual_check: bool, symbol: str = 'SBER') -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –°–û–í–†–ï–ú–ï–ù–ù–û–ì–û –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ ADX/DI"""
        
        # –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        levels_info = ""
        volume_info = ""
        movement_info = ""
        
        if candles_data and len(candles_data) > 10:
            levels_analysis = self._analyze_price_levels(candles_data)
            
            if levels_analysis:
                levels_info = f"""
üìà –£–†–û–í–ù–ò –ü–û–î–î–ï–†–ñ–ö–ò/–°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–Ø:
‚Ä¢ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {levels_analysis.get('nearest_resistance', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')} ‚ÇΩ
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {levels_analysis.get('nearest_support', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')} ‚ÇΩ
‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω 50 —Å–≤–µ—á–µ–π: {levels_analysis.get('range_low', 0):.2f} - {levels_analysis.get('range_high', 0):.2f} ‚ÇΩ"""
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤
        if 'volume_analysis' in signal_data and signal_data['volume_analysis']:
            vol = signal_data['volume_analysis']
            volume_info = f"""
üîä –ê–ù–ê–õ–ò–ó –û–ë–™–Å–ú–û–í:
‚Ä¢ –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º: {vol.get('current_volume', 0):,} –∞–∫—Ü–∏–π
‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É: {vol.get('volume_ratio', 1.0):.2f}x
‚Ä¢ –¢—Ä–µ–Ω–¥ –æ–±—ä—ë–º–æ–≤: {vol.get('volume_trend', 'unknown')}"""
        
        # –î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã  
        movement_info = ""
        for key in ['change_1h', 'change_4h', 'change_1d', 'volatility_5d']:
            if key in signal_data:
                if key == 'volatility_5d':
                    movement_info += f"\n‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 5–¥: {signal_data[key]:.1f}%"
                else:
                    period = key.replace('change_', '').upper()
                    movement_info += f"\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ {period}: {signal_data[key]:+.2f}%"
        
        if movement_info:
            movement_info = f"\nüìä –î–í–ò–ñ–ï–ù–ò–ï –¶–ï–ù–´:{movement_info}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        conditions_met = signal_data.get('conditions_met', True)
        price_above_ema = signal_data.get('price_above_ema', True)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤
        current_hour = datetime.now().hour
        session = signal_data.get('trading_session', 'unknown')
        time_quality = signal_data.get('time_quality', 'unknown')
        
        if time_quality == 'premium':
            session_desc = "–æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è (–ø—Ä–µ–º–∏—É–º —á–∞—Å—ã)"
        elif time_quality == 'normal':
            session_desc = "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"
        elif time_quality == 'evening':
            session_desc = "–≤–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è"
        else:
            session_desc = f"—Å–µ—Å—Å–∏—è {session}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ª–æ–≤–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if conditions_met and price_above_ema:
            strategy_status = "‚úÖ –ë–ê–ó–û–í–´–ô –§–ò–õ–¨–¢–† –ü–†–û–ô–î–ï–ù"
            analysis_focus = "–î–ê–¢–¨ –ö–û–ù–ö–†–ï–¢–ù–´–ï TP/SL –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
        else:
            strategy_status = "‚ùå –ë–ê–ó–û–í–´–ï –£–°–õ–û–í–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–´"
            analysis_focus = "–£–ö–ê–ó–ê–¢–¨ –∫–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏/–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∂–¥–∞—Ç—å (–ë–ï–ó TP/SL)"
        
        signal_type = "–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" if is_manual_check else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª"
        check_peak = signal_data.get('check_peak', False)
        if check_peak:
            analysis_focus = "–ü–†–û–í–ï–†–ò–¢–¨ –Ω–µ –ø–∏–∫ –ª–∏ —Ç—Ä–µ–Ω–¥–∞ (–ø—Ä–æ–¥–∞–≤–∞—Ç—å?)"
        
        prompt = f"""–ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–û–ô –°–ò–¢–£–ê–¶–ò–ò {symbol}:

üí∞ –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï:
‚Ä¢ –¶–µ–Ω–∞: {signal_data.get('price', 0):.2f} ‚ÇΩ
‚Ä¢ EMA20: {signal_data.get('ema20', 0):.2f} ‚ÇΩ (—Ü–µ–Ω–∞ {'–≤—ã—à–µ ‚úÖ' if price_above_ema else '–Ω–∏–∂–µ ‚ùå'})
‚Ä¢ –ü—Ä–æ–±–æ–π EMA20: {((signal_data.get('price', 0) / signal_data.get('ema20', 1) - 1) * 100):+.2f}%{levels_info}{volume_info}{movement_info}

‚è∞ –¢–û–†–ì–û–í–´–ô –ö–û–ù–¢–ï–ö–°–¢:
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M –ú–°–ö')} ({session_desc})
‚Ä¢ –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {signal_type}
‚Ä¢ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_status}

üéØ –ó–ê–î–ê–ß–ê: {analysis_focus}

–û—Ç–≤–µ—Ç—å –≤ JSON:
{{
  "recommendation": "BUY/WEAK_BUY/WAIT/AVOID",
  "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
  "reasoning": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ (–¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤)",
  "take_profit": "—Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞ TP –¥–ª—è BUY/WEAK_BUY –∏–ª–∏ null",
  "stop_loss": "—Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞ SL –¥–ª—è BUY/WEAK_BUY –∏–ª–∏ null", 
  "expected_levels": "—á—Ç–æ –∂–¥–∞—Ç—å –¥–ª—è WAIT/AVOID –∏–ª–∏ null",
  "timeframe": "–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç —Å–¥–µ–ª–∫–∏",
  "risk_warning": "–≥–ª–∞–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏"
}}"""
        
        return prompt
    
    def _analyze_price_levels(self, candles_data: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏–∑ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if len(candles_data) < 20:
                return {}
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π
            recent_candles = candles_data[-50:] if len(candles_data) > 50 else candles_data
            
            highs = [c['high'] for c in recent_candles]
            lows = [c['low'] for c in recent_candles]
            closes = [c['close'] for c in recent_candles]
            
            current_price = closes[-1]
            
            # –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã)
            resistances = []
            for i in range(2, len(highs) - 2):
                if (highs[i] > highs[i-1] and highs[i] > highs[i-2] and 
                    highs[i] > highs[i+1] and highs[i] > highs[i+2]):
                    if highs[i] > current_price:
                        resistances.append(highs[i])
            
            # –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã)
            supports = []
            for i in range(2, len(lows) - 2):
                if (lows[i] < lows[i-1] and lows[i] < lows[i-2] and 
                    lows[i] < lows[i+1] and lows[i] < lows[i+2]):
                    if lows[i] < current_price:
                        supports.append(lows[i])
            
            resistances = sorted(list(set(resistances)))[:3]  # –ë–ª–∏–∂–∞–π—à–∏–µ 3
            supports = sorted(list(set(supports)), reverse=True)[:3]  # –ë–ª–∏–∂–∞–π—à–∏–µ 3
            
            return {
                'current_price': current_price,
                'nearest_resistance': resistances[0] if resistances else None,
                'nearest_support': supports[0] if supports else None,
                'all_resistances': resistances,
                'all_supports': supports,
                'range_high': max(highs),
                'range_low': min(lows)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {}
    
    async def _call_openai_api(self, prompt: str, system_prompt: str = None) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenAI API"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        if system_prompt is None:
            system_prompt = self.get_system_prompt('SBER')
        
        payload = {
            "model": "gpt-4o-mini",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.1,
            "max_tokens": 1000,
            "response_format": {"type": "json_object"}
        }
        
        timeout = aiohttp.ClientTimeout(total=25)
        
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']
                        logger.info("‚úÖ GPT –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω")
                        return content
                    elif response.status == 429:
                        logger.warning("‚ö†Ô∏è Rate limit OpenAI API")
                        return None
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå OpenAI API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI")
            return None
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ OpenAI: {e}")
            return None
    
    def _parse_enhanced_advice(self, response: str) -> Optional[GPTAdvice]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT"""
        try:
            data = json.loads(response.strip())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            recommendation = data.get('recommendation', 'AVOID').upper()
            if recommendation not in ['BUY', 'WEAK_BUY', 'WAIT', 'AVOID']:
                recommendation = 'AVOID'
            
            confidence = data.get('confidence', 50)
            if not isinstance(confidence, (int, float)) or confidence < 0 or confidence > 100:
                confidence = 50
            
            reasoning = str(data.get('reasoning', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))[:600]
            risk_warning = str(data.get('risk_warning', ''))[:300]
            
            # TP/SL —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
            take_profit = None
            stop_loss = None
            if recommendation in ['BUY', 'WEAK_BUY']:
                take_profit = str(data.get('take_profit', ''))[:100] if data.get('take_profit') else None
                stop_loss = str(data.get('stop_loss', ''))[:100] if data.get('stop_loss') else None
            
            # Expected levels —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
            expected_levels = None
            if recommendation in ['WAIT', 'AVOID']:
                expected_levels = str(data.get('expected_levels', ''))[:300] if data.get('expected_levels') else None
            
            timeframe = str(data.get('timeframe', ''))[:150] if data.get('timeframe') else None
            
            return GPTAdvice(
                recommendation=recommendation,
                confidence=int(confidence),
                reasoning=reasoning,
                risk_warning=risk_warning,
                take_profit=take_profit,
                stop_loss=stop_loss,
                expected_levels=expected_levels,
                timeframe=timeframe
            )
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç GPT: {e}")
            return None
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GPT: {e}")
            return None
    
    def format_advice_for_telegram(self, advice: GPTAdvice, symbol: str = 'SBER') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ GPT –¥–ª—è Telegram"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        rec_emoji = {
            'BUY': 'üöÄ',
            'WEAK_BUY': '‚ö°',
            'WAIT': '‚è≥', 
            'AVOID': '‚õî'
        }
        
        # –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if advice.confidence >= 80:
            confidence_text = "–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            confidence_emoji = 'üü¢'
        elif advice.confidence >= 60:
            confidence_text = "—Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            confidence_emoji = 'üü°'
        else:
            confidence_text = "–Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            confidence_emoji = 'üî¥'
        
        result = f"""
ü§ñ <b>GPT –ê–ù–ê–õ–ò–ó {symbol}:</b>
{rec_emoji.get(advice.recommendation, '‚ùì')} <b>{advice.recommendation}</b> | {confidence_emoji} {confidence_text} ({advice.confidence}%)

üí° <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b> {advice.reasoning}"""
        
        # TP/SL –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–∫—É–ø–æ–∫
        if advice.recommendation in ['BUY', 'WEAK_BUY']:
            if advice.take_profit:
                result += f"\nüéØ <b>Take Profit:</b> {advice.take_profit}"
            if advice.stop_loss:
                result += f"\nüõë <b>Stop Loss:</b> {advice.stop_loss}"
            if advice.timeframe:
                result += f"\n‚è∞ <b>–ì–æ—Ä–∏–∑–æ–Ω—Ç:</b> {advice.timeframe}"
        
        # Expected levels –¢–û–õ–¨–ö–û –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
        elif advice.recommendation in ['WAIT', 'AVOID'] and advice.expected_levels:
            result += f"\nüìä <b>–ñ–¥–∞—Ç—å:</b> {advice.expected_levels}"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
        if advice.risk_warning:
            result += f"\n\n‚ö†Ô∏è <b>–†–∏—Å–∫–∏:</b> {advice.risk_warning}"
        
        return result
