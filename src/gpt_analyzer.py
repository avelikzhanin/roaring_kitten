def _create_detailed_prompt(self, signal_data: Dict, is_manual_check: bool) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        conditions_met = signal_data.get('conditions_met', True)
        current_price = signal_data['price']
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        adx_value = signal_data['adx']
        adx_analysis = self._analyze_adx(adx_value)
        
        di_difference = signal_data['plus_di'] - signal_data['minus_di']
        di_analysis = self._analyze_di_difference(di_difference)
        
        price_above_ema_percent = ((signal_data['price'] / signal_data['ema20'] - 1) * 100)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        support_resistance = signal_data.get('support_resistance', {})
        volatility = signal_data.get('volatility', {})
        volume_profile = signal_data.get('volume_profile', {})
        chart_patterns = signal_data.get('chart_patterns', {})
        fibonacci = signal_data.get('fibonacci', {})
        tp_sl_rec = signal_data.get('tp_sl_recommendations', {})
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤
        current_hour = datetime.now().hour
        session_analysis = self._analyze_trading_session(current_hour)
        
        # –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_status = "‚úÖ –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´" if conditions_met else "‚ùå –£–°–õ–û–í–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–´"
        
        prompt = f"""–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ô –°–ò–¢–£–ê–¶–ò–ò SBER:

üìä –ë–ê–ó–û–í–´–ï –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:
‚Ä¢ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ
‚Ä¢ EMA20: {signal_data['ema20']:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ {'–≤—ã—à–µ' if price_above_ema_percent > 0 else '–Ω–∏–∂–µ'} –Ω–∞ {abs(price_above_ema_percent):.1f}%)
‚Ä¢ ADX: {adx_value:.1f} ({adx_analysis['strength']}, {adx_analysis['interpretation']})
‚Ä¢ +DI: {signal_data['plus_di']:.1f} vs -DI: {signal_data['minus_di']:.1f}
‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ DI: {di_difference:.1f} ({di_analysis})

üéØ –£–†–û–í–ù–ò –ü–û–î–î–ï–†–ñ–ö–ò/–°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–Ø:
‚Ä¢ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {support_resistance.get('nearest_resistance', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {support_resistance.get('nearest_support', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏: {support_resistance.get('psychological_levels', [])}

üìà –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ –ò –†–ò–°–ö–ò:
‚Ä¢ ATR(14): {volatility.get('atr_14', 0):.2f} ‚ÇΩ ({volatility.get('atr_percentage', 0):.2f}% –æ—Ç —Ü–µ–Ω—ã)
‚Ä¢ 7-–¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility.get('volatility_7d', 0):.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–≤–µ—á–∏: {volatility.get('avg_candle_range', 0):.2f} ‚ÇΩ

üìä –û–ë–™–ï–ú–´ –ò –õ–ò–ö–í–ò–î–ù–û–°–¢–¨:
‚Ä¢ –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º vs —Å—Ä–µ–¥–Ω–∏–π: {volume_profile.get('volume_ratio_20', 1):.1f}x
‚Ä¢ –û–±—ä–µ–º–Ω—ã–π —É–∫–ª–æ–Ω: {volume_profile.get('# src/gpt_analyzer.py
import logging
import aiohttp
import json
import asyncio
from typing import Dict, Optional
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class GPTAdvice:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç GPT –ø–æ —Å–∏–≥–Ω–∞–ª—É —Å TP/SL"""
    recommendation: str  # "BUY", "WEAK_BUY", "WAIT", "AVOID"
    confidence: int      # 0-100%
    reasoning: str       # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
    risk_warning: str    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö
    
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    stop_loss: Optional[float] = None      # –¶–µ–Ω–∞ —Å—Ç–æ–ø–∞
    take_profit: Optional[float] = None    # –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    risk_amount: Optional[float] = None    # –†–∏—Å–∫ –≤ —Ä—É–±–ª—è—Ö
    risk_percent: Optional[float] = None   # –†–∏—Å–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    reward_amount: Optional[float] = None  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ —Ä—É–±–ª—è—Ö
    reward_percent: Optional[float] = None # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    risk_reward_ratio: Optional[float] = None  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
    key_levels: Optional[List[float]] = None   # –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    trade_plan: Optional[str] = None       # –¢–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω

class GPTMarketAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT"""
    
    def __init__(self, openai_api_key: str):
        self.api_key = openai_api_key
        self.base_url = "https://api.openai.com/v1/chat/completions"
        
        self.system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –∞–∫—Ü–∏–π —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –°–±–µ—Ä–±–∞–Ω–∫–æ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞ –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –î–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω –ø–æ SBER —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞.

–ü–†–ò–ù–¶–ò–ü–´ –ê–ù–ê–õ–ò–ó–ê:
- –ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –æ–±—ä–µ–º—ã, –ø–∞—Ç—Ç–µ—Ä–Ω—ã
- –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ö–û–ù–ö–†–ï–¢–ï–ù: —Ç–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è SL/TP, –∞ –Ω–µ –æ–±—â–∏–µ —Å–ª–æ–≤–∞
- –¶–ï–õ–¨: –¥–∞—Ç—å –ø–ª–∞–Ω –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ 2-7% –∑–∞ —Å–¥–µ–ª–∫—É —Å —Ä–∞–∑—É–º–Ω—ã–º —Ä–∏—Å–∫–æ–º 1-3%
- –£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤, —Ä—ã–Ω–æ—á–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- BUY: —É–≤–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ (85-100%) - –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∑–∞ –ø–æ–∫—É–ø–∫—É + —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω
- WEAK_BUY: –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ (65-84%) - –±–æ–ª—å—à–µ –ø–ª—é—Å–æ–≤ —á–µ–º –º–∏–Ω—É—Å–æ–≤
- WAIT: –∂–¥–∞—Ç—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π (45-64%) - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –±–ª–∏–∑–∫–æ –∫ —É—Ä–æ–≤–Ω—è–º
- AVOID: –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å (0-44%) - –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ –∏–ª–∏ –ø–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ó–´–í–ê–ô:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã Stop Loss –∏ Take Profit
- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω–µ–π
- –†–∏—Å–∫ –≤ —Ä—É–±–ª—è—Ö –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
- –û–∂–∏–¥–∞–µ–º—É—é –ø—Ä–∏–±—ã–ª—å
- –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–ö–û–ù–¢–ï–ö–°–¢ –°–ë–ï–†–ê:
- –¢–æ—Ä–≥–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±—ã—á–Ω–æ 280-330 —Ä—É–±–ª–µ–π
- –°—Ä–µ–¥–Ω—è—è –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2-5%
- –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: 11:00-16:00 –ú–°–ö (–≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)
- –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¶–ë –†–§, —Å–∞–Ω–∫—Ü–∏–∏, —Ü–µ–Ω—ã –Ω–∞ –Ω–µ—Ñ—Ç—å
- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏: –∫—Ä—É–≥–ª—ã–µ —á–∏—Å–ª–∞ (300, 310, 320 –∏ —Ç.–¥.)

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."""

    async def analyze_signal(self, signal_data: Dict, is_manual_check: bool = False) -> Optional[GPTAdvice]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é GPT"""
        try:
            prompt = self._create_detailed_prompt(signal_data, is_manual_check)
            response = await self._call_openai_api(prompt)
            
            if response:
                return self._parse_advice_response(response)
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GPT: {e}")
            return None
    
    def _create_detailed_prompt(self, signal_data: Dict, is_manual_check: bool) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        conditions_met = signal_data.get('conditions_met', True)
        current_price = signal_data['price']
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        adx_value = signal_data['adx']
        adx_analysis = self._analyze_adx(adx_value)
        
        di_difference = signal_data['plus_di'] - signal_data['minus_di']
        di_analysis = self._analyze_di_difference(di_difference)
        
        price_above_ema_percent = ((signal_data['price'] / signal_data['ema20'] - 1) * 100)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        support_resistance = signal_data.get('support_resistance', {})
        volatility = signal_data.get('volatility', {})
        volume_profile = signal_data.get('volume_profile', {})
        chart_patterns = signal_data.get('chart_patterns', {})
        fibonacci = signal_data.get('fibonacci', {})
        tp_sl_rec = signal_data.get('tp_sl_recommendations', {})
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤
        current_hour = datetime.now().hour
        session_analysis = self._analyze_trading_session(current_hour)
        
        # –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_status = "‚úÖ –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´" if conditions_met else "‚ùå –£–°–õ–û–í–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–´"
        
        prompt = f"""–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ô –°–ò–¢–£–ê–¶–ò–ò SBER:

üìä –ë–ê–ó–û–í–´–ï –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:
‚Ä¢ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ
‚Ä¢ EMA20: {signal_data['ema20']:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ {'–≤—ã—à–µ' if price_above_ema_percent > 0 else '–Ω–∏–∂–µ'} –Ω–∞ {abs(price_above_ema_percent):.1f}%)
‚Ä¢ ADX: {adx_value:.1f} ({adx_analysis['strength']}, {adx_analysis['interpretation']})
‚Ä¢ +DI: {signal_data['plus_di']:.1f} vs -DI: {signal_data['minus_di']:.1f}
‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ DI: {di_difference:.1f} ({di_analysis})

üéØ –£–†–û–í–ù–ò –ü–û–î–î–ï–†–ñ–ö–ò/–°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–Ø:
‚Ä¢ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {support_resistance.get('nearest_resistance', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {support_resistance.get('nearest_support', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏: {support_resistance.get('psychological_levels', [])}

üìà –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ –ò –†–ò–°–ö–ò:
‚Ä¢ ATR(14): {volatility.get('atr_14', 0):.2f} ‚ÇΩ ({volatility.get('atr_percentage', 0):.2f}% –æ—Ç —Ü–µ–Ω—ã)
‚Ä¢ 7-–¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility.get('volatility_7d', 0):.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–≤–µ—á–∏: {volatility.get('avg_candle_range', 0):.2f} ‚ÇΩ

üìä –û–ë–™–ï–ú–´ –ò –õ–ò–ö–í–ò–î–ù–û–°–¢–¨:
‚Ä¢ –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º vs —Å—Ä–µ–¥–Ω–∏–π: {volume_profile.get('volume_ratio_20', 1):.1f}x
‚Ä¢ –û–±—ä–µ–º–Ω—ã–π —É–∫–ª–æ–Ω: {volume_profile.get('volume_bias', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')}

üìâ –ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´:
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞: {chart_patterns.get('trend_direction', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
‚Ä¢ –ü—Ä–æ–±–∏—Ç–∏–µ —É—Ä–æ–≤–Ω–µ–π: {chart_patterns.get('breakout_type', '–Ω–µ—Ç')}
‚Ä¢ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {'–¥–∞' if chart_patterns.get('is_consolidation') else '–Ω–µ—Ç'}

üî¢ –§–ò–ë–û–ù–ê–ß–ß–ò –£–†–û–í–ù–ò:
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ: {fibonacci.get('nearest_fib_above', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ: {fibonacci.get('nearest_fib_below', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}

üí° –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï TP/SL –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π Stop Loss: {tp_sl_rec.get('stop_loss', {}).get('price', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')} (–º–µ—Ç–æ–¥: {tp_sl_rec.get('stop_loss', {}).get('method', '–Ω–µ—Ç')})
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π Take Profit: {tp_sl_rec.get('take_profit', {}).get('price', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')} (–º–µ—Ç–æ–¥: {tp_sl_rec.get('take_profit', {}).get('method', '–Ω–µ—Ç')})
‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R/R: {tp_sl_rec.get('risk_reward_ratio', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}

‚è∞ –ö–û–ù–¢–ï–ö–°–¢ –¢–û–†–ì–û–í–û–ô –°–ï–°–°–ò–ò:
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M –ú–°–ö')} ({session_analysis})
‚Ä¢ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_status}

üéØ –¢–û–†–ì–û–í–û–ï –ó–ê–î–ê–ù–ò–ï:
–î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω: –ø–æ–∫—É–ø–∞—Ç—å –ª–∏ SBER, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ Stop Loss –∏ Take Profit, –∫–∞–∫–æ–π —Ä–∏—Å–∫ –≤ —Ä—É–±–ª—è—Ö –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –Ω–∞ –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.

–û—Ç–≤–µ—Ç –≤ JSON:
{{
  "recommendation": "BUY/WEAK_BUY/WAIT/AVOID",
  "confidence": —á–∏—Å–ª–æ_0_100,
  "reasoning": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
  "risk_warning": "–≥–ª–∞–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
  
  "stop_loss": —Ü–µ–Ω–∞_—á–∏—Å–ª–æ–º_–∏–ª–∏_null,
  "take_profit": —Ü–µ–Ω–∞_—á–∏—Å–ª–æ–º_–∏–ª–∏_null,
  "risk_amount": —Ä–∏—Å–∫_–≤_—Ä—É–±–ª—è—Ö_–∏–ª–∏_null,
  "risk_percent": —Ä–∏—Å–∫_–≤_–ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö_–∏–ª–∏_null,
  "reward_amount": –ø—Ä–∏–±—ã–ª—å_–≤_—Ä—É–±–ª—è—Ö_–∏–ª–∏_null,  
  "reward_percent": –ø—Ä–∏–±—ã–ª—å_–≤_–ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö_–∏–ª–∏_null,
  "risk_reward_ratio": —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ_–∏–ª–∏_null,
  
  "key_levels": [–º–∞—Å—Å–∏–≤_–∫–ª—é—á–µ–≤—ã—Ö_—É—Ä–æ–≤–Ω–µ–π_–¥–ª—è_–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞],
  "trade_plan": "–ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏"
}}"""
        
        return prompt
    
    def _analyze_adx(self, adx_value: float) -> Dict[str, str]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã ADX"""
        if adx_value > 45:
            return {"strength": "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ —Å–∏–ª—å–Ω—ã–π", "interpretation": "–≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞"}
        elif adx_value > 30:
            return {"strength": "—Å–∏–ª—å–Ω—ã–π", "interpretation": "—É—Å—Ç–æ–π—á–∏–≤—ã–π —Ç—Ä–µ–Ω–¥"}
        elif adx_value > 25:
            return {"strength": "—É–º–µ—Ä–µ–Ω–Ω—ã–π", "interpretation": "—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π—Å—è —Ç—Ä–µ–Ω–¥"}
        else:
            return {"strength": "—Å–ª–∞–±—ã–π", "interpretation": "–±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"}
    
    def _analyze_di_difference(self, di_diff: float) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–∏—Ü—ã DI"""
        if di_diff > 15:
            return "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
        elif di_diff > 10:
            return "—Å–∏–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
        elif di_diff > 5:
            return "—É–º–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
        elif di_diff > 1:
            return "—Å–ª–∞–±–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
        elif di_diff > -1:
            return "—Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ —Å–∏–ª"
        elif di_diff > -5:
            return "—Å–ª–∞–±–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
        else:
            return "—Å–∏–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
    
    def _analyze_trading_session(self, hour: int) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        if 11 <= hour <= 16:
            return "–ø—Ä–µ–º–∏—É–º –≤—Ä–µ–º—è - –≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å"
        elif 10 <= hour <= 18:
            return "—Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å"
        elif 9 <= hour <= 19:
            return "–ø—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è - —Å—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å"
        else:
            return "–ø–ª–æ—Ö–æ–µ –≤—Ä–µ–º—è - –Ω–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å"
    
    async def _call_openai_api(self, prompt: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenAI API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gpt-4o-mini",  # –ë—ã—Å—Ç—Ä–∞—è –∏ –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            "max_tokens": 400,
            "response_format": {"type": "json_object"}  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π JSON
        }
        
        timeout = aiohttp.ClientTimeout(total=15)
        
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']
                        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT")
                        return content
                    elif response.status == 429:
                        logger.warning("‚ö†Ô∏è Rate limit OpenAI API")
                        return None
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå OpenAI API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI (15s)")
            return None
        except aiohttp.ClientError as e:
            logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")
            return None
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")
            return None
    
    def _parse_advice_response(self, response: str) -> Optional[GPTAdvice]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ GPT —Å —Ç–æ—Ä–≥–æ–≤—ã–º –ø–ª–∞–Ω–æ–º"""
        try:
            data = json.loads(response.strip())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            recommendation = data.get('recommendation', 'AVOID').upper()
            if recommendation not in ['BUY', 'WEAK_BUY', 'WAIT', 'AVOID']:
                recommendation = 'AVOID'
            
            confidence = data.get('confidence', 50)
            if not isinstance(confidence, (int, float)) or confidence < 0 or confidence > 100:
                confidence = 50
            
            reasoning = str(data.get('reasoning', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))[:500]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
            risk_warning = str(data.get('risk_warning', ''))[:200]
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
            stop_loss = data.get('stop_loss')
            take_profit = data.get('take_profit')
            risk_amount = data.get('risk_amount')
            risk_percent = data.get('risk_percent')
            reward_amount = data.get('reward_amount') 
            reward_percent = data.get('reward_percent')
            risk_reward_ratio = data.get('risk_reward_ratio')
            key_levels = data.get('key_levels', [])
            trade_plan = str(data.get('trade_plan', ''))[:300] if data.get('trade_plan') else None
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            def validate_number(value, default=None):
                if value is not None and isinstance(value, (int, float)) and value > 0:
                    return float(value)
                return default
            
            return GPTAdvice(
                recommendation=recommendation,
                confidence=int(confidence),
                reasoning=reasoning,
                risk_warning=risk_warning,
                stop_loss=validate_number(stop_loss),
                take_profit=validate_number(take_profit),
                risk_amount=validate_number(risk_amount),
                risk_percent=validate_number(risk_percent),
                reward_amount=validate_number(reward_amount),
                reward_percent=validate_number(reward_percent),
                risk_reward_ratio=validate_number(risk_reward_ratio),
                key_levels=[float(level) for level in key_levels if isinstance(level, (int, float))],
                trade_plan=trade_plan
            )
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç GPT: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç: {response[:500]}...")
            return None
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ GPT –æ—Ç–≤–µ—Ç–∞: {e}")
            return None
    
    def format_advice_for_telegram(self, advice: GPTAdvice) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ GPT –¥–ª—è Telegram"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        rec_emoji = {
            'BUY': 'üöÄ',
            'WEAK_BUY': '‚ö°',
            'WAIT': '‚è≥',
            'AVOID': '‚õî'
        }
        
        # –¶–≤–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if advice.confidence >= 85:
            confidence_emoji = 'üü¢'
        elif advice.confidence >= 65:
            confidence_emoji = 'üü°'
        else:
            confidence_emoji = 'üî¥'
        
        result = f"""
ü§ñ <b>–°–û–í–ï–¢ GPT:</b>
{rec_emoji.get(advice.recommendation, '‚ùì')} <b>{advice.recommendation}</b> | {confidence_emoji} {advice.confidence}%

üí° <b>–ê–Ω–∞–ª–∏–∑:</b> {advice.reasoning}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        if advice.stop_loss or advice.take_profit:
            result += "\n\nüìã <b>–¢–û–†–ì–û–í–´–ô –ü–õ–ê–ù:</b>"
            
            if advice.stop_loss:
                result += f"\nüõë <b>Stop Loss:</b> {advice.stop_loss:.2f} ‚ÇΩ"
                if advice.risk_amount:
                    result += f" (—Ä–∏—Å–∫: {advice.risk_amount:.0f}‚ÇΩ)"
                if advice.risk_percent:
                    result += f" (-{advice.risk_percent:.1f}%)"
            
            if advice.take_profit:
                result += f"\nüéØ <b>Take Profit:</b> {advice.take_profit:.2f} ‚ÇΩ"
                if advice.reward_amount:
                    result += f" (–ø—Ä–∏–±—ã–ª—å: +{advice.reward_amount:.0f}‚ÇΩ)"
                if advice.reward_percent:
                    result += f" (+{advice.reward_percent:.1f}%)"
            
            if advice.risk_reward_ratio:
                result += f"\n‚öñÔ∏è <b>R/R:</b> 1:{advice.risk_reward_ratio:.1f}"
        
        # –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if advice.key_levels:
            levels_str = ", ".join([f"{level:.2f}" for level in advice.key_levels[:3]])  # –ú–∞–∫—Å–∏–º—É–º 3 —É—Ä–æ–≤–Ω—è
            result += f"\nüëÅ <b>–°–ª–µ–¥–∏—Ç—å –∑–∞:</b> {levels_str} ‚ÇΩ"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
        if advice.risk_warning:
            result += f"\n‚ö†Ô∏è <b>–†–∏—Å–∫:</b> {advice.risk_warning}"
        
        # –¢–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω
        if advice.trade_plan:
            result += f"\nüìù <b>–ü–ª–∞–Ω:</b> {advice.trade_plan}"
        
        return result
