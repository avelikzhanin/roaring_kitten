import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional
import pandas as pd
from dataclasses import dataclass

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError, TimedOut, NetworkError

from .data_provider import TinkoffDataProvider
from .indicators import TechnicalIndicators

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    timestamp: datetime
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float
    volume: int
    avg_volume: float
    volume_ratio: float

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, telegram_token: str, tinkoff_token: str):
        self.telegram_token = telegram_token
        self.tinkoff_provider = TinkoffDataProvider(tinkoff_token)
        self.subscribers: List[int] = []
        self.last_signal_time: Optional[datetime] = None
        self.app: Optional[Application] = None
        self.is_running = False
        self.current_signal_active = False  # –¢—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        self.last_conditions_met = False    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
        self._signal_task = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
            self.app = Application.builder().token(self.telegram_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–±–µ–∑ /status)
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CommandHandler("stop", self.stop_command))
            self.app.add_handler(CommandHandler("signal", self.signal_command))
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ SBER...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            self.is_running = True
            self._signal_task = asyncio.create_task(self.check_signals_periodically())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
            await self.app.initialize()
            await self.app.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.app.updater.start_polling(drop_pending_updates=True)
            
            # –ñ–¥–µ–º –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                await asyncio.gather(self._signal_task)
            except asyncio.CancelledError:
                logger.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start(): {e}")
            await self.shutdown()
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
        
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        if self._signal_task and not self._signal_task.done():
            self._signal_task.cancel()
            try:
                await self._signal_task
            except asyncio.CancelledError:
                pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if self.app:
            try:
                if self.app.updater and self.app.updater.running:
                    await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.subscribers:
            self.subscribers.append(chat_id)
            await update.message.reply_text(
                "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ SBER!</b>\n\n"
                "üìà –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
                "üîî –ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ —Å–∏–≥–Ω–∞–ª–∞—Ö –ø–æ–∫—É–ø–∫–∏ –∏ –∏—Ö –æ—Ç–º–µ–Ω–µ\n\n"
                "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
                "‚Ä¢ EMA20 - —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π\n"
                "‚Ä¢ ADX > 23 - —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥\n"
                "‚Ä¢ +DI > -DI - –≤–æ—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ\n"
                "‚Ä¢ –û–±—ä–µ–º > —Å—Ä–µ–¥–Ω–µ–≥–æ √ó 1.47\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                "/signal - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª",
                parse_mode='HTML'
            )
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")
        else:
            await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!")
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        chat_id = update.effective_chat.id
        
        if chat_id in self.subscribers:
            self.subscribers.remove(chat_id)
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: {chat_id}")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã")
    
    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signal - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            signal = await self.analyze_market()
            
            if signal:
                # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                message = f"""‚úÖ <b>–ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò SBER</b>

{self.format_signal_message(signal)}

‚è∞ <b>–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞:</b> {signal.timestamp.strftime('%H:%M %d.%m.%Y')}
"""
            else:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ
