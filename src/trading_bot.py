# src/trading_bot.py (–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional
import pandas as pd
from dataclasses import dataclass

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError, TimedOut, NetworkError

from .data_provider import TinkoffDataProvider
from .indicators import TechnicalIndicators
from .gpt_analyzer import GPTMarketAnalyzer  # –ù–û–í–´–ô –ò–ú–ü–û–†–¢

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    timestamp: datetime
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, telegram_token: str, tinkoff_token: str, openai_token: str = None):
        self.telegram_token = telegram_token
        self.tinkoff_provider = TinkoffDataProvider(tinkoff_token)
        
        # GPT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
        self.gpt_analyzer = GPTMarketAnalyzer(openai_token) if openai_token else None
        
        self.subscribers: List[int] = []
        self.last_signal_time: Optional[datetime] = None
        self.app: Optional[Application] = None
        self.is_running = False
        self.current_signal_active = False
        self.last_conditions_met = False
        self._signal_task = None
        self.buy_price: Optional[float] = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
            self.app = Application.builder().token(self.telegram_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CommandHandler("stop", self.stop_command))
            self.app.add_handler(CommandHandler("signal", self.signal_command))
            
            gpt_status = "—Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º" if self.gpt_analyzer else "–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è"
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ—Ç—ë–Ω–∫–∞ ({gpt_status})...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            self.is_running = True
            self._signal_task = asyncio.create_task(self.check_signals_periodically())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling(drop_pending_updates=True)
            
            # –ñ–¥–µ–º –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                await asyncio.gather(self._signal_task)
            except asyncio.CancelledError:
                logger.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start(): {e}")
            await self.shutdown()
            raise
    
    # ... (–º–µ—Ç–æ–¥—ã shutdown, stop_command –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ GPT"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.subscribers:
            self.subscribers.append(chat_id)
            
            gpt_info = ""
            if self.gpt_analyzer:
                gpt_info = """
üß† <b>–ù–æ–≤–∏–Ω–∫–∞: –ò–ò –∞–Ω–∞–ª–∏–∑!</b>
‚Ä¢ –ö–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ò–ò
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ü–æ–Ω–∏–º–∞–π—Ç–µ –ü–û–ß–ï–ú–£ —Å—Ç–æ–∏—Ç –ø–æ–∫—É–ø–∞—Ç—å
"""
            
            await update.message.reply_text(
                f"""üê± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–æ—Ä–≥–æ–≤–æ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞!</b>

üìà –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ SBER{gpt_info}

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>
‚Ä¢ EMA20 - —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π
‚Ä¢ ADX > 25 - —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
‚Ä¢ +DI > -DI (—Ä–∞–∑–Ω–∏—Ü–∞ > 1) - –≤–æ—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
‚Ä¢ üî• ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞, –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
/signal - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª""",
                parse_mode='HTML'
            )
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")
        else:
            await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!")
    
    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /signal —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–≤–∞—à–∞ –ª–æ–≥–∏–∫–∞)
            signal = await self.analyze_market()
            
            if signal:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç –æ—Ç GPT
                gpt_advice = None
                if self.gpt_analyzer:
                    await update.message.reply_text("üß† –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –º–Ω–µ–Ω–∏–µ –ò–ò...")
                    
                    signal_data = {
                        'ticker': 'SBER',
                        'price': signal.price,
                        'ema20': signal.ema20,
                        'adx': signal.adx,
                        'plus_di': signal.plus_di,
                        'minus_di': signal.minus_di
                    }
                    
                    gpt_advice = await self.gpt_analyzer.get_signal_advice(signal_data)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º
                message = self.format_signal_with_gpt(signal, gpt_advice)
            else:
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—á–µ–º—É –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ (–≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ + GPT)
                message = await self._format_no_signal_analysis()
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /signal: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def format_signal_with_gpt(self, signal: TradingSignal, gpt_advice: Optional[GPTAdvice] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º"""
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∞—à —Ñ–æ—Ä–º–∞—Ç)
        base_message = f"""üîî <b>–°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò SBER</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {signal.price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {signal.ema20:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ –≤—ã—à–µ)

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {signal.adx:.1f} (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ >25)
‚Ä¢ <b>+DI:</b> {signal.plus_di:.1f}
‚Ä¢ <b>-DI:</b> {signal.minus_di:.1f}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {signal.plus_di - signal.minus_di:.1f}"""

        # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if gpt_advice:
            # –≠–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendation_emoji = {
                "BUY": "üü¢",
                "WEAK_BUY": "üü°", 
                "AVOID": "üî¥"
            }
            
            emoji = recommendation_emoji.get(gpt_advice.recommendation, "ü§ñ")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            recommendation_text = {
                "BUY": "–ü–û–ö–£–ü–ê–¢–¨",
                "WEAK_BUY": "–û–°–¢–û–†–û–ñ–ù–û –ü–û–ö–£–ü–ê–¢–¨",
                "AVOID": "–ù–ï –ü–û–ö–£–ü–ê–¢–¨"
            }
            
            rec_text = recommendation_text.get(gpt_advice.recommendation, gpt_advice.recommendation)
            
            gpt_section = f"""

ü§ñ <b>–ú–ù–ï–ù–ò–ï –ò–ò:</b>
{emoji} <b>{rec_text}</b> (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {gpt_advice.confidence}%)

üí≠ <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>
{gpt_advice.reasoning}"""
            
            if gpt_advice.risk_warning:
                gpt_section += f"""

‚ö†Ô∏è <b>–†–∏—Å–∫:</b> {gpt_advice.risk_warning}"""
            
            base_message += gpt_section
        else:
            # –ï—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            base_message += f"""

ü§ñ <b>–ò–ò –∞–Ω–∞–ª–∏–∑:</b> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
üìä –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        return base_message
    
    async def send_signal_to_subscribers(self, signal: TradingSignal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º GPT —Å–æ–≤–µ—Ç
        gpt_advice = None
        if self.gpt_analyzer:
            try:
                signal_data = {
                    'ticker': 'SBER',
                    'price': signal.price,
                    'ema20': signal.ema20,
                    'adx': signal.adx,
                    'plus_di': signal.plus_di,
                    'minus_di': signal.minus_di
                }
                gpt_advice = await self.gpt_analyzer.get_signal_advice(signal_data)
                logger.info(f"GPT —Å–æ–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {gpt_advice.recommendation if gpt_advice else '–ù–µ—Ç'}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GPT —Å–æ–≤–µ—Ç–∞: {e}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self.format_signal_with_gpt(signal, gpt_advice)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        failed_chats = []
        successful_sends = 0
        
        for chat_id in self.subscribers.copy():
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except (TelegramError, TimedOut, NetworkError) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
                failed_chats.append(chat_id)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in failed_chats:
            if chat_id in self.subscribers:
                self.subscribers.remove(chat_id)
        
        logger.info(f"–£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {successful_sends} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, {len(failed_chats)} –æ—à–∏–±–æ–∫")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:
    # - analyze_market()
    # - check_signals_periodically() 
    # - send_cancel_signal()
    # - check_peak_trend()
    # –ò —Ç.–¥.
