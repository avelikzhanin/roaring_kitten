import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional
import pandas as pd
from dataclasses import dataclass

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError, TimedOut, NetworkError

from .data_provider import TinkoffDataProvider
from .indicators import TechnicalIndicators

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    timestamp: datetime
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, telegram_token: str, tinkoff_token: str):
        self.telegram_token = telegram_token
        self.tinkoff_provider = TinkoffDataProvider(tinkoff_token)
        self.subscribers: List[int] = []
        self.last_signal_time: Optional[datetime] = None
        self.app: Optional[Application] = None
        self.is_running = False
        self.current_signal_active = False  # –¢—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        self.last_conditions_met = False    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
        self._signal_task = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.buy_price: Optional[float] = None  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
            self.app = Application.builder().token(self.telegram_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CommandHandler("stop", self.stop_command))
            self.app.add_handler(CommandHandler("signal", self.signal_command))
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –†–µ–≤—É—â–µ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            self.is_running = True
            self._signal_task = asyncio.create_task(self.check_signals_periodically())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
            await self.app.initialize()
            await self.app.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.app.updater.start_polling(drop_pending_updates=True)
            
            # –ñ–¥–µ–º –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                await asyncio.gather(self._signal_task)
            except asyncio.CancelledError:
                logger.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start(): {e}")
            await self.shutdown()
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
        
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        if self._signal_task and not self._signal_task.done():
            self._signal_task.cancel()
            try:
                await self._signal_task
            except asyncio.CancelledError:
                pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if self.app:
            try:
                if self.app.updater and self.app.updater.running:
                    await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        
        logger.info("–ö–æ—Ç—ë–Ω–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.subscribers:
            self.subscribers.append(chat_id)
            await update.message.reply_text(
                "üê± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–µ–≤—É—â–µ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞!</b>\n\n"
                "üìà –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ SBER\n"
                "üîî –ö–æ—Ç—ë–Ω–æ–∫ –±—É–¥–µ—Ç —Ä—ã—á–∞—Ç—å –æ —Å–∏–≥–Ω–∞–ª–∞—Ö –ø–æ–∫—É–ø–∫–∏ –∏ –∏—Ö –æ—Ç–º–µ–Ω–µ\n\n"
                "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
                "‚Ä¢ EMA20 - —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π\n"
                "‚Ä¢ ADX > 25 - —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥\n"
                "‚Ä¢ +DI > -DI (—Ä–∞–∑–Ω–∏—Ü–∞ > 1) - –≤–æ—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ\n"
                "‚Ä¢ üî• ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞, –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                "/signal - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª",
                parse_mode='HTML'
            )
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")
        else:
            await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!")
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        chat_id = update.effective_chat.id
        
        if chat_id in self.subscribers:
            self.subscribers.remove(chat_id)
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä—ã—á–∞–Ω–∏—è –∫–æ—Ç—ë–Ω–∫–∞")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: {chat_id}")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã")
    
    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signal - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            signal = await self.analyze_market()
            
            if signal:
                # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                message = f"""‚úÖ <b>–ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò SBER</b>

{self.format_signal_message(signal)}

‚è∞ <b>–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞:</b> {signal.timestamp.strftime('%H:%M %d.%m.%Y')}
"""
            else:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    candles = await self.tinkoff_provider.get_candles(hours=120)
                    
                    if len(candles) < 50:
                        message = "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    else:
                        df = self.tinkoff_provider.candles_to_dataframe(candles)
                        
                        if df.empty:
                            message = "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>"
                        else:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                            closes = df['close'].tolist()
                            highs = df['high'].tolist()
                            lows = df['low'].tolist()
                            
                            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
                            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
                            
                            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            current_price = closes[-1]
                            current_ema20 = ema20[-1]
                            current_adx = adx_data['adx'][-1]
                            current_plus_di = adx_data['plus_di'][-1]
                            current_minus_di = adx_data['minus_di'][-1]
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
                            price_above_ema = current_price > current_ema20 if not pd.isna(current_ema20) else False
                            strong_trend = current_adx > 25 if not pd.isna(current_adx) else False
                            positive_direction = current_plus_di > current_minus_di if not pd.isna(current_plus_di) and not pd.isna(current_minus_di) else False
                            di_difference = (current_plus_di - current_minus_di) > 1 if not pd.isna(current_plus_di) and not pd.isna(current_minus_di) else False
                            peak_trend = current_adx > 45 if not pd.isna(current_adx) else False
                            
                            all_conditions_met = all([price_above_ema, strong_trend, positive_direction, di_difference])
                            
                            peak_warning = ""
                            if peak_trend and self.current_signal_active:
                                peak_warning = "\nüî• <b>–í–ù–ò–ú–ê–ù–ò–ï: ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞! –í—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!</b>"
                            elif peak_trend:
                                peak_warning = "\nüî• <b>ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞</b>"
                            
                            message = f"""üìä <b>–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –†–´–ù–ö–ê SBER</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {current_ema20:.2f} ‚ÇΩ {'‚úÖ' if price_above_ema else '‚ùå'}

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {current_adx:.1f} {'‚úÖ' if strong_trend else '‚ùå'} (–Ω—É–∂–Ω–æ >25)
‚Ä¢ <b>+DI:</b> {current_plus_di:.1f}
‚Ä¢ <b>-DI:</b> {current_minus_di:.1f} {'‚úÖ' if positive_direction else '‚ùå'}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {current_plus_di - current_minus_di:.1f} {'‚úÖ' if di_difference else '‚ùå'} (–Ω—É–∂–Ω–æ >1){peak_warning}

{'üîî <b>–í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –æ–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª!</b>' if all_conditions_met else '‚è≥ <b>–û–∂–∏–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...</b>'}"""
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
                    message = "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /signal: {e}")
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML'
            )

    async def analyze_market(self) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 120 —á–∞—Å–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            candles = await self.tinkoff_provider.get_candles(hours=120)
            
            if len(candles) < 50:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                logger.warning("–ü—É—Å—Ç–æ–π DataFrame")
                return None
            
            # –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # EMA20
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            
            # ADX, +DI, -DI
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            last_idx = -1
            current_price = closes[last_idx]
            current_ema20 = ema20[last_idx]
            current_adx = adx_data['adx'][last_idx]
            current_plus_di = adx_data['plus_di'][last_idx]
            current_minus_di = adx_data['minus_di'][last_idx]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
            if any(pd.isna(val) for val in [current_ema20, current_adx, current_plus_di, current_minus_di]):
                logger.warning("–ù–µ –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
                return None
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í:")
            logger.info(f"üí∞ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ | EMA20: {current_ema20:.2f} ‚ÇΩ")
            logger.info(f"üìä ADX: {current_adx:.2f} | +DI: {current_plus_di:.2f} | -DI: {current_minus_di:.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π ADX –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            adx_last_5 = adx_data['adx'][-5:]
            logger.info(f"üî¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π ADX: {[f'{x:.2f}' if not pd.isna(x) else 'NaN' for x in adx_last_5]}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª–∞ (–ë–ï–ó –§–ò–õ–¨–¢–†–ê –°–í–ï–ñ–ï–°–¢–ò)
            conditions = [
                current_price > current_ema20,              # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
                current_adx > 25,                           # ADX –±–æ–ª—å—à–µ 25 
                current_plus_di > current_minus_di,         # +DI –±–æ–ª—å—à–µ -DI
                current_plus_di - current_minus_di > 1,     # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1
            ]
            
            condition_names = [
                "–¶–µ–Ω–∞ > EMA20",
                "ADX > 25", 
                "+DI > -DI",
                "–†–∞–∑–Ω–∏—Ü–∞ DI > 1",
            ]
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
            for i, (condition, name) in enumerate(zip(conditions, condition_names)):
                logger.info(f"   {i+1}. {name}: {'‚úÖ' if condition else '‚ùå'}")
            
            if all(conditions):
                logger.info("üéâ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª!")
                return TradingSignal(
                    timestamp=df.iloc[last_idx]['timestamp'],
                    price=current_price,
                    ema20=current_ema20,
                    adx=current_adx,
                    plus_di=current_plus_di,
                    minus_di=current_minus_di
                )
            else:
                logger.info(f"‚è≥ –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {sum(conditions)}/{len(conditions)}")
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return None
    
    async def check_peak_trend(self) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ (ADX > 45)"""
        try:
            candles = await self.tinkoff_provider.get_candles(hours=120)
            
            if len(candles) < 50:
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                return None
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # ADX
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            current_adx = adx_data['adx'][-1]
            current_price = closes[-1]
            
            if pd.isna(current_adx):
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞
            if current_adx > 45:
                logger.info(f"üî• –ü–ò–ö –¢–†–ï–ù–î–ê! ADX: {current_adx:.1f} > 45")
                return current_price
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return None
    
    async def get_current_price(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            candles = await self.tinkoff_provider.get_candles(hours=50)
            if candles:
                df = self.tinkoff_provider.candles_to_dataframe(candles)
                return df.iloc[-1]['close'] if not df.empty else 0
            return 0
        except:
            return 0
    
    def calculate_profit_percentage(self, buy_price: float, sell_price: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if buy_price <= 0:
            return 0
        return ((sell_price - buy_price) / buy_price) * 100
    
    async def send_peak_signal(self, current_price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
        profit_text = ""
        if self.buy_price and self.buy_price > 0:
            profit_percentage = self.calculate_profit_percentage(self.buy_price, current_price)
            profit_emoji = "üü¢" if profit_percentage > 0 else "üî¥" if profit_percentage < 0 else "‚ö™"
            profit_text = f"\nüí∞ <b>–ü—Ä–∏–±—ã–ª—å:</b> {profit_emoji} {profit_percentage:+.2f}% (—Å {self.buy_price:.2f} –¥–æ {current_price:.2f} ‚ÇΩ)"
        
        message = f"""üî• <b>–ü–ò–ö –¢–†–ï–ù–î–ê - –í–°–Å –ü–†–û–î–ê–Å–ú!</b>

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

üìä <b>–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b>
ADX > 45 - –º—ã –Ω–∞ –ø–∏–∫–µ —Ç—Ä–µ–Ω–¥–∞!
–í—Ä–µ–º—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å.{profit_text}

üîç <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...</b>"""
        
        failed_chats = []
        successful_sends = 0
        
        for chat_id in self.subscribers.copy():
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except (TelegramError, TimedOut, NetworkError) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏–∫–∞ –≤ —á–∞—Ç {chat_id}: {e}")
                failed_chats.append(chat_id)
                
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in failed_chats:
            if chat_id in self.subscribers:
                self.subscribers.remove(chat_id)
        
        logger.info(f"–°–∏–≥–Ω–∞–ª –ø–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {successful_sends} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, {len(failed_chats)} –æ—à–∏–±–æ–∫")
    
    async def send_signal_to_subscribers(self, signal: TradingSignal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
            
        message = self.format_signal_message(signal)
        
        failed_chats = []
        successful_sends = 0
        
        for chat_id in self.subscribers.copy():
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
            except (TelegramError, TimedOut, NetworkError) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
                failed_chats.append(chat_id)
                
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in failed_chats:
            if chat_id in self.subscribers:
                self.subscribers.remove(chat_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç: {chat_id}")
        
        logger.info(f"–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {successful_sends} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, {len(failed_chats)} –æ—à–∏–±–æ–∫")
    
    def format_signal_message(self, signal: TradingSignal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏–≥–Ω–∞–ª–æ–º"""
        return f"""üîî <b>–°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò SBER</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {signal.price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {signal.ema20:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ –≤—ã—à–µ)

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {signal.adx:.1f} (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ >25)
‚Ä¢ <b>+DI:</b> {signal.plus_di:.1f}
‚Ä¢ <b>-DI:</b> {signal.minus_di:.1f}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {signal.plus_di - signal.minus_di:.1f}"""
    
    async def check_signals_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        while self.is_running:
            try:
                logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
                signal = await self.analyze_market()
                conditions_met = signal is not None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º ADX –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ "–ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞"
                peak_signal = await self.check_peak_trend()
                
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                if conditions_met and not self.current_signal_active:
                    # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    await self.send_signal_to_subscribers(signal)
                    self.last_signal_time = signal.timestamp
                    self.current_signal_active = True
                    self.buy_price = signal.price  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ü–û–ö–£–ü–ö–ò –ø–æ —Ü–µ–Ω–µ {signal.price:.2f}")
                
                elif peak_signal and self.current_signal_active:
                    # –ü–∏–∫ —Ç—Ä–µ–Ω–¥–∞ (ADX > 45) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã
                    await self.send_peak_signal(peak_signal)
                    self.current_signal_active = False
                    self.buy_price = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
                    logger.info(f"üî• –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ü–ò–ö–ê –¢–†–ï–ù–î–ê –ø–æ —Ü–µ–Ω–µ {peak_signal:.2f}")
                
                elif not conditions_met and self.current_signal_active:
                    # –£—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã
                    current_price = await self.get_current_price()
                    await self.send_cancel_signal(current_price)
                    self.current_signal_active = False
                    self.buy_price = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
                    logger.info("‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –û–¢–ú–ï–ù–´")
                
                elif conditions_met and self.current_signal_active:
                    logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º")
                
                else:
                    logger.info("üìä –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª...")
                
                self.last_conditions_met = conditions_met
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç –¥–ª—è —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
                await asyncio.sleep(1200)  # 20 –º–∏–Ω—É—Ç = 1200 —Å–µ–∫—É–Ω–¥
                
            except asyncio.CancelledError:
                logger.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def send_cancel_signal(self, current_price: float = 0):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if current_price == 0:
            current_price = await self.get_current_price()
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
        profit_text = ""
        if self.buy_price and self.buy_price > 0 and current_price > 0:
            profit_percentage = self.calculate_profit_percentage(self.buy_price, current_price)
            profit_emoji = "üü¢" if profit_percentage > 0 else "üî¥" if profit_percentage < 0 else "‚ö™"
            profit_text = f"\nüí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {profit_emoji} {profit_percentage:+.2f}% (—Å {self.buy_price:.2f} –¥–æ {current_price:.2f} ‚ÇΩ)"
        
        message = f"""‚ùå <b>–°–ò–ì–ù–ê–õ –û–¢–ú–ï–ù–ï–ù SBER</b>

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</b>
–£—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è:
‚Ä¢ –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ EMA20
‚Ä¢ ADX —Å–Ω–∏–∑–∏–ª—Å—è < 25
‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ +DI/-DI
‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ DI —Å—Ç–∞–ª–∞ < 1{profit_text}

üîç <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...</b>"""
        
        failed_chats = []
        successful_sends = 0
        
        for chat_id in self.subscribers.copy():
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except (TelegramError, TimedOut, NetworkError) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –≤ —á–∞—Ç {chat_id}: {e}")
                failed_chats.append(chat_id)
                
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in failed_chats:
            if chat_id in self.subscribers:
                self.subscribers.remove(chat_id)
        
        logger.info(f"–°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {successful_sends} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, {len(failed_chats)} –æ—à–∏–±–æ–∫")
