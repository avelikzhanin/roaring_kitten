# src/trading_bot.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional
import pandas as pd
from dataclasses import dataclass

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError, TimedOut, NetworkError

from .data_provider import TinkoffDataProvider
from .indicators import TechnicalIndicators
from .gpt_analyzer import GPTMarketAnalyzer, GPTAdvice  # –ò–°–ü–†–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    timestamp: datetime
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, telegram_token: str, tinkoff_token: str, openai_token: str = None):
        self.telegram_token = telegram_token
        self.tinkoff_provider = TinkoffDataProvider(tinkoff_token)
        
        # GPT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
        self.gpt_analyzer = GPTMarketAnalyzer(openai_token) if openai_token else None
        
        self.subscribers: List[int] = []
        self.last_signal_time: Optional[datetime] = None
        self.app: Optional[Application] = None
        self.is_running = False
        self.current_signal_active = False
        self.last_conditions_met = False
        self._signal_task = None
        self.buy_price: Optional[float] = None

    async def shutdown(self):
        """Graceful shutdown –±–æ—Ç–∞"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        if self._signal_task and not self._signal_task.done():
            self._signal_task.cancel()
            try:
                await self._signal_task
            except asyncio.CancelledError:
                pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
        if self.app:
            try:
                await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
                logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –±–æ—Ç–∞: {e}")
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        chat_id = update.effective_chat.id
        
        if chat_id in self.subscribers:
            self.subscribers.remove(chat_id)
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: {chat_id}")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã")
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
            self.app = Application.builder().token(self.telegram_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CommandHandler("stop", self.stop_command))
            self.app.add_handler(CommandHandler("signal", self.signal_command))
            
            gpt_status = "—Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º" if self.gpt_analyzer else "–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è"
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ—Ç—ë–Ω–∫–∞ ({gpt_status})...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            self.is_running = True
            self._signal_task = asyncio.create_task(self.check_signals_periodically())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling(drop_pending_updates=True)
            
            # –ñ–¥–µ–º –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                await asyncio.gather(self._signal_task)
            except asyncio.CancelledError:
                logger.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start(): {e}")
            await self.shutdown()
            raise
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ GPT"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.subscribers:
            self.subscribers.append(chat_id)
            
            gpt_info = ""
            if self.gpt_analyzer:
                gpt_info = """
üß† <b>–ù–æ–≤–∏–Ω–∫–∞: –ò–ò –∞–Ω–∞–ª–∏–∑!</b>
‚Ä¢ –ö–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ò–ò
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ü–æ–Ω–∏–º–∞–π—Ç–µ –ü–û–ß–ï–ú–£ —Å—Ç–æ–∏—Ç –ø–æ–∫—É–ø–∞—Ç—å
"""
            
            await update.message.reply_text(
                f"""üê± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–æ—Ä–≥–æ–≤–æ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞!</b>

üìà –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ SBER{gpt_info}

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>
‚Ä¢ EMA20 - —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π
‚Ä¢ ADX > 25 - —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
‚Ä¢ +DI > -DI (—Ä–∞–∑–Ω–∏—Ü–∞ > 1) - –≤–æ—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
‚Ä¢ üî• ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞, –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
/signal - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª""",
                parse_mode='HTML'
            )
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")
        else:
            await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!")
    
    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /signal —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            signal = await self.analyze_market()
            
            if signal:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç –æ—Ç GPT
                gpt_advice = None
                if self.gpt_analyzer:
                    await update.message.reply_text("üß† –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –º–Ω–µ–Ω–∏–µ –ò–ò...")
                    
                    signal_data = {
                        'ticker': 'SBER',
                        'price': signal.price,
                        'ema20': signal.ema20,
                        'adx': signal.adx,
                        'plus_di': signal.plus_di,
                        'minus_di': signal.minus_di
                    }
                    
                    gpt_advice = await self.gpt_analyzer.get_signal_advice(signal_data)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º
                message = self.format_signal_with_gpt(signal, gpt_advice)
            else:
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—á–µ–º—É –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
                message = await self._format_no_signal_analysis()
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /signal: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def format_signal_with_gpt(self, signal: TradingSignal, gpt_advice: Optional[GPTAdvice] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º"""
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        base_message = f"""üîî <b>–°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò SBER</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {signal.price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {signal.ema20:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ –≤—ã—à–µ)

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {signal.adx:.1f} (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ >25)
‚Ä¢ <b>+DI:</b> {signal.plus_di:.1f}
‚Ä¢ <b>-DI:</b> {signal.minus_di:.1f}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {signal.plus_di - signal.minus_di:.1f}"""

        # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if gpt_advice:
            # –≠–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendation_emoji = {
                "BUY": "üü¢",
                "WEAK_BUY": "üü°", 
                "AVOID": "üî¥"
            }
            
            emoji = recommendation_emoji.get(gpt_advice.recommendation, "ü§ñ")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            recommendation_text = {
                "BUY": "–ü–û–ö–£–ü–ê–¢–¨",
                "WEAK_BUY": "–û–°–¢–û–†–û–ñ–ù–û –ü–û–ö–£–ü–ê–¢–¨",
                "AVOID": "–ù–ï –ü–û–ö–£–ü–ê–¢–¨"
            }
            
            rec_text = recommendation_text.get(gpt_advice.recommendation, gpt_advice.recommendation)
            
            gpt_section = f"""

ü§ñ <b>–ú–ù–ï–ù–ò–ï –ò–ò:</b>
{emoji} <b>{rec_text}</b> (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {gpt_advice.confidence}%)

üí≠ <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>
{gpt_advice.reasoning}"""
            
            if gpt_advice.risk_warning:
                gpt_section += f"""

‚ö†Ô∏è <b>–†–∏—Å–∫:</b> {gpt_advice.risk_warning}"""
            
            base_message += gpt_section
        else:
            # –ï—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            base_message += f"""

ü§ñ <b>–ò–ò –∞–Ω–∞–ª–∏–∑:</b> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
üìä –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        return base_message
    
    async def send_signal_to_subscribers(self, signal: TradingSignal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —Å GPT –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º GPT —Å–æ–≤–µ—Ç
        gpt_advice = None
        if self.gpt_analyzer:
            try:
                signal_data = {
                    'ticker': 'SBER',
                    'price': signal.price,
                    'ema20': signal.ema20,
                    'adx': signal.adx,
                    'plus_di': signal.plus_di,
                    'minus_di': signal.minus_di
                }
                gpt_advice = await self.gpt_analyzer.get_signal_advice(signal_data)
                logger.info(f"GPT —Å–æ–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {gpt_advice.recommendation if gpt_advice else '–ù–µ—Ç'}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GPT —Å–æ–≤–µ—Ç–∞: {e}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self.format_signal_with_gpt(signal, gpt_advice)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        failed_chats = []
        successful_sends = 0
        
        for chat_id in self.subscribers.copy():
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except (TelegramError, TimedOut, NetworkError) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
                failed_chats.append(chat_id)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in failed_chats:
            if chat_id in self.subscribers:
                self.subscribers.remove(chat_id)
        
        logger.info(f"–£–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {successful_sends} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, {len(failed_chats)} –æ—à–∏–±–æ–∫")

    async def analyze_market(self) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            candles = await self.tinkoff_provider.get_candles(hours=100)
            if len(candles) < 50:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(candles)} —Å–≤–µ—á–µ–π")
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty or len(df) < 50:
                logger.warning("–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π DataFrame")
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_price = closes[-1]
            current_ema20 = ema20[-1]
            current_adx = adx_data['adx'][-1]
            current_plus_di = adx_data['plus_di'][-1]
            current_minus_di = adx_data['minus_di'][-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞
            if (current_price > current_ema20 and
                current_adx > 25 and
                current_plus_di > current_minus_di and
                (current_plus_di - current_minus_di) > 1):
                
                return TradingSignal(
                    timestamp=datetime.now(timezone.utc),
                    price=current_price,
                    ema20=current_ema20,
                    adx=current_adx,
                    plus_di=current_plus_di,
                    minus_di=current_minus_di
                )
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return None

    async def check_signals_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        while self.is_running:
            try:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ–∫...")
                
                signal = await self.analyze_market()
                conditions_met = signal is not None
                
                # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                if conditions_met and not self.current_signal_active:
                    # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
                    await self.send_signal_to_subscribers(signal)
                    self.current_signal_active = True
                    self.last_signal_time = datetime.now(timezone.utc)
                    self.buy_price = signal.price
                    logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ —Ü–µ–Ω–µ {signal.price:.2f}")
                    
                elif not conditions_met and self.current_signal_active:
                    # –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã
                    await self.send_cancel_signal()
                    self.current_signal_active = False
                    self.buy_price = None
                    logger.info("‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞
                if self.current_signal_active and signal:
                    await self.check_peak_trend(signal)
                
                self.last_conditions_met = conditions_met
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            
            # –ñ–¥–µ–º 20 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(20 * 60)

    async def send_cancel_signal(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã"""
        if not self.app or not self.subscribers:
            return
        
        cancel_message = """üõë <b>–û–¢–ú–ï–ù–ê –°–ò–ì–ù–ê–õ–ê SBER</b>

‚ùå –£—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
        
        for chat_id in self.subscribers.copy():
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id,
                    text=cancel_message,
                    parse_mode='HTML'
                )
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ —á–∞—Ç {chat_id}: {e}")

    async def check_peak_trend(self, signal: TradingSignal):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ (ADX > 45)"""
        if signal.adx > 45:
            peak_message = f"""üî• <b>–ü–ò–ö –¢–†–ï–ù–î–ê SBER!</b>

üìä <b>ADX:</b> {signal.adx:.1f} (>45 - –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥)
üí∞ <b>–¶–µ–Ω–∞:</b> {signal.price:.2f} ‚ÇΩ

‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b> –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∏–∫—Å–∞—Ü–∏—é –ø—Ä–∏–±—ã–ª–∏!
–°–∏–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã —á–∞—Å—Ç–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–∏–∫–∞."""
            
            for chat_id in self.subscribers.copy():
                try:
                    await self.app.bot.send_message(
                        chat_id=chat_id,
                        text=peak_message,
                        parse_mode='HTML'
                    )
                    await asyncio.sleep(0.1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ —á–∞—Ç {chat_id}: {e}")

    async def _format_no_signal_analysis(self) -> str:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—á–µ–º—É –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            candles = await self.tinkoff_provider.get_candles(hours=50)
            if not candles:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞"
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            current_price = closes[-1]
            current_ema20 = ema20[-1]
            current_adx = adx_data['adx'][-1]
            current_plus_di = adx_data['plus_di'][-1]
            current_minus_di = adx_data['minus_di'][-1]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ
            conditions = []
            
            price_vs_ema = current_price > current_ema20
            conditions.append(f"‚Ä¢ –¶–µ–Ω–∞ vs EMA20: {'‚úÖ' if price_vs_ema else '‚ùå'} {current_price:.2f} vs {current_ema20:.2f}")
            
            strong_trend = current_adx > 25
            conditions.append(f"‚Ä¢ –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥: {'‚úÖ' if strong_trend else '‚ùå'} ADX {current_adx:.1f}")
            
            positive_direction = current_plus_di > current_minus_di
            conditions.append(f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'‚úÖ' if positive_direction else '‚ùå'} +DI {current_plus_di:.1f} vs -DI {current_minus_di:.1f}")
            
            di_difference = (current_plus_di - current_minus_di) > 1
            difference_value = current_plus_di - current_minus_di
            conditions.append(f"‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ DI: {'‚úÖ' if di_difference else '‚ùå'} {difference_value:.1f}")
            
            message = f"""üìä <b>–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê SBER</b>

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π:</b>
{chr(10).join(conditions)}

<b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏' if all([price_vs_ema, strong_trend, positive_direction, di_difference]) else 'üî¥ –°–∏–≥–Ω–∞–ª–∞ –Ω–µ—Ç'}"""
            
            return message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"
