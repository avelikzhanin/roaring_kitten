import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class UserInterface:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞"""
    
    def __init__(self, database, signal_processor, gpt_analyzer=None):
        self.db = database
        self.signal_processor = signal_processor
        self.gpt_analyzer = gpt_analyzer
        self.app = None
    
    def set_app(self, app):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.app = app
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        success = await self.db.add_or_update_user(
            telegram_id=chat_id,
            username=user.username if user else None,
            first_name=user.first_name if user else None
        )
        
        if success:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ SBER
            await self.db.subscribe_user_to_ticker(chat_id, 'SBER')
            
            gpt_status = "ü§ñ <b>GPT –∞–Ω–∞–ª–∏–∑:</b> –≤–∫–ª—é—á–µ–Ω" if self.gpt_analyzer else "üìä <b>–†–µ–∂–∏–º:</b> —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            
            await update.message.reply_text(
                "üê± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–µ–≤—É—â–µ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞!</b>\n\n"
                "üìà –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
                "üîî –ö–æ—Ç—ë–Ω–æ–∫ —Å–æ–æ–±—â–∏—Ç –æ —Å–∏–≥–Ω–∞–ª–∞—Ö –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏\n\n"
                f"{gpt_status}\n\n"
                "<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>\n"
                "‚Ä¢ EMA20 - —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π\n"
                "‚Ä¢ ADX > 25 - —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥\n"
                "‚Ä¢ +DI > -DI (—Ä–∞–∑–Ω–∏—Ü–∞ > 1)\n"
                "‚Ä¢ üî• ADX > 45 - –ø–∏–∫, –ø—Ä–æ–¥–∞–≤–∞—Ç—å!\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
                "/signal - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã\n"
                "/portfolio - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏",
                parse_mode='HTML'
            )
            logger.info(f"üë§ –ü–æ–¥–ø–∏—Å—á–∏–∫: {chat_id} (@{user.username if user else 'unknown'})")
        else:
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        chat_id = update.effective_chat.id
        await self.db.deactivate_user(chat_id)
        
        await update.message.reply_text(
            "‚ùå <b>–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–æ—Ç—ë–Ω–∫–∞</b>\n\n"
            "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            parse_mode='HTML'
        )
        logger.info(f"üë§ –û—Ç–ø–∏—Å–∫–∞: {chat_id}")
    
    async def portfolio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º"""
        chat_id = update.effective_chat.id
        subscriptions = await self.db.get_user_subscriptions(chat_id)
        available_tickers = await self.db.get_available_tickers()
        
        if subscriptions:
            sub_list = [f"üîî {sub['symbol']} ({sub['name']})" for sub in subscriptions]
            message = f"üìä <b>–í–ê–® –ü–û–†–¢–§–ï–õ–¨</b>\n\n<b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n" + "\n".join(sub_list)
        else:
            message = "üìä <b>–í–ê–® –ü–û–†–¢–§–ï–õ–¨</b>\n\n<b>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫</b>"
        
        keyboard = []
        subscribed_symbols = {sub['symbol'] for sub in subscriptions}
        
        for ticker in available_tickers:
            symbol = ticker['symbol']
            name = ticker['name']
            if symbol in subscribed_symbols:
                button_text = f"üîî {symbol} ({name}) ‚ùå"
                callback_data = f"unsub_{symbol}"
            else:
                button_text = f"‚ö™ {symbol} ({name}) ‚ûï"
                callback_data = f"sub_{symbol}"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
