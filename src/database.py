# src/database.py
import asyncio
import asyncpg
from datetime import datetime
from typing import List, Optional, Dict, Set
import logging

logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π (–ë–ï–ó ADX)"""
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.pool: Optional[asyncpg.Pool] = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π ADX"""
        try:
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            self.pool = await asyncpg.create_pool(
                self.database_url,
                min_size=1,
                max_size=5,
                command_timeout=60
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            async with self.pool.acquire() as conn:
                version = await conn.fetchval('SELECT version()')
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL: {version[:50]}...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ ADX)
            await self.create_tables()
            await self.migrate_remove_adx()  # –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º ADX –∫–æ–ª–æ–Ω–∫–∏
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –∏ –º–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.ensure_tickers()
            await self.migrate_existing_users()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–ë–ï–ó ADX)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            logger.error(f"‚ùå URL –ë–î: {self.database_url[:20]}...")
            raise
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.pool:
            await self.pool.close()
            logger.info("üìä –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def migrate_remove_adx(self):
        """–ù–û–í–û–ï: –ú–∏–≥—Ä–∞—Ü–∏—è - —É–¥–∞–ª–µ–Ω–∏–µ ADX, plus_di, minus_di –∏–∑ signals"""
        if not self.pool:
            return
            
        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∏ ADX
                adx_exists = await conn.fetchval('''
                    SELECT EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'signals' AND column_name = 'adx'
                    )
                ''')
                
                if adx_exists:
                    logger.info("üîÑ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ ADX –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ signals...")
                    
                    # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ ADX/DI
                    await conn.execute('ALTER TABLE signals DROP COLUMN IF EXISTS adx')
                    await conn.execute('ALTER TABLE signals DROP COLUMN IF EXISTS plus_di')
                    await conn.execute('ALTER TABLE signals DROP COLUMN IF EXISTS minus_di')
                    
                    logger.info("‚úÖ ADX –∫–æ–ª–æ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
                else:
                    logger.info("‚úÖ ADX –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ADX: {e}")
            # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    
    async def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –ë–ï–ó ADX –ø–æ–ª–µ–π"""
        if not self.pool:
            return
            
        async with self.pool.acquire() as conn:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    username VARCHAR(255),
                    first_name VARCHAR(255),
                    created_at TIMESTAMP DEFAULT NOW(),
                    is_active BOOLEAN DEFAULT TRUE,
                    last_activity TIMESTAMP DEFAULT NOW()
                )
            ''')
            
            await conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_users_telegram_id 
                ON users(telegram_id)
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–∫–µ—Ä–æ–≤ - —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS tickers (
                    id SERIAL PRIMARY KEY,
                    symbol VARCHAR(20) UNIQUE NOT NULL,
                    figi VARCHAR(50) UNIQUE NOT NULL,
                    name VARCHAR(255)
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º is_active –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            try:
                await conn.execute('''
                    ALTER TABLE tickers 
                    ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE
                ''')
                logger.info("üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ is_active –≤ tickers")
            except Exception as e:
                logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∞ is_active —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ tickers: {e}")
            
            # –ù–û–í–ê–Ø: –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS user_subscriptions (
                    id SERIAL PRIMARY KEY,
                    user_telegram_id BIGINT NOT NULL,
                    ticker_id INTEGER REFERENCES tickers(id),
                    subscribed_at TIMESTAMP DEFAULT NOW(),
                    is_active BOOLEAN DEFAULT TRUE,
                    UNIQUE(user_telegram_id, ticker_id)
                )
            ''')
            
            await conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_subscriptions_user 
                ON user_subscriptions(user_telegram_id)
            ''')
            
            await conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_subscriptions_ticker 
                ON user_subscriptions(ticker_id)
            ''')
            
            # –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ç–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ë–ï–ó ADX –ø–æ–ª–µ–π
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS signals (
                    id SERIAL PRIMARY KEY,
                    signal_type VARCHAR(20) NOT NULL,
                    price DECIMAL(10, 2),
                    ema20 DECIMAL(10, 2),
                    gpt_recommendation VARCHAR(20),
                    gpt_confidence INTEGER,
                    gpt_take_profit DECIMAL(10, 2),
                    gpt_stop_loss DECIMAL(10, 2),
                    created_at TIMESTAMP DEFAULT NOW()
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º ticker_id –≤ signals –µ—Å–ª–∏ –Ω–µ—Ç
            try:
                await conn.execute('''
                    ALTER TABLE signals 
                    ADD COLUMN IF NOT EXISTS ticker_id INTEGER REFERENCES tickers(id)
                ''')
                logger.info("üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ ticker_id –≤ signals")
            except Exception as e:
                logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∞ ticker_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ signals: {e}")
            
            await conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_signals_created 
                ON signals(created_at DESC)
            ''')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS active_positions (
                    id SERIAL PRIMARY KEY,
                    user_telegram_id BIGINT NOT NULL,
                    buy_signal_id INTEGER REFERENCES signals(id),
                    buy_price DECIMAL(10, 2),
                    opened_at TIMESTAMP DEFAULT NOW()
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º ticker_id –≤ active_positions –µ—Å–ª–∏ –Ω–µ—Ç
            try:
                await conn.execute('''
                    ALTER TABLE active_positions 
                    ADD COLUMN IF NOT EXISTS ticker_id INTEGER REFERENCES tickers(id)
                ''')
                logger.info("üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ ticker_id –≤ active_positions")
            except Exception as e:
                logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∞ ticker_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ active_positions: {e}")
            
            logger.info("üìã –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã (–ë–ï–ó ADX –ø–æ–ª–µ–π)")
    
    async def ensure_tickers(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–∫–µ—Ä—ã"""
        if not self.pool:
            return
            
        tickers_data = [
            ('SBER', 'BBG004730N88', '–°–±–µ—Ä–±–∞–Ω–∫'),
            ('LKOH', 'BBG004731032', '–õ—É–∫–æ–π–ª'),
            ('GAZP', 'BBG004730RP0', '–ì–∞–∑–ø—Ä–æ–º')
        ]
        
        async with self.pool.acquire() as conn:
            for symbol, figi, name in tickers_data:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∏–∫–µ—Ä
                    existing = await conn.fetchval(
                        "SELECT id FROM tickers WHERE symbol = $1", symbol
                    )
                    
                    if existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                        await conn.execute('''
                            UPDATE tickers 
                            SET figi = $2, name = $3, is_active = TRUE
                            WHERE symbol = $1
                        ''', symbol, figi, name)
                        logger.info(f"‚úÖ –¢–∏–∫–µ—Ä {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω (id={existing})")
                    else:
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                        ticker_id = await conn.fetchval('''
                            INSERT INTO tickers (symbol, figi, name, is_active)
                            VALUES ($1, $2, $3, TRUE)
                            RETURNING id
                        ''', symbol, figi, name)
                        logger.info(f"‚úÖ –¢–∏–∫–µ—Ä {symbol} –¥–æ–±–∞–≤–ª–µ–Ω (id={ticker_id})")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
    
    async def migrate_existing_users(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ SBER"""
        if not self.pool:
            return
            
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ä–∞ SBER
                sber_id = await conn.fetchval(
                    "SELECT id FROM tickers WHERE symbol = 'SBER'"
                )
                
                if not sber_id:
                    logger.error("‚ùå –¢–∏–∫–µ—Ä SBER –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
                    return
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ SBER (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã)
                migrated = await conn.execute('''
                    INSERT INTO user_subscriptions (user_telegram_id, ticker_id)
                    SELECT telegram_id, $1 
                    FROM users 
                    WHERE is_active = TRUE
                    ON CONFLICT (user_telegram_id, ticker_id) DO NOTHING
                ''', sber_id)
                
                logger.info(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {migrated}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
    
    async def get_user_subscriptions(self, telegram_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.pool:
            return []
            
        try:
            async with self.pool.acquire() as conn:
                rows = await conn.fetch('''
                    SELECT t.id, t.symbol, t.figi, t.name, us.subscribed_at
                    FROM user_subscriptions us
                    JOIN tickers t ON us.ticker_id = t.id
                    WHERE us.user_telegram_id = $1 AND us.is_active = TRUE AND t.is_active = TRUE
                    ORDER BY t.symbol
                ''', telegram_id)
                
                return [dict(row) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è {telegram_id}: {e}")
            return []
    
    async def get_available_tickers(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
        if not self.pool:
            return []
            
        try:
            async with self.pool.acquire() as conn:
                rows = await conn.fetch('''
                    SELECT id, symbol, figi, name
                    FROM tickers
                    WHERE is_active = TRUE
                    ORDER BY symbol
                ''')
                
                return [dict(row) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
            return []
    
    async def subscribe_user_to_ticker(self, telegram_id: int, symbol: str) -> bool:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–∏–∫–µ—Ä"""
        if not self.pool:
            return False
            
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ä–∞
                ticker_id = await conn.fetchval(
                    "SELECT id FROM tickers WHERE symbol = $1 AND is_active = TRUE",
                    symbol
                )
                
                if not ticker_id:
                    logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                await conn.execute('''
                    INSERT INTO user_subscriptions (user_telegram_id, ticker_id)
                    VALUES ($1, $2)
                    ON CONFLICT (user_telegram_id, ticker_id) 
                    DO UPDATE SET is_active = TRUE, subscribed_at = NOW()
                ''', telegram_id, ticker_id)
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {symbol}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {telegram_id} –Ω–∞ {symbol}: {e}")
            return False
    
    async def unsubscribe_user_from_ticker(self, telegram_id: int, symbol: str) -> bool:
        """–û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Ç–∏–∫–µ—Ä–∞"""
        if not self.pool:
            return False
            
        try:
            async with self.pool.acquire() as conn:
                result = await conn.execute('''
                    UPDATE user_subscriptions 
                    SET is_active = FALSE
                    FROM tickers t
                    WHERE user_subscriptions.ticker_id = t.id 
                    AND user_subscriptions.user_telegram_id = $1 
                    AND t.symbol = $2
                ''', telegram_id, symbol)
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç {symbol}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ {telegram_id} –æ—Ç {symbol}: {e}")
            return False
    
    async def get_subscribers_for_ticker(self, symbol: str) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        if not self.pool:
            return []
            
        try:
            async with self.pool.acquire() as conn:
                rows = await conn.fetch('''
                    SELECT DISTINCT us.user_telegram_id
                    FROM user_subscriptions us
                    JOIN tickers t ON us.ticker_id = t.id
                    JOIN users u ON us.user_telegram_id = u.telegram_id
                    WHERE t.symbol = $1 
                    AND us.is_active = TRUE 
                    AND u.is_active = TRUE
                    AND t.is_active = TRUE
                ''', symbol)
                
                return [row['user_telegram_id'] for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ {symbol}: {e}")
            return []
    
    async def get_ticker_info(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–µ"""
        if not self.pool:
            return None
            
        try:
            async with self.pool.acquire() as conn:
                row = await conn.fetchrow('''
                    SELECT id, symbol, figi, name
                    FROM tickers
                    WHERE symbol = $1 AND is_active = TRUE
                ''', symbol)
                
                return dict(row) if row else None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {symbol}: {e}")
            return None
    
    # === –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
    
    async def add_or_update_user(self, telegram_id: int, username: str = None, first_name: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.pool:
            return False
            
        try:
            async with self.pool.acquire() as conn:
                await conn.execute('''
                    INSERT INTO users (telegram_id, username, first_name)
                    VALUES ($1, $2, $3)
                    ON CONFLICT (telegram_id) 
                    DO UPDATE SET 
                        username = COALESCE($2, users.username),
                        first_name = COALESCE($3, users.first_name),
                        last_activity = NOW(),
                        is_active = TRUE
                ''', telegram_id, username, first_name)
                
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def deactivate_user(self, telegram_id: int):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ /stop)"""
        if not self.pool:
            return
            
        try:
            async with self.pool.acquire() as conn:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await conn.execute('''
                    UPDATE users 
                    SET is_active = FALSE 
                    WHERE telegram_id = $1
                ''', telegram_id)
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏
                await conn.execute('''
                    UPDATE user_subscriptions 
                    SET is_active = FALSE 
                    WHERE user_telegram_id = $1
                ''', telegram_id)
                
                logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # === –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ë–ï–ó ADX ===
    
    async def save_signal(self, symbol: str, signal_type: str, price: float, 
                         ema20: float, gpt_data: Dict = None) -> Optional[int]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î –ë–ï–ó ADX –ø–æ–ª–µ–π"""
        if not self.pool:
            return None
            
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ä–∞
                ticker_id = await conn.fetchval(
                    "SELECT id FROM tickers WHERE symbol = $1", symbol
                )
                
                if not ticker_id:
                    logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –ë–ï–ó ADX –ø–æ–ª–µ–π
                signal_id = await conn.fetchval('''
                    INSERT INTO signals (
                        ticker_id, signal_type, price, ema20, 
                        gpt_recommendation, gpt_confidence, gpt_take_profit, gpt_stop_loss
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                    RETURNING id
                ''', 
                    ticker_id, signal_type, price, ema20,
                    gpt_data.get('recommendation') if gpt_data else None,
                    gpt_data.get('confidence') if gpt_data else None,
                    float(gpt_data.get('take_profit', 0) or 0) if gpt_data and gpt_data.get('take_profit') else None,
                    float(gpt_data.get('stop_loss', 0) or 0) if gpt_data and gpt_data.get('stop_loss') else None
                )
                
                logger.info(f"üíæ –°–∏–≥–Ω–∞–ª {signal_type} –¥–ª—è {symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω (id={signal_id}) –ë–ï–ó ADX")
                return signal_id
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    # === –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
    
    async def open_position(self, telegram_id: int, symbol: str, signal_id: int, buy_price: float):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.pool:
            return
            
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ä–∞
                ticker_id = await conn.fetchval(
                    "SELECT id FROM tickers WHERE symbol = $1", symbol
                )
                
                if not ticker_id:
                    logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
                await conn.execute('''
                    DELETE FROM active_positions 
                    WHERE user_telegram_id = $1 AND ticker_id = $2
                ''', telegram_id, ticker_id)
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                await conn.execute('''
                    INSERT INTO active_positions 
                    (user_telegram_id, ticker_id, buy_signal_id, buy_price)
                    VALUES ($1, $2, $3, $4)
                ''', telegram_id, ticker_id, signal_id, buy_price)
                
                logger.info(f"üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol} –¥–ª—è {telegram_id} –ø–æ —Ü–µ–Ω–µ {buy_price}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
    
    async def close_positions(self, symbol: str, signal_type: str = 'SELL'):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ —Ç–∏–∫–µ—Ä—É"""
        if not self.pool:
            return
            
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ä–∞
                ticker_id = await conn.fetchval(
                    "SELECT id FROM tickers WHERE symbol = $1", symbol
                )
                
                if not ticker_id:
                    logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
                positions = await conn.fetch('''
                    SELECT * FROM active_positions WHERE ticker_id = $1
                ''', ticker_id)
                
                if positions:
                    logger.info(f"üìä –ó–∞–∫—Ä—ã–≤–∞–µ–º {len(positions)} –ø–æ–∑–∏—Ü–∏–π {symbol} ({signal_type})")
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
                await conn.execute('''
                    DELETE FROM active_positions WHERE ticker_id = $1
                ''', ticker_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π {symbol}: {e}")
    
    async def get_active_positions_count(self, symbol: str = None) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.pool:
            return 0
            
        try:
            async with self.pool.acquire() as conn:
                if symbol:
                    # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
                    ticker_id = await conn.fetchval(
                        "SELECT id FROM tickers WHERE symbol = $1", symbol
                    )
                    if not ticker_id:
                        return 0
                    
                    count = await conn.fetchval(
                        'SELECT COUNT(*) FROM active_positions WHERE ticker_id = $1',
                        ticker_id
                    )
                else:
                    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    count = await conn.fetchval(
                        'SELECT COUNT(*) FROM active_positions'
                    )
                
                return count or 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return 0
    
    async def get_positions_for_profit_calculation(self, symbol: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏"""
        if not self.pool:
            return []
            
        try:
            async with self.pool.acquire() as conn:
                ticker_id = await conn.fetchval(
                    "SELECT id FROM tickers WHERE symbol = $1", symbol
                )
                
                if not ticker_id:
                    return []
                
                rows = await conn.fetch('''
                    SELECT buy_price, COUNT(*) as position_count
                    FROM active_positions
                    WHERE ticker_id = $1
                    GROUP BY buy_price
                ''', ticker_id)
                
                return [dict(row) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {symbol}: {e}")
            return []
    
    # === –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞) ===
    
    async def get_active_users(self) -> List[int]:
        """–£–°–¢–ê–†–ï–í–®–ò–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ get_active_users(). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_subscribers_for_ticker()")
        return await self.get_subscribers_for_ticker('SBER')
    
    async def get_last_buy_signal(self, symbol: str = 'SBER') -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ –ë–ï–ó ADX"""
        if not self.pool:
            return None
            
        try:
            async with self.pool.acquire() as conn:
                ticker_id = await conn.fetchval(
                    "SELECT id FROM tickers WHERE symbol = $1", symbol
                )
                
                if not ticker_id:
                    return None
                
                row = await conn.fetchrow('''
                    SELECT * FROM signals 
                    WHERE ticker_id = $1 AND signal_type = 'BUY' 
                    ORDER BY created_at DESC 
                    LIMIT 1
                ''', ticker_id)
                
                return dict(row) if row else None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
    
    async def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.pool:
            return {}
            
        try:
            async with self.pool.acquire() as conn:
                stats = {}
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                stats['total_users'] = await conn.fetchval(
                    'SELECT COUNT(*) FROM users'
                )
                stats['active_users'] = await conn.fetchval(
                    'SELECT COUNT(*) FROM users WHERE is_active = TRUE'
                )
                
                # –ü–æ–¥–ø–∏—Å–∫–∏
                stats['total_subscriptions'] = await conn.fetchval(
                    'SELECT COUNT(*) FROM user_subscriptions WHERE is_active = TRUE'
                )
                
                # –°–∏–≥–Ω–∞–ª—ã (–ë–ï–ó ADX —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
                stats['total_signals'] = await conn.fetchval(
                    'SELECT COUNT(*) FROM signals'
                )
                stats['buy_signals'] = await conn.fetchval(
                    "SELECT COUNT(*) FROM signals WHERE signal_type = 'BUY'"
                )
                stats['sell_signals'] = await conn.fetchval(
                    "SELECT COUNT(*) FROM signals WHERE signal_type IN ('SELL', 'PEAK')"
                )
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                stats['open_positions'] = await conn.fetchval(
                    'SELECT COUNT(*) FROM active_positions'
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
                ticker_stats = await conn.fetch('''
                    SELECT t.symbol, COUNT(us.id) as subscribers
                    FROM tickers t
                    LEFT JOIN user_subscriptions us ON t.id = us.ticker_id AND us.is_active = TRUE
                    WHERE t.is_active = TRUE
                    GROUP BY t.symbol
                    ORDER BY t.symbol
                ''')
                
                stats['ticker_subscriptions'] = {row['symbol']: row['subscribers'] for row in ticker_stats}
                
                return stats
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
