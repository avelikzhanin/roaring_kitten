# src/database.py
import asyncio
import asyncpg
from datetime import datetime
from typing import List, Optional, Dict
import logging

logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.pool: Optional[asyncpg.Pool] = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            self.pool = await asyncpg.create_pool(
                self.database_url,
                min_size=1,
                max_size=5,
                command_timeout=60
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            async with self.pool.acquire() as conn:
                version = await conn.fetchval('SELECT version()')
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL: {version[:50]}...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            await self.create_tables()
            
            # –î–æ–±–∞–≤–ª—è–µ–º SBER –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await self.ensure_sber_ticker()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            logger.error(f"‚ùå URL –ë–î: {self.database_url[:20]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            raise  # –¢–µ–ø–µ—Ä—å –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.pool:
            await self.pool.close()
            logger.info("üìä –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü"""
        if not self.pool:
            return
            
        async with self.pool.acquire() as conn:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    username VARCHAR(255),
                    first_name VARCHAR(255),
                    created_at TIMESTAMP DEFAULT NOW(),
                    is_active BOOLEAN DEFAULT TRUE,
                    last_activity TIMESTAMP DEFAULT NOW()
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_users_telegram_id 
                ON users(telegram_id)
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–∫–µ—Ä–æ–≤ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ SBER)
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS tickers (
                    id SERIAL PRIMARY KEY,
                    symbol VARCHAR(20) UNIQUE NOT NULL,
                    figi VARCHAR(50) UNIQUE NOT NULL,
                    name VARCHAR(255)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS signals (
                    id SERIAL PRIMARY KEY,
                    ticker_id INTEGER REFERENCES tickers(id),
                    signal_type VARCHAR(20) NOT NULL,
                    price DECIMAL(10, 2),
                    ema20 DECIMAL(10, 2),
                    adx DECIMAL(5, 2),
                    plus_di DECIMAL(5, 2),
                    minus_di DECIMAL(5, 2),
                    gpt_recommendation VARCHAR(20),
                    gpt_confidence INTEGER,
                    gpt_take_profit DECIMAL(10, 2),
                    gpt_stop_loss DECIMAL(10, 2),
                    created_at TIMESTAMP DEFAULT NOW()
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—ã–±–æ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            await conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_signals_created 
                ON signals(created_at DESC)
            ''')
            
            # –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS active_positions (
                    id SERIAL PRIMARY KEY,
                    user_telegram_id BIGINT NOT NULL,
                    ticker_id INTEGER REFERENCES tickers(id),
                    buy_signal_id INTEGER REFERENCES signals(id),
                    buy_price DECIMAL(10, 2),
                    opened_at TIMESTAMP DEFAULT NOW()
                )
            ''')
            
            logger.info("üìã –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    async def ensure_sber_ticker(self):
        """–î–æ–±–∞–≤–ª—è–µ–º SBER –≤ —Ç–∞–±–ª–∏—Ü—É —Ç–∏–∫–µ—Ä–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if not self.pool:
            return
            
        async with self.pool.acquire() as conn:
            ticker_id = await conn.fetchval('''
                INSERT INTO tickers (symbol, figi, name)
                VALUES ($1, $2, $3)
                ON CONFLICT (symbol) DO NOTHING
                RETURNING id
            ''', 'SBER', 'BBG004730N88', '–°–±–µ—Ä–±–∞–Ω–∫')
            
            if ticker_id:
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–∏–∫–µ—Ä SBER (id={ticker_id})")
    
    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
    
    async def add_or_update_user(self, telegram_id: int, username: str = None, first_name: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.pool:
            return False
            
        try:
            async with self.pool.acquire() as conn:
                await conn.execute('''
                    INSERT INTO users (telegram_id, username, first_name)
                    VALUES ($1, $2, $3)
                    ON CONFLICT (telegram_id) 
                    DO UPDATE SET 
                        username = COALESCE($2, users.username),
                        first_name = COALESCE($3, users.first_name),
                        last_activity = NOW(),
                        is_active = TRUE
                ''', telegram_id, username, first_name)
                
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def deactivate_user(self, telegram_id: int):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ /stop)"""
        if not self.pool:
            return
            
        try:
            async with self.pool.acquire() as conn:
                await conn.execute('''
                    UPDATE users 
                    SET is_active = FALSE 
                    WHERE telegram_id = $1
                ''', telegram_id)
                
                logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def get_active_users(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.pool:
            return []
            
        try:
            async with self.pool.acquire() as conn:
                rows = await conn.fetch('''
                    SELECT telegram_id 
                    FROM users 
                    WHERE is_active = TRUE
                ''')
                
                return [row['telegram_id'] for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ ===
    
    async def save_signal(self, signal_type: str, price: float, 
                         ema20: float, adx: float, plus_di: float, 
                         minus_di: float, gpt_data: Dict = None) -> Optional[int]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        if not self.pool:
            return None
            
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ä–∞ SBER
                ticker_id = await conn.fetchval(
                    "SELECT id FROM tickers WHERE symbol = 'SBER'"
                )
                
                if not ticker_id:
                    logger.error("–¢–∏–∫–µ—Ä SBER –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
                signal_id = await conn.fetchval('''
                    INSERT INTO signals (
                        ticker_id, signal_type, price, ema20, adx, 
                        plus_di, minus_di, gpt_recommendation, 
                        gpt_confidence, gpt_take_profit, gpt_stop_loss
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
                    RETURNING id
                ''', 
                    ticker_id, signal_type, price, ema20, adx, plus_di, minus_di,
                    gpt_data.get('recommendation') if gpt_data else None,
                    gpt_data.get('confidence') if gpt_data else None,
                    float(gpt_data.get('take_profit', 0) or 0) if gpt_data and gpt_data.get('take_profit') else None,
                    float(gpt_data.get('stop_loss', 0) or 0) if gpt_data and gpt_data.get('stop_loss') else None
                )
                
                logger.info(f"üíæ –°–∏–≥–Ω–∞–ª {signal_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω (id={signal_id})")
                return signal_id
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    async def get_last_buy_signal(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏"""
        if not self.pool:
            return None
            
        try:
            async with self.pool.acquire() as conn:
                row = await conn.fetchrow('''
                    SELECT * FROM signals 
                    WHERE signal_type = 'BUY' 
                    ORDER BY created_at DESC 
                    LIMIT 1
                ''')
                
                return dict(row) if row else None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–π ===
    
    async def open_position(self, telegram_id: int, signal_id: int, buy_price: float):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.pool:
            return
            
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ä–∞ SBER
                ticker_id = await conn.fetchval(
                    "SELECT id FROM tickers WHERE symbol = 'SBER'"
                )
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                await conn.execute('''
                    DELETE FROM active_positions 
                    WHERE user_telegram_id = $1 AND ticker_id = $2
                ''', telegram_id, ticker_id)
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                await conn.execute('''
                    INSERT INTO active_positions 
                    (user_telegram_id, ticker_id, buy_signal_id, buy_price)
                    VALUES ($1, $2, $3, $4)
                ''', telegram_id, ticker_id, signal_id, buy_price)
                
                logger.info(f"üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {telegram_id} –ø–æ —Ü–µ–Ω–µ {buy_price}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    async def close_positions(self, signal_type: str = 'SELL'):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.pool:
            return
            
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
                positions = await conn.fetch('SELECT * FROM active_positions')
                
                if positions:
                    logger.info(f"üìä –ó–∞–∫—Ä—ã–≤–∞–µ–º {len(positions)} –ø–æ–∑–∏—Ü–∏–π ({signal_type})")
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                await conn.execute('DELETE FROM active_positions')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def get_active_positions_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.pool:
            return 0
            
        try:
            async with self.pool.acquire() as conn:
                count = await conn.fetchval(
                    'SELECT COUNT(*) FROM active_positions'
                )
                return count or 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return 0
    
    # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
    
    async def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.pool:
            return {}
            
        try:
            async with self.pool.acquire() as conn:
                stats = {}
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                stats['total_users'] = await conn.fetchval(
                    'SELECT COUNT(*) FROM users'
                )
                stats['active_users'] = await conn.fetchval(
                    'SELECT COUNT(*) FROM users WHERE is_active = TRUE'
                )
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
                stats['total_signals'] = await conn.fetchval(
                    'SELECT COUNT(*) FROM signals'
                )
                stats['buy_signals'] = await conn.fetchval(
                    "SELECT COUNT(*) FROM signals WHERE signal_type = 'BUY'"
                )
                stats['sell_signals'] = await conn.fetchval(
                    "SELECT COUNT(*) FROM signals WHERE signal_type IN ('SELL', 'PEAK')"
                )
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                stats['open_positions'] = await conn.fetchval(
                    'SELECT COUNT(*) FROM active_positions'
                )
                
                return stats
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
