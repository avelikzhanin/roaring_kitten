import asyncio
import logging
from datetime import datetime
from typing import Optional
import pandas as pd
from dataclasses import dataclass

from .indicators import TechnicalIndicators

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    symbol: str
    timestamp: datetime
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float

class SignalProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
    
    def __init__(self, tinkoff_provider, database, gpt_analyzer=None):
        self.tinkoff_provider = tinkoff_provider
        self.db = database
        self.gpt_analyzer = gpt_analyzer
    
    async def analyze_market(self, symbol: str) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
        try:
            logger.info(f"üîç –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ê–õ–ò–ó {symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return None
            
            logger.info(f"üìä –¢–∏–∫–µ—Ä –Ω–∞–π–¥–µ–Ω: {ticker_info['name']} (FIGI: {ticker_info['figi']})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=120
            )
            
            if len(candles) < 50:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(candles)} —Å–≤–µ—á–µ–π")
                return None
            
            logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                logger.error(f"–ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol}")
                return None
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
            logger.info(f"üìä –ü–û–°–õ–ï–î–ù–ò–ï 5 –°–í–ï–ß–ï–ô {symbol}:")
            for i, (_, row) in enumerate(df.tail().iterrows()):
                logger.info(f"  {i+1}. {row['timestamp'].strftime('%H:%M %d.%m')} | "
                           f"O:{row['open']:.2f} H:{row['high']:.2f} L:{row['low']:.2f} C:{row['close']:.2f} V:{row['volume']}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal = self._calculate_indicators_with_debug(df, symbol)
            
            return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ {symbol}: {e}")
            return None
    
    def _calculate_indicators_with_debug(self, df, symbol: str) -> Optional[TradingSignal]:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
        try:
            logger.info(f"üßÆ –†–ê–°–ß–ï–¢ –ò–ù–î–ò–ö–ê–¢–û–†–û–í –î–õ–Ø {symbol}")
            
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:")
            logger.info(f"   –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {len(closes)}")
            logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {closes[-1]:.2f}")
            logger.info(f"   –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {min(closes):.2f} - {max(closes):.2f}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA20
            logger.info(f"üìà –†–∞—Å—á–µ—Ç EMA20...")
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ADX (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
            logger.info(f"üìä –†–∞—Å—á–µ—Ç ADX...")
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_price = closes[-1]
            current_ema20 = ema20[-1]
            current_adx = adx_data['adx'][-1]
            current_plus_di = adx_data['plus_di'][-1]
            current_minus_di = adx_data['minus_di'][-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
            if any(pd.isna(val) for val in [current_ema20, current_adx, current_plus_di, current_minus_di]):
                logger.warning(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç NaN –¥–ª—è {symbol}")
                logger.warning(f"EMA20: {current_ema20}, ADX: {current_adx}, +DI: {current_plus_di}, -DI: {current_minus_di}")
                return None
            
            # –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
            logger.info(f"")
            logger.info(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–û–í {symbol}:")
            logger.info(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ")
            logger.info(f"   üìà EMA20: {current_ema20:.2f} ‚ÇΩ")
            logger.info(f"   üìä ADX: {current_adx:.1f}")
            logger.info(f"   üìà +DI: {current_plus_di:.1f}")
            logger.info(f"   üìâ -DI: {current_minus_di:.1f}")
            logger.info(f"   üîÑ –†–∞–∑–Ω–∏—Ü–∞ DI: {current_plus_di - current_minus_di:.1f}")
            logger.info(f"")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª–∞
            condition_1 = current_price > current_ema20
            condition_2 = current_adx > 25
            condition_3 = current_plus_di > current_minus_di
            condition_4 = current_plus_di - current_minus_di > 1
            
            logger.info(f"üßê –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô –°–ò–ì–ù–ê–õ–ê {symbol}:")
            logger.info(f"   1. –¶–µ–Ω–∞ > EMA20 ({current_price:.2f} > {current_ema20:.2f}): {'‚úÖ' if condition_1 else '‚ùå'}")
            logger.info(f"   2. ADX > 25 ({current_adx:.1f} > 25): {'‚úÖ' if condition_2 else '‚ùå'}")
            logger.info(f"   3. +DI > -DI ({current_plus_di:.1f} > {current_minus_di:.1f}): {'‚úÖ' if condition_3 else '‚ùå'}")
            logger.info(f"   4. –†–∞–∑–Ω–∏—Ü–∞ DI > 1 ({current_plus_di - current_minus_di:.1f} > 1): {'‚úÖ' if condition_4 else '‚ùå'}")
            
            conditions = [condition_1, condition_2, condition_3, condition_4]
            conditions_met = sum(conditions)
            
            logger.info(f"")
            logger.info(f"üìä –ò–¢–û–ì: {conditions_met}/4 —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            
            if all(conditions):
                logger.info(f"üéâ –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ –î–õ–Ø {symbol} - –ì–ï–ù–ï–†–ò–†–£–ï–ú –°–ò–ì–ù–ê–õ!")
                
                signal = TradingSignal(
                    symbol=symbol,
                    timestamp=df.iloc[-1]['timestamp'],
                    price=current_price,
                    ema20=current_ema20,
                    adx=current_adx,
                    plus_di=current_plus_di,
                    minus_di=current_minus_di
                )
                
                logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {signal}")
                return signal
            else:
                logger.info(f"‚è≥ –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è {symbol} ({conditions_met}/4)")
                logger.info(f"   –ñ–¥–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...")
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ {symbol}: {e}")
            import traceback
            logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return None
    
    async def get_detailed_market_status(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
        try:
            logger.info(f"üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è {symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return f"‚ùå <b>–ê–∫—Ü–∏—è {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>"
            
            candles = await asyncio.wait_for(
                self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=120),
                timeout=30
            )
            
            if len(candles) < 50:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
                return f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol}")
                return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}</b>"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_price = closes[-1]
            current_ema20 = ema20[-1]
            current_adx = adx_data['adx'][-1]
            current_plus_di = adx_data['plus_di'][-1]
            current_minus_di = adx_data['minus_di'][-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            price_above_ema = current_price > current_ema20 if not pd.isna(current_ema20) else False
            strong_trend = current_adx > 25 if not pd.isna(current_adx) else False
            positive_direction = current_plus_di > current_minus_di if not pd.isna(current_plus_di) and not pd.isna(current_minus_di) else False
            di_difference = (current_plus_di - current_minus_di) > 1 if not pd.isna(current_plus_di) and not pd.isna(current_minus_di) else False
            peak_trend = current_adx > 45 if not pd.isna(current_adx) else False
            
            all_conditions_met = all([price_above_ema, strong_trend, positive_direction, di_difference])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ë–î –¥–ª—è —ç—Ç–æ–π –∞–∫—Ü–∏–∏
            active_positions = await self.db.get_active_positions_count(symbol)
            peak_warning = ""
            if peak_trend and active_positions > 0:
                peak_warning = f"\nüî• <b>–í–ù–ò–ú–ê–ù–ò–ï: ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}! –í—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!</b>"
            elif peak_trend:
                peak_warning = f"\nüî• <b>ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}</b>"
            
            message = f"""üìä <b>–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ê–ö–¶–ò–ô {symbol}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {current_ema20:.2f} ‚ÇΩ {'‚úÖ' if price_above_ema else '‚ùå'}

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {current_adx:.1f} {'‚úÖ' if strong_trend else '‚ùå'} (–Ω—É–∂–Ω–æ >25)
‚Ä¢ <b>+DI:</b> {current_plus_di:.1f}
‚Ä¢ <b>-DI:</b> {current_minus_di:.1f} {'‚úÖ' if positive_direction else '‚ùå'}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {current_plus_di - current_minus_di:.1f} {'‚úÖ' if di_difference else '‚ùå'} (–Ω—É–∂–Ω–æ >1){peak_warning}

{'üîî <b>–í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –æ–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª!</b>' if all_conditions_met else '‚è≥ <b>–û–∂–∏–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...</b>'}"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑
            if self.gpt_analyzer:
                try:
                    logger.info(f"ü§ñ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT –∞–Ω–∞–ª–∏–∑–∞ {symbol}...")
                    candles_data = []
                    try:
                        for _, row in df.iterrows():
                            candles_data.append({
                                'timestamp': row['timestamp'],
                                'open': float(row['open']),
                                'high': float(row['high']),
                                'low': float(row['low']),
                                'close': float(row['close']),
                                'volume': int(row['volume'])
                            })
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
                        candles_data = None
                    
                    signal_data = {
                        'price': current_price,
                        'ema20': current_ema20,
                        'adx': current_adx,
                        'plus_di': current_plus_di,
                        'minus_di': current_minus_di,
                        'conditions_met': all_conditions_met
                    }
                    
                    logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPT –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}...")
                    gpt_advice = await self.gpt_analyzer.analyze_signal(
                        signal_data, 
                        candles_data, 
                        is_manual_check=True,
                        symbol=symbol
                    )
                    if gpt_advice:
                        message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice, symbol)}"
                        logger.info(f"‚úÖ GPT –¥–∞–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è {symbol}: {gpt_advice.recommendation}")
                    else:
                        message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                        logger.warning(f"‚ö†Ô∏è GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
                    message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
            
            return message
                
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol}")
            return f"‚ùå <b>–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö."
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")
            logger.error(f"üí• –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>\n\n–í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏."
    
    async def check_peak_trend(self, symbol: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ (ADX > 45)"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return None
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=120
            )
            
            if len(candles) < 50:
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ADX
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            current_adx = adx_data['adx'][-1]
            current_price = closes[-1]
            
            if pd.isna(current_adx):
                return None
                
            if current_adx > 45:
                logger.info(f"üî• –ü–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}: ADX {current_adx:.1f}")
                return current_price
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ {symbol}: {e}")
            return None
    
    async def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return 0
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=2
            )
            if candles:
                df = self.tinkoff_provider.candles_to_dataframe(candles)
                return df.iloc[-1]['close'] if not df.empty else 0
            return 0
        except:
            return 0
