import asyncio
import logging
from datetime import datetime, time
import pytz
from typing import Optional, Dict, List
import pandas as pd
import numpy as np
from dataclasses import dataclass

from .indicators import TechnicalIndicators, quick_market_summary

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å —Ç–æ—á–Ω—ã–º–∏ ADX –¥–∞–Ω–Ω—ã–º–∏"""
    symbol: str
    timestamp: datetime
    price: float
    ema20: float
    
    # –¢–û–ß–ù–´–ï ADX –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ Tinkoff —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    adx: float = 0.0
    plus_di: float = 0.0
    minus_di: float = 0.0
    
    # GPT –¥–∞–Ω–Ω—ã–µ
    gpt_recommendation: Optional[str] = None
    gpt_confidence: Optional[int] = None
    gpt_full_advice: Optional[object] = None  # –ü–æ–ª–Ω—ã–π GPT –æ–±—ä–µ–∫—Ç

class SignalProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ ADX —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∫–∞–∫ –≤ Tinkoff"""
    
    def __init__(self, tinkoff_provider, database, gpt_analyzer=None):
        self.tinkoff_provider = tinkoff_provider
        self.db = database
        self.gpt_analyzer = gpt_analyzer
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
        analysis_type = "‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å GPT + —Ç–æ—á–Ω—ã–µ ADX" if gpt_analyzer else "‚ùå –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä + —Ç–æ—á–Ω—ã–µ ADX"
        logger.info(f"üîÑ SignalProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({analysis_type})")
        logger.info("üìä ADX –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: DI –ø–µ—Ä–∏–æ–¥=14, ADX —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ=20 (–∫–∞–∫ –≤ Tinkoff)")
    
    def is_market_open(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()  # 0=–ø–Ω, 6=–≤—Å
        
        if current_weekday < 5:  # –ü–Ω-–ü—Ç
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: 09:50 - 18:50 –ú–°–ö
            main_session = time(9, 50) <= current_time <= time(18, 50)
            # –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è: 19:00 - 23:49 –ú–°–ö  
            evening_session = time(19, 0) <= current_time <= time(23, 49)
            return main_session or evening_session
        else:  # –°–±-–í—Å
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è: 10:00 - 19:00 –ú–°–ö
            weekend_session = time(10, 0) <= current_time <= time(19, 0)
            return weekend_session
    
    def get_current_session(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()
        
        if current_weekday < 5:  # –ü–Ω-–ü—Ç
            if time(9, 50) <= current_time <= time(18, 50):
                return 'main'
            elif time(19, 0) <= current_time <= time(23, 49):
                return 'evening'
        else:  # –°–±-–í—Å
            if time(10, 0) <= current_time <= time(19, 0):
                return 'weekend'
        
        return 'closed'
    
    def get_time_quality(self) -> str:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()
        
        if current_weekday < 5:  # –ü–Ω-–ü—Ç
            if time(11, 0) <= current_time <= time(16, 0):
                return 'premium'  # –õ—É—á—à–µ–µ –≤—Ä–µ–º—è
            elif time(9, 50) <= current_time <= time(18, 50):
                return 'normal'   # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            elif time(19, 0) <= current_time <= time(23, 49):
                return 'evening'  # –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è
        else:  # –í—ã—Ö–æ–¥–Ω—ã–µ
            return 'weekend'
        
        return 'closed'
    
    def get_market_status_text(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞ —Å —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
        is_open = self.is_market_open()
        session = self.get_current_session()
        time_quality = self.get_time_quality()
        
        if is_open:
            if time_quality == 'premium':
                return {
                    'emoji': 'üü¢',
                    'status': '–û–¢–ö–†–´–¢',
                    'description': f'–ü—Ä–µ–º–∏—É–º –≤—Ä–µ–º—è ({session})',
                    'data_freshness': '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã'
                }
            elif time_quality in ['normal', 'evening']:
                return {
                    'emoji': 'üü¢',
                    'status': '–û–¢–ö–†–´–¢', 
                    'description': f'–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è ({session})',
                    'data_freshness': '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã'
                }
            else:
                return {
                    'emoji': 'üü†',
                    'status': '–û–¢–ö–†–´–¢',
                    'description': f'–í—ã—Ö–æ–¥–Ω–∞—è —Å–µ—Å—Å–∏—è ({session})',
                    'data_freshness': '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã'
                }
        else:
            return {
                'emoji': 'üî¥',
                'status': '–ó–ê–ö–†–´–¢',
                'description': f'–í–Ω–µ—Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è ({session})',
                'data_freshness': '–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —Å–∞–º—ã–º–∏ —Å–≤–µ–∂–∏–º–∏'
            }
    
    async def analyze_market(self, symbol: str) -> Optional[TradingSignal]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¢–û–ß–ù–´–ú–ò ADX –∫–∞–∫ –≤ Tinkoff —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        try:
            logger.info(f"üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó {symbol} - —Ç–æ—á–Ω—ã–µ ADX + GPT")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 100 —á–∞—Å–æ–≤ –¥–ª—è —Ç–æ—á–Ω—ã—Ö ADX —Ä–∞—Å—á–µ—Ç–æ–≤)
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=100
            )
            
            if len(candles) < 50:  # –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ ADX
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ ADX {symbol}: {len(candles)} —Å–≤–µ—á–µ–π")
                return None
            
            logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ ADX –∞–Ω–∞–ª–∏–∑–∞")
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                logger.error(f"–ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol}")
                return None
            
            # –≠–¢–ê–ü 1: –¢–û–ß–ù–´–ô –†–ê–°–ß–ï–¢ –ò–ù–î–ò–ö–ê–¢–û–†–û–í
            logger.info(f"üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol}...")
            market_summary = quick_market_summary(df.to_dict('records'))
            
            if 'error' in market_summary:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}: {market_summary['error']}")
                return None
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ADX
            if 'adx_debug' in market_summary:
                debug = market_summary['adx_debug']
                logger.info(f"üîç ADX –æ—Ç–ª–∞–¥–∫–∞ {symbol}: –¥–∞–Ω–Ω—ã—Ö={debug['data_length']}, ADX –º–∞—Å—Å–∏–≤={debug['adx_array_length']}")
                logger.info(f"üîç –°—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ADX={debug['raw_adx']}, +DI={debug['raw_plus_di']}, -DI={debug['raw_minus_di']}")
                logger.info(f"üîç –ò—Ç–æ–≥–æ–≤—ã–µ: ADX={market_summary['adx']:.1f}, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω={market_summary['adx_calculated']}")
            
            # –≠–¢–ê–ü 2: –ë–ê–ó–û–í–´–ô –§–ò–õ–¨–¢–† —Å —Ç–æ—á–Ω—ã–º–∏ ADX
            if not await self._check_basic_filter_with_adx(market_summary, symbol):
                logger.info(f"‚è≥ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è {symbol}")
                return None
            
            logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è {symbol}")
            
            # –≠–¢–ê–ü 3: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø GPT
            market_data = self._prepare_comprehensive_data_with_adx(df, market_summary, symbol)
            
            # –≠–¢–ê–ü 4: –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó GPT (—Å –≥–æ—Ç–æ–≤—ã–º–∏ ADX)
            if self.gpt_analyzer:
                gpt_advice = await self._get_comprehensive_decision(market_data, symbol)
                
                if gpt_advice and gpt_advice.recommendation in ['BUY', 'WEAK_BUY']:
                    # GPT —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∫—É - —Å–æ–∑–¥–∞—ë–º —Å–∏–≥–Ω–∞–ª —Å –¢–û–ß–ù–´–ú–ò ADX
                    signal = TradingSignal(
                        symbol=symbol,
                        timestamp=df.iloc[-1]['timestamp'],
                        price=market_summary['current_price'],
                        ema20=market_summary['ema20'],
                        # –¢–û–ß–ù–´–ï ADX –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
                        adx=market_summary['adx'],
                        plus_di=market_summary['plus_di'],
                        minus_di=market_summary['minus_di'],
                        # GPT –¥–∞–Ω–Ω—ã–µ
                        gpt_recommendation=gpt_advice.recommendation,
                        gpt_confidence=gpt_advice.confidence,
                        gpt_full_advice=gpt_advice
                    )
                    
                    logger.info(f"üéâ GPT –†–ï–ö–û–ú–ï–ù–î–£–ï–¢ {gpt_advice.recommendation} –¥–ª—è {symbol}")
                    logger.info(f"üìä –¢–û–ß–ù–´–ï ADX: {signal.adx:.1f}, +DI: {signal.plus_di:.1f}, -DI: {signal.minus_di:.1f}")
                    return signal
                else:
                    rec = gpt_advice.recommendation if gpt_advice else '–ù–ï–ò–ó–í–ï–°–¢–ù–û'
                    conf = f" ({gpt_advice.confidence}%)" if gpt_advice else ""
                    logger.info(f"‚è≥ GPT –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∫—É {symbol}: {rec}{conf}")
                    return None
            else:
                # –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ GPT - —Å–æ–∑–¥–∞—ë–º —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —É—Å–ª–æ–≤–∏—è–º
                logger.warning("ü§ñ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
                signal = TradingSignal(
                    symbol=symbol,
                    timestamp=df.iloc[-1]['timestamp'],
                    price=market_summary['current_price'],
                    ema20=market_summary['ema20'],
                    # –¢–û–ß–ù–´–ï ADX –∑–Ω–∞—á–µ–Ω–∏—è
                    adx=market_summary['adx'],
                    plus_di=market_summary['plus_di'],
                    minus_di=market_summary['minus_di']
                )
                return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    async def _check_basic_filter_with_adx(self, market_summary: Dict, symbol: str) -> bool:
        """–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: —Ü–µ–Ω–∞ > EMA20 + ADX —É—Å–ª–æ–≤–∏—è"""
        try:
            current_price = market_summary.get('current_price', 0)
            current_ema20 = market_summary.get('ema20', 0)
            current_adx = market_summary.get('adx', 0)
            current_plus_di = market_summary.get('plus_di', 0)
            current_minus_di = market_summary.get('minus_di', 0)
            adx_calculated = market_summary.get('adx_calculated', False)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ä—ã–Ω–∫–∞
            market_status = self.get_market_status_text()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            price_above_ema = current_price > current_ema20
            strong_trend = current_adx > 25 if adx_calculated else False
            positive_direction = current_plus_di > current_minus_di if adx_calculated else False
            di_difference = (current_plus_di - current_minus_di) > 1 if adx_calculated else False
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"üîç –ë–ê–ó–û–í–´–ô –§–ò–õ–¨–¢–† {symbol} (—Ç–æ—á–Ω—ã–µ ADX –∫–∞–∫ –≤ Tinkoff):")
            logger.info(f"   üí∞ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ")
            logger.info(f"   üìà EMA20: {current_ema20:.2f} ‚ÇΩ")
            logger.info(f"   üìä –¶–µ–Ω–∞ > EMA20: {'‚úÖ' if price_above_ema else '‚ùå'}")
            
            if adx_calculated:
                logger.info(f"   üìä ADX: {current_adx:.1f} {'‚úÖ' if strong_trend else '‚ùå'} (–Ω–æ—Ä–º–∞ >25)")
                logger.info(f"   üìä +DI: {current_plus_di:.1f}")
                logger.info(f"   üìä -DI: {current_minus_di:.1f} {'‚úÖ' if positive_direction else '‚ùå'}")
                logger.info(f"   üìä –†–∞–∑–Ω–∏—Ü–∞ DI: {current_plus_di - current_minus_di:+.1f} {'‚úÖ' if di_difference else '‚ùå'} (–Ω–æ—Ä–º–∞ >1)")
            else:
                logger.warning(f"   üìä ADX –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")
            
            logger.info(f"   {market_status['emoji']} –†—ã–Ω–æ–∫: {market_status['status']} ({market_status['description']})")
            
            # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –Ω—É–∂–Ω—ã –í–°–ï —É—Å–ª–æ–≤–∏—è (–≤–∫–ª—é—á–∞—è ADX)
            if adx_calculated:
                all_conditions = price_above_ema and strong_trend and positive_direction and di_difference
                logger.info(f"   üéØ –í—Å–µ —É—Å–ª–æ–≤–∏—è: {'‚úÖ' if all_conditions else '‚ùå'} ({sum([price_above_ema, strong_trend, positive_direction, di_difference])}/4)")
                return all_conditions
            else:
                # –ï—Å–ª–∏ ADX –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É > EMA20
                logger.info(f"   üéØ –ë–∞–∑–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ: {'‚úÖ' if price_above_ema else '‚ùå'} (—Ç–æ–ª—å–∫–æ EMA20, ADX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
                return price_above_ema
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ {symbol}: {e}")
            return False
    
    def _prepare_comprehensive_data_with_adx(self, df: pd.DataFrame, market_summary: Dict, symbol: str) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è GPT —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¢–û–ß–ù–´–ú–ò ADX"""
        try:
            # –°–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50)
            max_candles = 50
            start_idx = max(0, len(df) - max_candles)
            
            candles_data = []
            for i in range(start_idx, len(df)):
                row = df.iloc[i]
                candles_data.append({
                    'timestamp': row['timestamp'],
                    'open': float(row['open']),
                    'high': float(row['high']),
                    'low': float(row['low']),
                    'close': float(row['close']),
                    'volume': int(row['volume'])
                })
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤
            volumes = df['volume'].tolist()
            volume_analysis = self._analyze_volumes_detailed(volumes)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π
            price_levels = self._analyze_price_levels_detailed(df)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ü–µ–Ω–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            closes = df['close'].tolist()
            price_movement = self._analyze_price_movement_detailed(closes)
            
            market_data = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'symbol': symbol,
                'current_price': market_summary['current_price'],
                'ema20': market_summary['ema20'],
                'price_above_ema': market_summary['price_above_ema'],
                
                # –ì–û–¢–û–í–´–ï –¢–û–ß–ù–´–ï ADX –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ GPT!)
                'calculated_adx': market_summary['adx'],
                'calculated_plus_di': market_summary['plus_di'],
                'calculated_minus_di': market_summary['minus_di'],
                'adx_calculated': market_summary['adx_calculated'],
                
                # –°–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 50)
                'candles_data': candles_data,
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                'volume_analysis': volume_analysis,
                'price_levels': price_levels,
                'price_movement': price_movement,
                
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
                'trading_session': self.get_current_session(),
                'time_quality': self.get_time_quality(),
                'market_status': self.get_market_status_text(),
                
                # –§–ª–∞–≥ —á—Ç–æ –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω
                'conditions_met': True
            }
            
            logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT —Å —Ç–æ—á–Ω—ã–º–∏ ADX {symbol} ({len(candles_data)} —Å–≤–µ—á–µ–π)")
            return market_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return {}
    
    def _analyze_volumes_detailed(self, volumes: List[int]) -> Dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤"""
        try:
            if len(volumes) < 10:
                return {'trend': 'insufficient_data'}
            
            current_volume = volumes[-1]
            
            # –†–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            avg_5 = np.mean(volumes[-5:]) if len(volumes) >= 5 else current_volume
            avg_20 = np.mean(volumes[-20:]) if len(volumes) >= 20 else current_volume  
            avg_50 = np.mean(volumes[-50:]) if len(volumes) >= 50 else current_volume
            
            # –¢—Ä–µ–Ω–¥—ã
            recent_vs_medium = avg_5 / avg_20 if avg_20 > 0 else 1.0
            recent_vs_long = avg_5 / avg_50 if avg_50 > 0 else 1.0
            current_vs_avg = current_volume / avg_20 if avg_20 > 0 else 1.0
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            if recent_vs_medium > 1.3:
                trend = 'strong_increase'
            elif recent_vs_medium > 1.1:
                trend = 'increase'
            elif recent_vs_medium < 0.7:
                trend = 'strong_decrease'
            elif recent_vs_medium < 0.9:
                trend = 'decrease'
            else:
                trend = 'stable'
            
            return {
                'current_volume': current_volume,
                'avg_5': int(avg_5),
                'avg_20': int(avg_20),
                'avg_50': int(avg_50),
                'current_vs_avg': round(current_vs_avg, 2),
                'recent_vs_medium': round(recent_vs_medium, 2),
                'recent_vs_long': round(recent_vs_long, 2),
                'trend': trend,
                'volume_ratio': round(current_vs_avg, 2)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä—ë–º–æ–≤: {e}")
            return {'trend': 'error'}
    
    def _analyze_price_levels_detailed(self, df: pd.DataFrame) -> Dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            recent_data = df.tail(50) if len(df) > 50 else df
            
            highs = recent_data['high'].tolist()
            lows = recent_data['low'].tolist()
            closes = recent_data['close'].tolist()
            
            current_price = closes[-1]
            
            # –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π
            resistances = []
            supports = []
            
            for i in range(3, len(highs) - 3):
                if (highs[i] > highs[i-1] and highs[i] > highs[i-2] and highs[i] > highs[i-3] and
                    highs[i] > highs[i+1] and highs[i] > highs[i+2] and highs[i] > highs[i+3]):
                    if highs[i] > current_price * 1.001:
                        resistances.append(highs[i])
            
            for i in range(3, len(lows) - 3):
                if (lows[i] < lows[i-1] and lows[i] < lows[i-2] and lows[i] < lows[i-3] and
                    lows[i] < lows[i+1] and lows[i] < lows[i+2] and lows[i] < lows[i+3]):
                    if lows[i] < current_price * 0.999:
                        supports.append(lows[i])
            
            resistances = sorted(resistances)[:5]
            supports = sorted(supports, reverse=True)[:5]
            
            recent_high = max(highs)
            recent_low = min(lows)
            range_size = ((recent_high - recent_low) / recent_low) * 100
            position_pct = ((current_price - recent_low) / (recent_high - recent_low)) * 100 if recent_high > recent_low else 50
            
            return {
                'current_price': current_price,
                'nearest_resistance': resistances[0] if resistances else None,
                'nearest_support': supports[0] if supports else None,
                'all_resistances': resistances,
                'all_supports': supports,
                'recent_high': recent_high,
                'recent_low': recent_low,
                'range_size_pct': round(range_size, 2),
                'position_in_range_pct': round(position_pct, 1)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {}
    
    def _analyze_price_movement_detailed(self, closes: List[float]) -> Dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è"""
        try:
            if len(closes) < 5:
                return {}
            
            current_price = closes[-1]
            changes = {}
            periods = {'1h': 2, '4h': 5, '12h': 13, '1d': 25, '3d': 75}
            
            for period_name, idx_back in periods.items():
                if len(closes) >= idx_back:
                    old_price = closes[-idx_back]
                    change = ((current_price - old_price) / old_price * 100)
                    changes[f'change_{period_name}'] = round(change, 2)
            
            volatilities = {}
            vol_periods = {'1d': 25, '3d': 75, '5d': 125}
            
            for vol_name, vol_back in vol_periods.items():
                if len(closes) >= vol_back:
                    recent_changes = [abs(closes[i] - closes[i-1]) / closes[i-1] * 100 
                                    for i in range(-vol_back, -1)]
                    volatilities[f'volatility_{vol_name}'] = round(np.mean(recent_changes), 2)
            
            result = {**changes, **volatilities}
            
            if len(closes) >= 10:
                up_candles = sum(1 for i in range(-10, -1) if closes[i] > closes[i-1])
                result['trend_strength_pct'] = round((up_candles / 9) * 100, 1)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤–∏–∂–µ–Ω–∏—è: {e}")
            return {}
    
    async def _get_comprehensive_decision(self, market_data: Dict, symbol: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç GPT —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ç–æ—á–Ω—ã–º–∏ ADX"""
        try:
            logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPT —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {symbol} —Å –≥–æ—Ç–æ–≤—ã–º–∏ ADX...")
            
            signal_data = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'price': market_data['current_price'],
                'ema20': market_data['ema20'],
                'price_above_ema': market_data['price_above_ema'],
                'conditions_met': market_data['conditions_met'],
                
                # –ì–û–¢–û–í–´–ï —Ç–æ—á–Ω—ã–µ ADX (–Ω–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞!)
                'ready_adx': market_data['calculated_adx'],
                'ready_plus_di': market_data['calculated_plus_di'],
                'ready_minus_di': market_data['calculated_minus_di'],
                'adx_available': market_data['adx_calculated'],
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'volume_analysis': market_data.get('volume_analysis', {}),
                'price_levels': market_data.get('price_levels', {}),
                'trading_session': market_data.get('trading_session', 'unknown'),
                'time_quality': market_data.get('time_quality', 'unknown'),
                'market_status': market_data.get('market_status', {})
            }
            
            if 'price_movement' in market_data:
                signal_data.update(market_data['price_movement'])
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É GPT
            gpt_advice = await self.gpt_analyzer.analyze_signal(
                signal_data=signal_data,
                candles_data=market_data.get('candles_data'),
                is_manual_check=False,
                symbol=symbol
            )
            
            if gpt_advice:
                factors_info = f" (—Ñ–∞–∫—Ç–æ—Ä—ã: {gpt_advice.key_factors})" if hasattr(gpt_advice, 'key_factors') and gpt_advice.key_factors else ""
                logger.info(f"ü§ñ GPT —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {symbol}: {gpt_advice.recommendation} ({gpt_advice.confidence}%){factors_info}")
                return gpt_advice
            else:
                logger.warning(f"ü§ñ GPT –Ω–µ –¥–∞–ª —Ä–µ—à–µ–Ω–∏—è –¥–ª—è {symbol}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GPT —Ä–µ—à–µ–Ω–∏—è –¥–ª—è {symbol}: {e}")
            return None
    
    async def get_detailed_market_status(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å —Ç–æ—á–Ω—ã–º–∏ ADX"""
        try:
            logger.info(f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å {symbol} —Å —Ç–æ—á–Ω—ã–º–∏ ADX...")
            
            market_status = self.get_market_status_text()
            
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return f"‚ùå <b>–ê–∫—Ü–∏—è {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>"
            
            candles = await asyncio.wait_for(
                self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=100),
                timeout=30
            )
            
            if len(candles) < 50:
                return f"""‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ ADX –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>

{market_status['emoji']} <b>–°—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞:</b> {market_status['status']}
üìä {market_status['description']}
üíæ {market_status['data_freshness']}

–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ADX."""
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}</b>"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            logger.info(f"üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol}...")
            market_summary = quick_market_summary(df.to_dict('records'))
            
            if 'error' in market_summary:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}: {market_summary['error']}")
                return f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ {symbol}</b>"
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ADX
            if 'adx_debug' in market_summary:
                debug = market_summary['adx_debug']
                logger.info(f"üîç ADX –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è {symbol}:")
                logger.info(f"   –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {debug['data_length']}")
                logger.info(f"   –î–ª–∏–Ω–∞ ADX –º–∞—Å—Å–∏–≤–∞: {debug['adx_array_length']}")
                logger.info(f"   –°—ã—Ä–æ–π ADX: {debug['raw_adx']}")
                logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 ADX: {debug['last_5_adx']}")
                logger.info(f"   ADX —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {market_summary['adx_calculated']}")
                logger.info(f"   –ò—Ç–æ–≥–æ–≤—ã–π ADX: {market_summary['adx']}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            last_candle_time = df.iloc[-1]['timestamp']
            moscow_time = last_candle_time.astimezone(self.moscow_tz)
            data_age = (datetime.now(self.moscow_tz) - moscow_time).total_seconds() / 3600
            
            data_freshness = ""
            if data_age < 1:
                data_freshness = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ"
            elif data_age < 3:
                data_freshness = f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ {data_age:.1f}—á –Ω–∞–∑–∞–¥"
            else:
                data_freshness = f"üî¥ –î–∞–Ω–Ω—ã–µ {data_age:.1f}—á –Ω–∞–∑–∞–¥"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ—á–Ω—ã–º–∏ ADX
            current_price = market_summary['current_price']
            current_ema20 = market_summary['ema20']
            price_above_ema = current_price > current_ema20
            
            current_adx = market_summary['adx']
            current_plus_di = market_summary['plus_di']
            current_minus_di = market_summary['minus_di']
            adx_calculated = market_summary['adx_calculated']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å ADX
            basic_filter_passed = await self._check_basic_filter_with_adx(market_summary, symbol)
            
            message = f"""üìä <b>–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó {symbol}</b>

{market_status['emoji']} <b>–°—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞:</b> {market_status['status']}
üìä {market_status['description']}
üïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:</b> {moscow_time.strftime('%d.%m %H:%M')} –ú–°–ö
üíæ {data_freshness}

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {current_ema20:.2f} ‚ÇΩ {'‚úÖ' if price_above_ema else '‚ùå'}"""

            if adx_calculated:
                adx_status = "üü¢ –°–∏–ª—å–Ω—ã–π" if current_adx > 25 else "üî¥ –°–ª–∞–±—ã–π"
                di_diff = current_plus_di - current_minus_di
                di_status = "üü¢ –í–æ—Å—Ö–æ–¥—è—â–∏–π" if di_diff > 1 else "üî¥ –ù–∏—Å—Ö–æ–¥—è—â–∏–π"
                
                message += f"""

üìä <b>–¢–û–ß–ù–´–ï ADX (–∫–∞–∫ –≤ Tinkoff):</b>
‚Ä¢ <b>ADX:</b> {current_adx:.1f} {adx_status} —Ç—Ä–µ–Ω–¥
‚Ä¢ <b>+DI:</b> {current_plus_di:.1f}
‚Ä¢ <b>-DI:</b> {current_minus_di:.1f}
‚Ä¢ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {di_status} (—Ä–∞–∑–Ω–∏—Ü–∞: {di_diff:+.1f})"""
            else:
                message += f"""

üìä <b>ADX:</b> ‚ùå –ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)"""
            
            message += f"""

üîç <b>–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:</b> {'‚úÖ –ü—Ä–æ–π–¥–µ–Ω' if basic_filter_passed else '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω'}"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑
            if self.gpt_analyzer:
                try:
                    market_data = self._prepare_comprehensive_data_with_adx(df, market_summary, symbol)
                    gpt_advice = await self._get_comprehensive_decision(market_data, symbol)
                    if gpt_advice:
                        message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice, symbol)}"
                    else:
                        message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
                    message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
            else:
                if basic_filter_passed:
                    message += "\n\nüìä <b>–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω</b>\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                else:
                    message += "\n\n‚è≥ <b>–û–∂–∏–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π...</b>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç
            if not self.is_market_open():
                message += f"\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> {market_status['data_freshness']}"
            
            return message
                
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return f"‚ùå <b>–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>"
    
    async def check_peak_trend(self, symbol: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ —Å —Ç–æ—á–Ω—ã–º–∏ ADX"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return None
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=100
            )
            
            if len(candles) < 50:
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–µ ADX
            market_summary = quick_market_summary(df.to_dict('records'))
            current_price = market_summary['current_price']
            current_adx = market_summary['adx']
            adx_calculated = market_summary['adx_calculated']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É ADX
            if adx_calculated and current_adx > 45:
                logger.info(f"üî• –ü–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}: —Ç–æ—á–Ω—ã–π ADX {current_adx:.1f} > 45")
                return current_price
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ {symbol}: {e}")
            return None
    
    async def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return 0
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=2
            )
            if candles:
                df = self.tinkoff_provider.candles_to_dataframe(candles)
                return df.iloc[-1]['close'] if not df.empty else 0
            return 0
        except:
            return 0
