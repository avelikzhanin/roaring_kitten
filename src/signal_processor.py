import asyncio
import logging
from datetime import datetime, time
import pytz
from typing import Optional, Dict, List
import pandas as pd
import numpy as np
from dataclasses import dataclass

from .indicators import TechnicalIndicators

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –†–ï–ê–õ–¨–ù–´–ú–ò ADX –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ—Ç GPT"""
    symbol: str
    timestamp: datetime
    price: float
    ema20: float
    
    # –†–ï–ê–õ–¨–ù–´–ï ADX –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ GPT
    adx: float = 0.0
    plus_di: float = 0.0
    minus_di: float = 0.0
    
    # GPT –¥–∞–Ω–Ω—ã–µ
    gpt_recommendation: Optional[str] = None
    gpt_confidence: Optional[int] = None
    gpt_full_advice: Optional[object] = None  # –ü–æ–ª–Ω—ã–π GPT –æ–±—ä–µ–∫—Ç

class SignalProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤: –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä + GPT —Å –†–ï–ê–õ–¨–ù–´–ú–ò ADX —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
    
    def __init__(self, tinkoff_provider, database, gpt_analyzer=None):
        self.tinkoff_provider = tinkoff_provider
        self.db = database
        self.gpt_analyzer = gpt_analyzer
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
        adx_status = "‚úÖ –†–ï–ê–õ–¨–ù–´–ô ADX –æ—Ç GPT" if gpt_analyzer else "‚ùå –ë–µ–∑ ADX"
        logger.info(f"üîÑ SignalProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({adx_status})")
    
    def is_market_open(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤–∫–ª—é—á–∞—è –≤—ã—Ö–æ–¥–Ω—ã–µ)"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()  # 0=–ø–Ω, 6=–≤—Å
        
        if current_weekday < 5:  # –ü–Ω-–ü—Ç
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: 09:50 - 18:50 –ú–°–ö
            main_session = time(9, 50) <= current_time <= time(18, 50)
            # –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è: 19:00 - 23:49 –ú–°–ö  
            evening_session = time(19, 0) <= current_time <= time(23, 49)
            return main_session or evening_session
        else:  # –°–±-–í—Å
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è: 10:00 - 19:00 –ú–°–ö
            weekend_session = time(10, 0) <= current_time <= time(19, 0)
            return weekend_session
    
    def get_current_session(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()
        
        if current_weekday < 5:  # –ü–Ω-–ü—Ç
            if time(9, 50) <= current_time <= time(18, 50):
                return 'main'
            elif time(19, 0) <= current_time <= time(23, 49):
                return 'evening'
        else:  # –°–±-–í—Å
            if time(10, 0) <= current_time <= time(19, 0):
                return 'weekend'
        
        return 'closed'
    
    def get_time_quality(self) -> str:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()
        
        if current_weekday < 5:  # –ü–Ω-–ü—Ç
            if time(11, 0) <= current_time <= time(16, 0):
                return 'premium'  # –õ—É—á—à–µ–µ –≤—Ä–µ–º—è
            elif time(9, 50) <= current_time <= time(18, 50):
                return 'normal'   # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            elif time(19, 0) <= current_time <= time(23, 49):
                return 'evening'  # –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è
        else:  # –í—ã—Ö–æ–¥–Ω—ã–µ
            return 'weekend'
        
        return 'closed'
    
    async def analyze_market(self, symbol: str) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä + GPT —Å –†–ï–ê–õ–¨–ù–´–ú–ò ADX —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
        try:
            logger.info(f"üîç –ê–ù–ê–õ–ò–ó {symbol} —Å –†–ï–ê–õ–¨–ù–´–ú–ò ADX –æ—Ç GPT")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=120
            )
            
            if len(candles) < 30:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(candles)} —Å–≤–µ—á–µ–π")
                return None
            
            logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                logger.error(f"–ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol}")
                return None
            
            # –≠–¢–ê–ü 1: –ë–ê–ó–û–í–´–ô –§–ò–õ–¨–¢–† (–ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è)
            if not await self._check_basic_filter(df, symbol):
                logger.info(f"‚è≥ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è {symbol}")
                return None
            
            logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è {symbol}")
            
            # –≠–¢–ê–ü 2: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø GPT
            market_data = self._prepare_market_data(df, symbol)
            
            # –≠–¢–ê–ü 3: GPT –†–ê–°–°–ß–ò–¢–´–í–ê–ï–¢ –†–ï–ê–õ–¨–ù–´–ï ADX –ò –ü–†–ò–ù–ò–ú–ê–ï–¢ –†–ï–®–ï–ù–ò–ï
            if self.gpt_analyzer:
                gpt_advice = await self._get_gpt_decision(market_data, symbol)
                
                if gpt_advice and gpt_advice.recommendation in ['BUY', 'WEAK_BUY']:
                    # GPT —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∫—É - —Å–æ–∑–¥–∞—ë–º —Å–∏–≥–Ω–∞–ª —Å –†–ï–ê–õ–¨–ù–´–ú–ò ADX
                    signal = TradingSignal(
                        symbol=symbol,
                        timestamp=df.iloc[-1]['timestamp'],
                        price=market_data['current_price'],
                        ema20=market_data['ema20'],
                        # –†–ï–ê–õ–¨–ù–´–ï ADX –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç GPT
                        adx=gpt_advice.calculated_adx or 0.0,
                        plus_di=gpt_advice.calculated_plus_di or 0.0,
                        minus_di=gpt_advice.calculated_minus_di or 0.0,
                        # GPT –¥–∞–Ω–Ω—ã–µ
                        gpt_recommendation=gpt_advice.recommendation,
                        gpt_confidence=gpt_advice.confidence,
                        gpt_full_advice=gpt_advice  # –ü–æ–ª–Ω—ã–π GPT –æ–±—ä–µ–∫—Ç
                    )
                    
                    logger.info(f"üéâ GPT –†–ï–ö–û–ú–ï–ù–î–£–ï–¢ {gpt_advice.recommendation} –¥–ª—è {symbol}")
                    logger.info(f"üìä –†–ï–ê–õ–¨–ù–´–ï ADX –æ—Ç GPT: ADX={signal.adx:.1f}, +DI={signal.plus_di:.1f}, -DI={signal.minus_di:.1f}")
                    return signal
                else:
                    rec = gpt_advice.recommendation if gpt_advice else 'UNKNOWN'
                    logger.info(f"‚è≥ GPT –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∫—É {symbol}: {rec}")
                    return None
            else:
                # –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ GPT - —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ë–ï–ó ADX
                logger.warning("ü§ñ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –±–∞–∑–æ–≤–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
                signal = TradingSignal(
                    symbol=symbol,
                    timestamp=df.iloc[-1]['timestamp'],
                    price=market_data['current_price'],
                    ema20=market_data['ema20'],
                    # –ë–µ–∑ ADX –∑–Ω–∞—á–µ–Ω–∏–π
                    adx=0.0,
                    plus_di=0.0,
                    minus_di=0.0
                )
                return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ {symbol}: {e}")
            return None
    
    async def _check_basic_filter(self, df: pd.DataFrame, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: —Ü–µ–Ω–∞ > EMA20 + —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è
            if not self.is_market_open():
                session = self.get_current_session()
                logger.info(f"üìÖ –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç –¥–ª—è {symbol} (—Å–µ—Å—Å–∏—è: {session})")
                return False
            
            # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA20
            closes = df['close'].tolist()
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            
            current_price = closes[-1]
            current_ema20 = ema20[-1]
            
            if pd.isna(current_ema20):
                logger.warning(f"EMA20 –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–ª—è {symbol}")
                return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: —Ü–µ–Ω–∞ > EMA20
            price_above_ema = current_price > current_ema20
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            session = self.get_current_session()
            time_quality = self.get_time_quality()
            
            logger.info(f"üîç –ë–ê–ó–û–í–´–ô –§–ò–õ–¨–¢–† {symbol}:")
            logger.info(f"   üí∞ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ")
            logger.info(f"   üìà EMA20: {current_ema20:.2f} ‚ÇΩ")
            logger.info(f"   üìä –¶–µ–Ω–∞ > EMA20: {'‚úÖ' if price_above_ema else '‚ùå'}")
            logger.info(f"   ‚è∞ –°–µ—Å—Å–∏—è: {session} ({time_quality})")
            
            return price_above_ema
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ {symbol}: {e}")
            return False
    
    def _prepare_market_data(self, df: pd.DataFrame, symbol: str) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è GPT –∞–Ω–∞–ª–∏–∑–∞ —Å –†–ï–ê–õ–¨–ù–´–ú–ò ADX —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
        try:
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            volumes = df['volume'].tolist()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            current_price = closes[-1]
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            current_ema20 = ema20[-1]
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤
            avg_volume_5d = np.mean(volumes[-120:]) if len(volumes) >= 120 else np.mean(volumes)
            current_volume = volumes[-1]
            volume_ratio = current_volume / avg_volume_5d if avg_volume_5d > 0 else 1.0
            
            # –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            price_levels = self._analyze_price_levels(df)
            
            # –¶–µ–Ω–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            price_movement = self._analyze_price_movement(closes)
            
            # –°–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π)
            candles_data = []
            for i in range(max(0, len(df) - 50), len(df)):
                row = df.iloc[i]
                candles_data.append({
                    'timestamp': row['timestamp'],
                    'open': float(row['open']),
                    'high': float(row['high']),
                    'low': float(row['low']),
                    'close': float(row['close']),
                    'volume': int(row['volume'])
                })
            
            market_data = {
                # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                'symbol': symbol,
                'current_price': current_price,
                'ema20': current_ema20,
                'price_above_ema': current_price > current_ema20,
                
                # –°–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –†–ï–ê–õ–¨–ù–´–• ADX
                'candles_data': candles_data,
                
                # –ê–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤
                'volume_analysis': {
                    'current_volume': current_volume,
                    'avg_volume_5d': avg_volume_5d,
                    'volume_ratio': volume_ratio,
                    'volume_trend': self._get_volume_trend(volumes)
                },
                
                # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                'price_levels': price_levels,
                
                # –¶–µ–Ω–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                'price_movement': price_movement,
                
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
                'trading_session': self.get_current_session(),
                'time_quality': self.get_time_quality(),
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è GPT
                'conditions_met': True  # –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω
            }
            
            logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT —Ä–∞—Å—á–µ—Ç–∞ –†–ï–ê–õ–¨–ù–´–• ADX {symbol}")
            return market_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return {}
    
    def _analyze_price_levels(self, df: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π
            recent_data = df.tail(50) if len(df) > 50 else df
            
            highs = recent_data['high'].tolist()
            lows = recent_data['low'].tolist()
            closes = recent_data['close'].tolist()
            
            current_price = closes[-1]
            
            # –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã)
            resistances = []
            for i in range(2, len(highs) - 2):
                if (highs[i] > highs[i-1] and highs[i] > highs[i-2] and 
                    highs[i] > highs[i+1] and highs[i] > highs[i+2]):
                    if highs[i] > current_price:
                        resistances.append(highs[i])
            
            # –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã)
            supports = []
            for i in range(2, len(lows) - 2):
                if (lows[i] < lows[i-1] and lows[i] < lows[i-2] and 
                    lows[i] < lows[i+1] and lows[i] < lows[i+2]):
                    if lows[i] < current_price:
                        supports.append(lows[i])
            
            resistances = sorted(list(set(resistances)))[:3]  # –ë–ª–∏–∂–∞–π—à–∏–µ 3
            supports = sorted(list(set(supports)), reverse=True)[:3]  # –ë–ª–∏–∂–∞–π—à–∏–µ 3
            
            return {
                'current_price': current_price,
                'nearest_resistance': resistances[0] if resistances else None,
                'nearest_support': supports[0] if supports else None,
                'all_resistances': resistances,
                'all_supports': supports,
                'recent_high': max(highs),
                'recent_low': min(lows)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {}
    
    def _analyze_price_movement(self, closes: List[float]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è"""
        try:
            if len(closes) < 5:
                return {}
            
            current_price = closes[-1]
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            change_1h = ((current_price - closes[-2]) / closes[-2] * 100) if len(closes) >= 2 else 0
            change_4h = ((current_price - closes[-5]) / closes[-5] * 100) if len(closes) >= 5 else 0
            change_1d = ((current_price - closes[-25]) / closes[-25] * 100) if len(closes) >= 25 else 0
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞ 5 –¥–Ω–µ–π
            if len(closes) >= 25:
                recent_changes = [abs(closes[i] - closes[i-1]) / closes[i-1] * 100 
                                for i in range(-25, -1)]
                volatility_5d = np.mean(recent_changes)
            else:
                volatility_5d = 0
            
            return {
                'change_1h': round(change_1h, 2),
                'change_4h': round(change_4h, 2),
                'change_1d': round(change_1d, 2),
                'volatility_5d': round(volatility_5d, 2)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤–∏–∂–µ–Ω–∏—è: {e}")
            return {}
    
    def _get_volume_trend(self, volumes: List[int]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –æ–±—ä—ë–º–æ–≤"""
        try:
            if len(volumes) < 10:
                return 'unknown'
            
            recent_avg = np.mean(volumes[-5:])
            previous_avg = np.mean(volumes[-10:-5])
            
            if recent_avg > previous_avg * 1.1:
                return 'increasing'
            elif recent_avg < previous_avg * 0.9:
                return 'decreasing'
            else:
                return 'stable'
                
        except Exception:
            return 'unknown'
    
    async def _get_gpt_decision(self, market_data: Dict, symbol: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç GPT —Å —Ä–∞—Å—á–µ—Ç–æ–º –†–ï–ê–õ–¨–ù–´–• ADX"""
        try:
            logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPT –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –†–ï–ê–õ–¨–ù–´–• ADX {symbol}...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ ADX —Ä–∞—Å—á–µ—Ç—ã
            signal_data = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'price': market_data['current_price'],
                'ema20': market_data['ema20'],
                'price_above_ema': market_data['price_above_ema'],
                'conditions_met': market_data['conditions_met'],
                
                # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ ADX - GPT –∏—Ö —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç)
                'volume_analysis': market_data.get('volume_analysis', {}),
                'price_levels': market_data.get('price_levels', {}),
                
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
                'trading_session': market_data.get('trading_session', 'unknown'),
                'time_quality': market_data.get('time_quality', 'unknown')
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'price_movement' in market_data:
                signal_data.update(market_data['price_movement'])
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É GPT —Å —Ä–∞—Å—á–µ—Ç–æ–º –†–ï–ê–õ–¨–ù–´–• ADX
            gpt_advice = await self.gpt_analyzer.analyze_signal(
                signal_data=signal_data,
                candles_data=market_data.get('candles_data'),
                is_manual_check=False,
                symbol=symbol
            )
            
            if gpt_advice:
                adx_info = ""
                if gpt_advice.calculated_adx is not None:
                    adx_info = f" (–†–ï–ê–õ–¨–ù–´–ô ADX: {gpt_advice.calculated_adx:.1f})"
                
                logger.info(f"ü§ñ GPT –æ—Ç–≤–µ—Ç –¥–ª—è {symbol}: {gpt_advice.recommendation} ({gpt_advice.confidence}%){adx_info}")
                return gpt_advice
            else:
                logger.warning(f"ü§ñ GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {symbol}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    async def get_detailed_market_status(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞ —Å –†–ï–ê–õ–¨–ù–´–ú–ò ADX –æ—Ç GPT"""
        try:
            logger.info(f"üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è {symbol} —Å –†–ï–ê–õ–¨–ù–´–ú–ò ADX...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è
            if not self.is_market_open():
                session = self.get_current_session()
                return f"‚è∞ <b>–†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç</b>\n\n–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {session}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è."
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return f"‚ùå <b>–ê–∫—Ü–∏—è {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>"
            
            candles = await asyncio.wait_for(
                self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=120),
                timeout=30
            )
            
            if len(candles) < 30:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
                return f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            
            if df.empty:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol}")
                return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}</b>"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            market_data = self._prepare_market_data(df, symbol)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
            basic_filter_passed = await self._check_basic_filter(df, symbol)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_price = market_data['current_price']
            current_ema20 = market_data['ema20']
            price_above_ema = current_price > current_ema20
            
            session = self.get_current_session()
            time_quality = self.get_time_quality()
            
            message = f"""üìä <b>–°–û–°–¢–û–Ø–ù–ò–ï {symbol}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {current_ema20:.2f} ‚ÇΩ {'‚úÖ' if price_above_ema else '‚ùå'}

‚è∞ <b>–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è:</b> {session} ({time_quality})

üîç <b>–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:</b> {'‚úÖ –ü—Ä–æ–π–¥–µ–Ω' if basic_filter_passed else '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω'}"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑ —Å —Ä–∞—Å—á–µ—Ç–æ–º –†–ï–ê–õ–¨–ù–´–• ADX
            if self.gpt_analyzer and basic_filter_passed:
                try:
                    logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPT –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –†–ï–ê–õ–¨–ù–´–• ADX {symbol}...")
                    
                    gpt_advice = await self._get_gpt_decision(market_data, symbol)
                    if gpt_advice:
                        message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice, symbol)}"
                        logger.info(f"‚úÖ GPT —Ä–∞—Å—Å—á–∏—Ç–∞–ª –†–ï–ê–õ–¨–ù–´–ï ADX –¥–ª—è {symbol}")
                    else:
                        message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ ADX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                        logger.warning(f"‚ö†Ô∏è GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
                    message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ ADX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
            elif not basic_filter_passed:
                message += "\n\n‚è≥ <b>–û–∂–∏–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π...</b>"
            else:
                message += "\n\nüìä <b>–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω</b>\nü§ñ <i>GPT —Å ADX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
            
            return message
                
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol}")
            return f"‚ùå <b>–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>\n\n–í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."
    
    async def check_peak_trend(self, symbol: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ GPT —Å –†–ï–ê–õ–¨–ù–´–ú–ò ADX (>45)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return None
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=120
            )
            
            if len(candles) < 30:
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT
            market_data = self._prepare_market_data(df, symbol)
            current_price = market_data['current_price']
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π GPT –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ (–†–ï–ê–õ–¨–ù–´–ô ADX > 45)
            if self.gpt_analyzer:
                try:
                    signal_data = {
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        'price': current_price,
                        'ema20': market_data['ema20'],
                        'price_above_ema': market_data['price_above_ema'],
                        'conditions_met': True,
                        'check_peak': True,  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø–∏–∫–∞
                        
                        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –†–ï–ê–õ–¨–ù–´–• ADX
                        'volume_analysis': market_data.get('volume_analysis', {}),
                        'price_levels': market_data.get('price_levels', {}),
                        'trading_session': market_data.get('trading_session', 'unknown')
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    if 'price_movement' in market_data:
                        signal_data.update(market_data['price_movement'])
                    
                    gpt_advice = await self.gpt_analyzer.analyze_signal(
                        signal_data=signal_data,
                        candles_data=market_data.get('candles_data'),
                        is_manual_check=False,
                        symbol=symbol
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–´–ô ADX > 45 –æ—Ç GPT
                    if (gpt_advice and 
                        gpt_advice.calculated_adx is not None and 
                        gpt_advice.calculated_adx > 45):
                        
                        logger.info(f"üî• GPT –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}: –†–ï–ê–õ–¨–ù–´–ô ADX {gpt_advice.calculated_adx:.1f} > 45")
                        return current_price
                    
                    # –ò–ª–∏ –µ—Å–ª–∏ GPT –ø—Ä—è–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç AVOID –∏–∑-–∑–∞ –ø–∏–∫–∞
                    if (gpt_advice and 
                        gpt_advice.recommendation == 'AVOID' and 
                        ('–ø–∏–∫' in gpt_advice.reasoning.lower() or 'peak' in gpt_advice.reasoning.lower())):
                        
                        logger.info(f"üî• GPT –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol} –ø–æ –∞–Ω–∞–ª–∏–∑—É: {current_price:.1f}")
                        return current_price
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –ø–∏–∫–∞ {symbol}: {e}")
            
            # Fallback: –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ ADX
            if 'price_movement' in market_data:
                volatility = market_data['price_movement'].get('volatility_5d', 0)
                if volatility > 5.0:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∏–∫–æ–º
                    logger.info(f"üî• –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {symbol}: {volatility:.1f}%")
                    return current_price
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ {symbol}: {e}")
            return None
    
    async def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return 0
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=2
            )
            if candles:
                df = self.tinkoff_provider.candles_to_dataframe(candles)
                return df.iloc[-1]['close'] if not df.empty else 0
            return 0
        except:
            return 0
