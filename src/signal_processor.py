import asyncio
import logging
from datetime import datetime
from typing import Optional
import pandas as pd
from dataclasses import dataclass

from .indicators import TechnicalIndicators

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    symbol: str
    timestamp: datetime
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float

class SignalProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å TradingView –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    
    def __init__(self, tinkoff_provider, database, gpt_analyzer=None):
        self.tinkoff_provider = tinkoff_provider
        self.db = database
        self.gpt_analyzer = gpt_analyzer
    
    async def analyze_market(self, symbol: str) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏ —Å 15 —á–∞—Å–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            logger.info(f"üìã {symbol}: FIGI = {ticker_info['figi']}")
            
            # –¢–ï–°–¢: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –Ω–∞ —Ç–µ–∫—É—â–µ–º –¥–≤–∏–∂–µ–Ω–∏–∏ - 15 —á–∞—Å–æ–≤!
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=15
            )
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} (15 —á–∞—Å–æ–≤)")
            
            if len(candles) < 15:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(candles)} < 15")
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                logger.error(f"–ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol}")
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal = self._calculate_indicators(df, symbol)
            
            return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    def _calculate_indicators(self, df, symbol: str) -> Optional[TradingSignal]:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å TradingView –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        try:
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            logger.info(f"üìä –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}: {len(closes)} —Å–≤–µ—á–µ–π (TradingView)")
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if len(closes) < 15:
                logger.warning(f"–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(closes)} —Å–≤–µ—á–µ–π (–Ω—É–∂–Ω–æ 15+)")
                return None
            
            # –†–∞—Å—á–µ—Ç EMA —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
            if len(closes) >= 20:
                ema20 = TechnicalIndicators.calculate_ema(closes, 20)
                ema_period = 20
            else:
                ema_period = max(5, len(closes) // 2)
                ema20 = TechnicalIndicators.calculate_ema(closes, ema_period)
                logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º EMA{ema_period} –≤–º–µ—Å—Ç–æ EMA20 –¥–ª—è {symbol} (–º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö)")
            
            # –†–∞—Å—á–µ—Ç ADX —Å TradingView –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_price = closes[-1]
            current_ema20 = ema20[-1] if not pd.isna(ema20[-1]) else None
            current_adx = adx_data['adx'][-1] if not pd.isna(adx_data['adx'][-1]) else None
            current_plus_di = adx_data['plus_di'][-1] if not pd.isna(adx_data['plus_di'][-1]) else None
            current_minus_di = adx_data['minus_di'][-1] if not pd.isna(adx_data['minus_di'][-1]) else None
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            logger.info(f"üí∞ {symbol}: {current_price:.2f} ‚ÇΩ | EMA{ema_period}: {current_ema20:.2f if current_ema20 else 'NaN'}")
            logger.info(f"üìä ADX(TradingView-15—á): {current_adx:.1f if current_adx else 'NaN'} | +DI: {current_plus_di:.1f if current_plus_di else 'NaN'} | -DI: {current_minus_di:.1f if current_minus_di else 'NaN'}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º TradingView –¥–ª—è GAZP
            if symbol == 'GAZP' and current_adx is not None:
                expected_adx = 58.96
                expected_plus_di = 18.41
                expected_minus_di = 29.35
                
                adx_diff = abs(current_adx - expected_adx)
                plus_di_diff = abs(current_plus_di - expected_plus_di)
                minus_di_diff = abs(current_minus_di - expected_minus_di)
                total_diff = adx_diff + plus_di_diff + minus_di_diff
                
                logger.info(f"üéØ –¢–ï–°–¢ vs TradingView GAZP (15—á):")
                logger.info(f"   ADX: {current_adx:.1f} vs {expected_adx} (–æ—Ç–∫–ª: {adx_diff:.1f})")
                logger.info(f"   +DI: {current_plus_di:.1f} vs {expected_plus_di} (–æ—Ç–∫–ª: {plus_di_diff:.1f})")
                logger.info(f"   -DI: {current_minus_di:.1f} vs {expected_minus_di} (–æ—Ç–∫–ª: {minus_di_diff:.1f})")
                logger.info(f"   –û–±—â–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {total_diff:.1f}")
                
                if total_diff < 10:
                    logger.info("üéâ –û–¢–õ–ò–ß–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨ —Å 15 —á–∞—Å–∞–º–∏!")
                elif total_diff < 20:
                    logger.info("‚úÖ –•–û–†–û–®–ê–Ø –¢–û–ß–ù–û–°–¢–¨ —Å 15 —á–∞—Å–∞–º–∏!")
                elif total_diff < 40:
                    logger.info("‚ö†Ô∏è –°–†–ï–î–ù–Ø–Ø –¢–û–ß–ù–û–°–¢–¨ - –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º")
                else:
                    logger.info("‚ùå –ü–õ–û–•–ê–Ø –¢–û–ß–ù–û–°–¢–¨ - –Ω—É–∂–Ω–∞ –¥—Ä—É–≥–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            if any(val is None or pd.isna(val) for val in [current_ema20, current_adx, current_plus_di, current_minus_di]):
                logger.warning(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç NaN –¥–ª—è {symbol} (—Å–≤–µ—á–µ–π: {len(closes)})")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                if current_ema20 is None or pd.isna(current_ema20):
                    logger.error(f"‚ùå EMA{ema_period} –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è {symbol}")
                if current_adx is None or pd.isna(current_adx):
                    logger.error(f"‚ùå ADX –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è {symbol}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö ADX –∑–Ω–∞—á–µ–Ω–∏–π
                    valid_adx = [x for x in adx_data['adx'] if not pd.isna(x)]
                    logger.error(f"   –í–∞–ª–∏–¥–Ω—ã—Ö ADX: {len(valid_adx)}/{len(adx_data['adx'])}")
                if current_plus_di is None or pd.isna(current_plus_di):
                    logger.error(f"‚ùå +DI –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è {symbol}")
                if current_minus_di is None or pd.isna(current_minus_di):
                    logger.error(f"‚ùå -DI –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è {symbol}")
                
                return None
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª–∞
            condition_1 = current_price > current_ema20
            condition_2 = current_adx > 25
            condition_3 = current_plus_di > current_minus_di
            condition_4 = current_plus_di - current_minus_di > 1
            
            conditions = [condition_1, condition_2, condition_3, condition_4]
            conditions_met = sum(conditions)
            
            logger.info(f"üßê {symbol} —É—Å–ª–æ–≤–∏—è: {conditions_met}/4 | "
                       f"–¶–µ–Ω–∞>EMA: {'‚úÖ' if condition_1 else '‚ùå'} | "
                       f"ADX>25: {'‚úÖ' if condition_2 else '‚ùå'} | "
                       f"+DI>-DI: {'‚úÖ' if condition_3 else '‚ùå'} | "
                       f"–†–∞–∑–Ω–∏—Ü–∞>1: {'‚úÖ' if condition_4 else '‚ùå'}")
            
            if all(conditions):
                logger.info(f"üéâ –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò {symbol}!")
                
                signal = TradingSignal(
                    symbol=symbol,
                    timestamp=df.iloc[-1]['timestamp'],
                    price=current_price,
                    ema20=current_ema20,
                    adx=current_adx,
                    plus_di=current_plus_di,
                    minus_di=current_minus_di
                )
                
                return signal
            else:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª {symbol}")
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ {symbol}: {e}")
            return None
    
    async def get_detailed_market_status(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞ —Å 15 —á–∞—Å–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"üîÑ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å {symbol} (15 —á–∞—Å–æ–≤)")
            
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return f"‚ùå <b>–ê–∫—Ü–∏—è {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>"
            
            # –¢–ï–°–¢: 15 —á–∞—Å–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            candles = await asyncio.wait_for(
                self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=15),
                timeout=45
            )
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol} (15—á)")
            
            if len(candles) < 15:
                return f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>\n–ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 15."
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}</b>"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º EMA
            if len(closes) >= 20:
                ema20 = TechnicalIndicators.calculate_ema(closes, 20)
                ema_period = 20
            else:
                ema_period = max(5, len(closes) // 2)
                ema20 = TechnicalIndicators.calculate_ema(closes, ema_period)
            
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            
            current_price = closes[-1]
            current_ema20 = ema20[-1]
            current_adx = adx_data['adx'][-1]
            current_plus_di = adx_data['plus_di'][-1]
            current_minus_di = adx_data['minus_di'][-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            nan_indicators = []
            if pd.isna(current_ema20):
                nan_indicators.append("EMA20")
            if pd.isna(current_adx):
                nan_indicators.append("ADX")
            if pd.isna(current_plus_di):
                nan_indicators.append("+DI")
            if pd.isna(current_minus_di):
                nan_indicators.append("-DI")
            
            if nan_indicators:
                logger.error(f"NaN –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol}: {nan_indicators}")
                return f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ {symbol}</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å: {', '.join(nan_indicators)}\n–î–∞–Ω–Ω—ã—Ö: {len(closes)} —Å–≤–µ—á–µ–π (15—á)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            price_above_ema = current_price > current_ema20
            strong_trend = current_adx > 25
            positive_direction = current_plus_di > current_minus_di
            di_difference = (current_plus_di - current_minus_di) > 1
            peak_trend = current_adx > 45
            
            all_conditions_met = all([price_above_ema, strong_trend, positive_direction, di_difference])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            active_positions = await self.db.get_active_positions_count(symbol)
            peak_warning = ""
            if peak_trend and active_positions > 0:
                peak_warning = f"\nüî• <b>–í–ù–ò–ú–ê–ù–ò–ï: ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}! –í—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!</b>"
            elif peak_trend:
                peak_warning = f"\nüî• <b>ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}</b>"
            
            ema_text = f"EMA{ema_period}" if ema_period != 20 else "EMA20"
            
            message = f"""üìä <b>–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ê–ö–¶–ò–ô {symbol}</b>
<i>–¢–ï–°–¢: –ê–Ω–∞–ª–∏–∑ –Ω–∞ {len(closes)} —Å–≤–µ—á–∞—Ö (15—á - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)</i>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ
üìà <b>{ema_text}:</b> {current_ema20:.2f} ‚ÇΩ {'‚úÖ' if price_above_ema else '‚ùå'}

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {current_adx:.1f} {'‚úÖ' if strong_trend else '‚ùå'} (–Ω—É–∂–Ω–æ >25)
‚Ä¢ <b>+DI:</b> {current_plus_di:.1f}
‚Ä¢ <b>-DI:</b> {current_minus_di:.1f} {'‚úÖ' if positive_direction else '‚ùå'}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {current_plus_di - current_minus_di:.1f} {'‚úÖ' if di_difference else '‚ùå'} (–Ω—É–∂–Ω–æ >1){peak_warning}

{'üîî <b>–í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –æ–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª!</b>' if all_conditions_met else '‚è≥ <b>–û–∂–∏–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...</b>'}"""

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å TradingView –¥–ª—è GAZP (—Ç–µ—Å—Ç —Å 15—á)
            if symbol == 'GAZP' and not pd.isna(current_adx):
                expected_adx = 58.96
                expected_plus_di = 18.41
                expected_minus_di = 29.35
                
                adx_diff = abs(current_adx - expected_adx)
                plus_di_diff = abs(current_plus_di - expected_plus_di)
                minus_di_diff = abs(current_minus_di - expected_minus_di)
                total_diff = adx_diff + plus_di_diff + minus_di_diff
                
                message += f"\n\nüéØ <b>–¢–ï–°–¢ vs TradingView (15—á):</b>\n"
                message += f"ADX: {current_adx:.1f} vs —ç—Ç–∞–ª–æ–Ω {expected_adx} (–æ—Ç–∫–ª: {adx_diff:.1f})\n"
                message += f"+DI: {current_plus_di:.1f} vs —ç—Ç–∞–ª–æ–Ω {expected_plus_di} (–æ—Ç–∫–ª: {plus_di_diff:.1f})\n"
                message += f"-DI: {current_minus_di:.1f} vs —ç—Ç–∞–ª–æ–Ω {expected_minus_di} (–æ—Ç–∫–ª: {minus_di_diff:.1f})\n"
                message += f"–û–±—â–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: <b>{total_diff:.1f}</b>"
                
                if total_diff < 10:
                    message += " üéâ –°–£–ü–ï–†!"
                elif total_diff < 20:
                    message += " ‚úÖ –•–û–†–û–®–û!"
                elif total_diff < 40:
                    message += " ‚ö†Ô∏è –°–†–ï–î–ù–ï"
                else:
                    message += " ‚ùå –ü–õ–û–•–û"
            
            # –î–æ–±–∞–≤–ª—è–µ–º GPT –∞–Ω–∞–ª–∏–∑
            if self.gpt_analyzer:
                try:
                    candles_data = []
                    for _, row in df.iterrows():
                        candles_data.append({
                            'timestamp': row['timestamp'],
                            'open': float(row['open']),
                            'high': float(row['high']),
                            'low': float(row['low']),
                            'close': float(row['close']),
                            'volume': int(row['volume'])
                        })
                    
                    signal_data = {
                        'price': current_price,
                        'ema20': current_ema20,
                        'adx': current_adx,
                        'plus_di': current_plus_di,
                        'minus_di': current_minus_di,
                        'conditions_met': all_conditions_met
                    }
                    
                    gpt_advice = await self.gpt_analyzer.analyze_signal(
                        signal_data, candles_data, is_manual_check=True, symbol=symbol
                    )
                    if gpt_advice:
                        message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice, symbol)}"
                    else:
                        message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                    message += "\n\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
            
            return message
                
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}")
            return f"‚ùå <b>–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}</b>"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}</b>\n\n–î–µ—Ç–∞–ª–∏: {str(e)}"
    
    async def check_peak_trend(self, symbol: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ —Å 15 —á–∞—Å–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return None
                
            # –¢–ï–°–¢: 15 —á–∞—Å–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –ø–∏–∫–∞–º
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=15
            )
            
            if len(candles) < 15:
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                return None
            
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            
            adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
            current_adx = adx_data['adx'][-1]
            current_price = closes[-1]
            
            if pd.isna(current_adx):
                logger.warning(f"ADX –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ {symbol}")
                return None
                
            if current_adx > 45:
                logger.info(f"üî• –ü–∏–∫ —Ç—Ä–µ–Ω–¥–∞ {symbol}: ADX {current_adx:.1f}")
                return current_price
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ {symbol}: {e}")
            return None
    
    async def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return 0
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=5  # –î–ª—è —Ü–µ–Ω—ã —Ö–≤–∞—Ç–∏—Ç 5 —á–∞—Å–æ–≤
            )
            if candles:
                df = self.tinkoff_provider.candles_to_dataframe(candles)
                return df.iloc[-1]['close'] if not df.empty else 0
            return 0
        except:
            return 0
