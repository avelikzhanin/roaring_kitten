import asyncio
import logging
from datetime import datetime, time
import pytz
from typing import Optional, Dict, List
import pandas as pd
import numpy as np
from dataclasses import dataclass

from .indicators import TechnicalIndicators

logger = logging.getLogger(__name__)

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    symbol: str
    timestamp: datetime
    price: float
    ema20: float
    
    # ADX –¥–∞–Ω–Ω—ã–µ (–º–æ–≥—É—Ç –±—ã—Ç—å None –µ—Å–ª–∏ GPT –Ω–µ —Å–º–æ–≥ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å)
    adx: float = 0.0
    plus_di: float = 0.0
    minus_di: float = 0.0
    
    # GPT –¥–∞–Ω–Ω—ã–µ
    gpt_recommendation: Optional[str] = None
    gpt_confidence: Optional[int] = None
    gpt_full_advice: Optional[object] = None  # –ü–æ–ª–Ω—ã–π GPT –æ–±—ä–µ–∫—Ç

class SignalProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    
    def __init__(self, tinkoff_provider, database, gpt_analyzer=None):
        self.tinkoff_provider = tinkoff_provider
        self.db = database
        self.gpt_analyzer = gpt_analyzer
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
        analysis_type = "‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å GPT" if gpt_analyzer else "‚ùå –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä"
        logger.info(f"üîÑ SignalProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({analysis_type})")
    
    def is_market_open(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()  # 0=–ø–Ω, 6=–≤—Å
        
        if current_weekday < 5:  # –ü–Ω-–ü—Ç
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: 09:50 - 18:50 –ú–°–ö
            main_session = time(9, 50) <= current_time <= time(18, 50)
            # –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è: 19:00 - 23:49 –ú–°–ö  
            evening_session = time(19, 0) <= current_time <= time(23, 49)
            return main_session or evening_session
        else:  # –°–±-–í—Å
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è: 10:00 - 19:00 –ú–°–ö
            weekend_session = time(10, 0) <= current_time <= time(19, 0)
            return weekend_session
    
    def get_current_session(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()
        
        if current_weekday < 5:  # –ü–Ω-–ü—Ç
            if time(9, 50) <= current_time <= time(18, 50):
                return 'main'
            elif time(19, 0) <= current_time <= time(23, 49):
                return 'evening'
        else:  # –°–±-–í—Å
            if time(10, 0) <= current_time <= time(19, 0):
                return 'weekend'
        
        return 'closed'
    
    def get_time_quality(self) -> str:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        now_moscow = datetime.now(self.moscow_tz)
        current_time = now_moscow.time()
        current_weekday = now_moscow.weekday()
        
        if current_weekday < 5:  # –ü–Ω-–ü—Ç
            if time(11, 0) <= current_time <= time(16, 0):
                return 'premium'  # –õ—É—á—à–µ–µ –≤—Ä–µ–º—è
            elif time(9, 50) <= current_time <= time(18, 50):
                return 'normal'   # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            elif time(19, 0) <= current_time <= time(23, 49):
                return 'evening'  # –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è
        else:  # –í—ã—Ö–æ–¥–Ω—ã–µ
            return 'weekend'
        
        return 'closed'
    
    def get_market_status_text(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞ —Å —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
        is_open = self.is_market_open()
        session = self.get_current_session()
        time_quality = self.get_time_quality()
        
        if is_open:
            if time_quality == 'premium':
                return {
                    'emoji': 'üü¢',
                    'status': '–û–¢–ö–†–´–¢',
                    'description': f'–ü—Ä–µ–º–∏—É–º –≤—Ä–µ–º—è ({session})',
                    'data_freshness': '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã'
                }
            elif time_quality in ['normal', 'evening']:
                return {
                    'emoji': 'üü¢',
                    'status': '–û–¢–ö–†–´–¢', 
                    'description': f'–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è ({session})',
                    'data_freshness': '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã'
                }
            else:
                return {
                    'emoji': 'üü†',
                    'status': '–û–¢–ö–†–´–¢',
                    'description': f'–í—ã—Ö–æ–¥–Ω–∞—è —Å–µ—Å—Å–∏—è ({session})',
                    'data_freshness': '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã'
                }
        else:
            return {
                'emoji': 'üî¥',
                'status': '–ó–ê–ö–†–´–¢',
                'description': f'–í–Ω–µ—Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è ({session})',
                'data_freshness': '–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —Å–∞–º—ã–º–∏ —Å–≤–µ–∂–∏–º–∏'
            }
    
    async def analyze_market(self, symbol: str) -> Optional[TradingSignal]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä + GPT –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è)"""
        try:
            logger.info(f"üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó {symbol} - –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ GPT")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                logger.error(f"–¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ (–£–ú–ï–ù–¨–®–ò–õ–ò –¥–æ 70 —á–∞—Å–æ–≤ –≤–º–µ—Å—Ç–æ 120)
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=70
            )
            
            if len(candles) < 20:  # –°–Ω–∏–∑–∏–ª–∏ –º–∏–Ω–∏–º—É–º
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(candles)} —Å–≤–µ—á–µ–π")
                return None
            
            logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                logger.error(f"–ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol}")
                return None
            
            # –≠–¢–ê–ü 1: –ë–ê–ó–û–í–´–ô –§–ò–õ–¨–¢–† (—Ç–µ–ø–µ—Ä—å –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
            if not await self._check_basic_filter(df, symbol):
                logger.info(f"‚è≥ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è {symbol}")
                return None
            
            logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è {symbol}")
            
            # –≠–¢–ê–ü 2: –ü–û–î–ì–û–¢–û–í–ö–ê –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –î–ê–ù–ù–´–•
            market_data = self._prepare_comprehensive_data(df, symbol)
            
            # –≠–¢–ê–ü 3: –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó GPT
            if self.gpt_analyzer:
                gpt_advice = await self._get_comprehensive_decision(market_data, symbol)
                
                if gpt_advice and gpt_advice.recommendation in ['BUY', 'WEAK_BUY']:
                    # GPT —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∫—É - —Å–æ–∑–¥–∞—ë–º —Å–∏–≥–Ω–∞–ª
                    signal = TradingSignal(
                        symbol=symbol,
                        timestamp=df.iloc[-1]['timestamp'],
                        price=market_data['current_price'],
                        ema20=market_data['ema20'],
                        # ADX –¥–∞–Ω–Ω—ã–µ –∏–∑ GPT (–º–æ–≥—É—Ç –±—ã—Ç—å 0 –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–ª)
                        adx=gpt_advice.calculated_adx or 0.0,
                        plus_di=gpt_advice.calculated_plus_di or 0.0,
                        minus_di=gpt_advice.calculated_minus_di or 0.0,
                        # GPT –¥–∞–Ω–Ω—ã–µ
                        gpt_recommendation=gpt_advice.recommendation,
                        gpt_confidence=gpt_advice.confidence,
                        gpt_full_advice=gpt_advice
                    )
                    
                    adx_info = f", ADX: {signal.adx:.1f}" if signal.adx > 0 else ", ADX: –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω"
                    logger.info(f"üéâ GPT –†–ï–ö–û–ú–ï–ù–î–£–ï–¢ {gpt_advice.recommendation} –¥–ª—è {symbol} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {gpt_advice.confidence}%{adx_info})")
                    return signal
                else:
                    rec = gpt_advice.recommendation if gpt_advice else '–ù–ï–ò–ó–í–ï–°–¢–ù–û'
                    conf = f" ({gpt_advice.confidence}%)" if gpt_advice else ""
                    logger.info(f"‚è≥ GPT –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∫—É {symbol}: {rec}{conf}")
                    return None
            else:
                # –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ GPT - —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                logger.warning("ü§ñ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –±–∞–∑–æ–≤–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
                signal = TradingSignal(
                    symbol=symbol,
                    timestamp=df.iloc[-1]['timestamp'],
                    price=market_data['current_price'],
                    ema20=market_data['ema20']
                )
                return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    async def _check_basic_filter(self, df: pd.DataFrame, symbol: str) -> bool:
        """–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: –¢–û–õ–¨–ö–û —Ü–µ–Ω–∞ > EMA20 (—É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA20
            closes = df['close'].tolist()
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            
            current_price = closes[-1]
            current_ema20 = ema20[-1]
            
            if pd.isna(current_ema20):
                logger.warning(f"EMA20 –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–ª—è {symbol}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º: —Ü–µ–Ω–∞ > EMA20
            price_above_ema = current_price > current_ema20
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ä—ã–Ω–∫–∞
            market_status = self.get_market_status_text()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"üîç –ë–ê–ó–û–í–´–ô –§–ò–õ–¨–¢–† {symbol}:")
            logger.info(f"   üí∞ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ")
            logger.info(f"   üìà EMA20: {current_ema20:.2f} ‚ÇΩ")
            logger.info(f"   üìä –¶–µ–Ω–∞ > EMA20: {'‚úÖ' if price_above_ema else '‚ùå'}")
            logger.info(f"   {market_status['emoji']} –†—ã–Ω–æ–∫: {market_status['status']} ({market_status['description']})")
            
            return price_above_ema
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ {symbol}: {e}")
            return False
    
    def _prepare_comprehensive_data(self, df: pd.DataFrame, symbol: str) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ GPT –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            closes = df['close'].tolist()
            highs = df['high'].tolist()
            lows = df['low'].tolist()
            volumes = df['volume'].tolist()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            current_price = closes[-1]
            ema20 = TechnicalIndicators.calculate_ema(closes, 20)
            current_ema20 = ema20[-1]
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤
            volume_analysis = self._analyze_volumes_detailed(volumes)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π
            price_levels = self._analyze_price_levels_detailed(df)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ü–µ–Ω–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            price_movement = self._analyze_price_movement_detailed(closes)
            
            # –°–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT (–û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –¥–æ 50)
            max_candles = 50
            start_idx = max(0, len(df) - max_candles)
            
            candles_data = []
            for i in range(start_idx, len(df)):
                row = df.iloc[i]
                candles_data.append({
                    'timestamp': row['timestamp'],
                    'open': float(row['open']),
                    'high': float(row['high']),
                    'low': float(row['low']),
                    'close': float(row['close']),
                    'volume': int(row['volume'])
                })
            
            market_data = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'symbol': symbol,
                'current_price': current_price,
                'ema20': current_ema20,
                'price_above_ema': current_price > current_ema20,
                
                # –°–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 50)
                'candles_data': candles_data,
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤
                'volume_analysis': volume_analysis,
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                'price_levels': price_levels,
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
                'price_movement': price_movement,
                
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ (—Ç–µ–ø–µ—Ä—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
                'trading_session': self.get_current_session(),
                'time_quality': self.get_time_quality(),
                'market_status': self.get_market_status_text(),
                
                # –§–ª–∞–≥ —á—Ç–æ –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω
                'conditions_met': True
            }
            
            logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({len(candles_data)} —Å–≤–µ—á–µ–π)")
            return market_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return {}
    
    def _analyze_volumes_detailed(self, volumes: List[int]) -> Dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤"""
        try:
            if len(volumes) < 10:
                return {'trend': 'insufficient_data'}
            
            current_volume = volumes[-1]
            
            # –†–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            avg_5 = np.mean(volumes[-5:]) if len(volumes) >= 5 else current_volume
            avg_20 = np.mean(volumes[-20:]) if len(volumes) >= 20 else current_volume  
            avg_50 = np.mean(volumes[-50:]) if len(volumes) >= 50 else current_volume
            
            # –¢—Ä–µ–Ω–¥—ã
            recent_vs_medium = avg_5 / avg_20 if avg_20 > 0 else 1.0
            recent_vs_long = avg_5 / avg_50 if avg_50 > 0 else 1.0
            current_vs_avg = current_volume / avg_20 if avg_20 > 0 else 1.0
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            if recent_vs_medium > 1.3:
                trend = 'strong_increase'
            elif recent_vs_medium > 1.1:
                trend = 'increase'
            elif recent_vs_medium < 0.7:
                trend = 'strong_decrease'
            elif recent_vs_medium < 0.9:
                trend = 'decrease'
            else:
                trend = 'stable'
            
            return {
                'current_volume': current_volume,
                'avg_5': int(avg_5),
                'avg_20': int(avg_20),
                'avg_50': int(avg_50),
                'current_vs_avg': round(current_vs_avg, 2),
                'recent_vs_medium': round(recent_vs_medium, 2),
                'recent_vs_long': round(recent_vs_long, 2),
                'trend': trend,
                'volume_ratio': round(current_vs_avg, 2)  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä—ë–º–æ–≤: {e}")
            return {'trend': 'error'}
    
    def _analyze_price_levels_detailed(self, df: pd.DataFrame) -> Dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
            recent_data = df.tail(50) if len(df) > 50 else df
            
            highs = recent_data['high'].tolist()
            lows = recent_data['low'].tolist()
            closes = recent_data['close'].tolist()
            
            current_price = closes[-1]
            
            # –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤ (—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è)
            resistances = []
            for i in range(3, len(highs) - 3):  # –£–≤–µ–ª–∏—á–∏–ª–∏ –æ–∫–Ω–æ
                if (highs[i] > highs[i-1] and highs[i] > highs[i-2] and highs[i] > highs[i-3] and
                    highs[i] > highs[i+1] and highs[i] > highs[i+2] and highs[i] > highs[i+3]):
                    if highs[i] > current_price * 1.001:  # –ú–∏–Ω–∏–º—É–º 0.1% –≤—ã—à–µ
                        resistances.append(highs[i])
            
            # –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∏)
            supports = []
            for i in range(3, len(lows) - 3):
                if (lows[i] < lows[i-1] and lows[i] < lows[i-2] and lows[i] < lows[i-3] and
                    lows[i] < lows[i+1] and lows[i] < lows[i+2] and lows[i] < lows[i+3]):
                    if lows[i] < current_price * 0.999:  # –ú–∏–Ω–∏–º—É–º 0.1% –Ω–∏–∂–µ
                        supports.append(lows[i])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–µ
            resistances = sorted(resistances)[:5]  # –ë–ª–∏–∂–∞–π—à–∏–µ 5
            supports = sorted(supports, reverse=True)[:5]  # –ë–ª–∏–∂–∞–π—à–∏–µ 5
            
            # –û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            recent_high = max(highs)
            recent_low = min(lows)
            range_size = ((recent_high - recent_low) / recent_low) * 100
            
            # –ü–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            position_pct = ((current_price - recent_low) / (recent_high - recent_low)) * 100 if recent_high > recent_low else 50
            
            return {
                'current_price': current_price,
                'nearest_resistance': resistances[0] if resistances else None,
                'nearest_support': supports[0] if supports else None,
                'all_resistances': resistances,
                'all_supports': supports,
                'recent_high': recent_high,
                'recent_low': recent_low,
                'range_size_pct': round(range_size, 2),
                'position_in_range_pct': round(position_pct, 1)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {}
    
    def _analyze_price_movement_detailed(self, closes: List[float]) -> Dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è"""
        try:
            if len(closes) < 5:
                return {}
            
            current_price = closes[-1]
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            changes = {}
            periods = {'1h': 2, '4h': 5, '12h': 13, '1d': 25, '3d': 75}
            
            for period_name, idx_back in periods.items():
                if len(closes) >= idx_back:
                    old_price = closes[-idx_back]
                    change = ((current_price - old_price) / old_price * 100)
                    changes[f'change_{period_name}'] = round(change, 2)
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            volatilities = {}
            vol_periods = {'1d': 25, '3d': 75, '5d': 125}
            
            for vol_name, vol_back in vol_periods.items():
                if len(closes) >= vol_back:
                    recent_changes = [abs(closes[i] - closes[i-1]) / closes[i-1] * 100 
                                    for i in range(-vol_back, -1)]
                    volatilities[f'volatility_{vol_name}'] = round(np.mean(recent_changes), 2)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result = {**changes, **volatilities}
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if len(closes) >= 10:
                # –¢—Ä–µ–Ω–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å (—Å–∫–æ–ª—å–∫–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–≤–µ—á–µ–π —Ä–∞—Å—Ç—É—â–∏–µ)
                up_candles = sum(1 for i in range(-10, -1) if closes[i] > closes[i-1])
                result['trend_strength_pct'] = round((up_candles / 9) * 100, 1)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤–∏–∂–µ–Ω–∏—è: {e}")
            return {}
    
    async def _get_comprehensive_decision(self, market_data: Dict, symbol: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –æ—Ç GPT"""
        try:
            logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ GPT —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {symbol}...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT
            signal_data = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'price': market_data['current_price'],
                'ema20': market_data['ema20'],
                'price_above_ema': market_data['price_above_ema'],
                'conditions_met': market_data['conditions_met'],
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                'volume_analysis': market_data.get('volume_analysis', {}),
                'price_levels': market_data.get('price_levels', {}),
                'trading_session': market_data.get('trading_session', 'unknown'),
                'time_quality': market_data.get('time_quality', 'unknown'),
                'market_status': market_data.get('market_status', {})
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
            if 'price_movement' in market_data:
                signal_data.update(market_data['price_movement'])
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É GPT
            gpt_advice = await self.gpt_analyzer.analyze_signal(
                signal_data=signal_data,
                candles_data=market_data.get('candles_data'),
                is_manual_check=False,
                symbol=symbol
            )
            
            if gpt_advice:
                factors_info = f" (—Ñ–∞–∫—Ç–æ—Ä—ã: {gpt_advice.key_factors})" if hasattr(gpt_advice, 'key_factors') and gpt_advice.key_factors else ""
                logger.info(f"ü§ñ GPT –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {symbol}: {gpt_advice.recommendation} ({gpt_advice.confidence}%){factors_info}")
                return gpt_advice
            else:
                logger.warning(f"ü§ñ GPT –Ω–µ –¥–∞–ª –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è {symbol}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ GPT —Ä–µ—à–µ–Ω–∏—è –¥–ª—è {symbol}: {e}")
            return None
    
    async def get_detailed_market_status(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è)"""
        try:
            logger.info(f"üîÑ –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è {symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞
            market_status = self.get_market_status_text()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return f"‚ùå <b>–ê–∫—Ü–∏—è {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>"
            
            candles = await asyncio.wait_for(
                self.tinkoff_provider.get_candles_for_ticker(ticker_info['figi'], hours=70),
                timeout=30
            )
            
            if len(candles) < 20:
                return f"""‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>

{market_status['emoji']} <b>–°—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞:</b> {market_status['status']}
üìä {market_status['description']}
üíæ {market_status['data_freshness']}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}</b>"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self._prepare_comprehensive_data(df, symbol)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
            basic_filter_passed = await self._check_basic_filter(df, symbol)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_price = market_data['current_price']
            current_ema20 = market_data['ema20']
            price_above_ema = current_price > current_ema20
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            last_candle_time = df.iloc[-1]['timestamp']
            moscow_time = last_candle_time.astimezone(self.moscow_tz)
            data_age = (datetime.now(self.moscow_tz) - moscow_time).total_seconds() / 3600
            
            data_freshness = ""
            if data_age < 1:
                data_freshness = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ"
            elif data_age < 3:
                data_freshness = f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ {data_age:.1f}—á –Ω–∞–∑–∞–¥"
            else:
                data_freshness = f"üî¥ –î–∞–Ω–Ω—ã–µ {data_age:.1f}—á –Ω–∞–∑–∞–¥"
            
            message = f"""üìä <b>–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó {symbol}</b>

{market_status['emoji']} <b>–°—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞:</b> {market_status['status']}
üìä {market_status['description']}
üïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:</b> {moscow_time.strftime('%d.%m %H:%M')} –ú–°–ö
üíæ {data_freshness}

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {current_ema20:.2f} ‚ÇΩ {'‚úÖ' if price_above_ema else '‚ùå'}

üîç <b>–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:</b> {'‚úÖ –ü—Ä–æ–π–¥–µ–Ω' if basic_filter_passed else '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω'}"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π GPT –∞–Ω–∞–ª–∏–∑
            if self.gpt_analyzer:
                try:
                    logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π GPT –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}...")
                    
                    gpt_advice = await self._get_comprehensive_decision(market_data, symbol)
                    if gpt_advice:
                        message += f"\n{self.gpt_analyzer.format_advice_for_telegram(gpt_advice, symbol)}"
                    else:
                        message += "\n\nü§ñ <i>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
                    message += "\n\nü§ñ <i>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
            else:
                if basic_filter_passed:
                    message += "\n\nüìä <b>–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω</b>\nü§ñ <i>GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                else:
                    message += "\n\n‚è≥ <b>–û–∂–∏–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π...</b>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç
            if not self.is_market_open():
                message += f"\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> {market_status['data_freshness']}"
            
            return message
                
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return f"‚ùå <b>–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}</b>"
    
    async def check_peak_trend(self, symbol: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π GPT –∞–Ω–∞–ª–∏–∑ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return None
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=70
            )
            
            if len(candles) < 20:
                return None
            
            df = self.tinkoff_provider.candles_to_dataframe(candles)
            if df.empty:
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            market_data = self._prepare_comprehensive_data(df, symbol)
            current_price = market_data['current_price']
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞
            if self.gpt_analyzer:
                try:
                    signal_data = {
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        'price': current_price,
                        'ema20': market_data['ema20'],
                        'price_above_ema': market_data['price_above_ema'],
                        'conditions_met': True,
                        'check_peak': True,  # –§–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞
                        
                        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        'volume_analysis': market_data.get('volume_analysis', {}),
                        'price_levels': market_data.get('price_levels', {}),
                        'trading_session': market_data.get('trading_session', 'unknown'),
                        'market_status': market_data.get('market_status', {})
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    if 'price_movement' in market_data:
                        signal_data.update(market_data['price_movement'])
                    
                    gpt_advice = await self.gpt_analyzer.analyze_signal(
                        signal_data=signal_data,
                        candles_data=market_data.get('candles_data'),
                        is_manual_check=False,
                        symbol=symbol
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–∏–∫–∞
                    is_peak = False
                    
                    # 1. ADX > 45 (–µ—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω)
                    if (gpt_advice and gpt_advice.calculated_adx is not None and 
                        gpt_advice.calculated_adx > 45):
                        is_peak = True
                        logger.info(f"üî• –ü–∏–∫ –ø–æ ADX {symbol}: {gpt_advice.calculated_adx:.1f} > 45")
                    
                    # 2. GPT —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç AVOID –∏–∑-–∑–∞ –ø–∏–∫–∞
                    elif (gpt_advice and gpt_advice.recommendation == 'AVOID' and 
                          gpt_advice.reasoning and 
                          ('–ø–∏–∫' in gpt_advice.reasoning.lower() or 'peak' in gpt_advice.reasoning.lower())):
                        is_peak = True
                        logger.info(f"üî• –ü–∏–∫ –ø–æ GPT –∞–Ω–∞–ª–∏–∑—É {symbol}")
                    
                    # 3. –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å + –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    elif (gpt_advice and gpt_advice.confidence < 40 and 
                          'price_movement' in market_data and 
                          market_data['price_movement'].get('volatility_1d', 0) > 4):
                        is_peak = True
                        logger.info(f"üî• –ü–∏–∫ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ {symbol}")
                    
                    if is_peak:
                        return current_price
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –ø–∏–∫–∞ {symbol}: {e}")
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ {symbol}: {e}")
            return None
    
    async def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            ticker_info = await self.db.get_ticker_info(symbol)
            if not ticker_info:
                return 0
                
            candles = await self.tinkoff_provider.get_candles_for_ticker(
                ticker_info['figi'], hours=2
            )
            if candles:
                df = self.tinkoff_provider.candles_to_dataframe(candles)
                return df.iloc[-1]['close'] if not df.empty else 0
            return 0
        except:
            return 0
