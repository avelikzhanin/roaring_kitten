import asyncio
import logging
from typing import Optional
from telegram.error import TelegramError, TimedOut, NetworkError

logger = logging.getLogger(__name__)

class MessageSender:
    """–û—Ç–ø—Ä–∞–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–ï–ó ADX"""
    
    def __init__(self, database, gpt_analyzer=None, tinkoff_provider=None):
        self.db = database
        self.gpt_analyzer = gpt_analyzer
        self.tinkoff_provider = tinkoff_provider
        self.app = None
    
    def set_app(self, app):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.app = app
    
    async def send_buy_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–ï–ó ADX"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = await self.db.get_subscribers_for_ticker(signal.symbol)
        if not subscribers:
            logger.info(f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {signal.symbol}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_buy_signal(signal)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–û–õ–ù–´–ô GPT –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(signal, 'gpt_full_advice') and signal.gpt_full_advice and self.gpt_analyzer:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT —Å TP/SL, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º, —Ä–∏—Å–∫–∞–º–∏
            message += f"\n{self.gpt_analyzer.format_advice_for_telegram(signal.gpt_full_advice, signal.symbol)}"
            
        elif hasattr(signal, 'gpt_recommendation') and signal.gpt_recommendation:
            # Fallback: –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è GPT  
            message += f"""

ü§ñ <b>–ê–ù–ê–õ–ò–ó GPT ({signal.symbol}):</b>
üìä <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {signal.gpt_recommendation}
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.gpt_confidence}%
‚ö° <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (EMA20 + GPT)
‚ö†Ô∏è <i>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"""
        else:
            # –†–µ–∂–∏–º –±–µ–∑ GPT
            message += f"""

üìä <b>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó ({signal.symbol}):</b>
‚úÖ –¶–µ–Ω–∞ –≤—ã—à–µ EMA20 - –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
‚úÖ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω
‚ö° <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î –ë–ï–ó ADX
        gpt_data = None
        if hasattr(signal, 'gpt_recommendation') and signal.gpt_recommendation:
            gpt_data = {
                'recommendation': signal.gpt_recommendation,
                'confidence': signal.gpt_confidence,
                'take_profit': None,  # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
                'stop_loss': None     # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î –ë–ï–ó ADX –ø–æ–ª–µ–π
        signal_id = await self.db.save_signal(
            symbol=signal.symbol,
            signal_type='BUY',
            price=signal.price,
            ema20=signal.ema20,
            gpt_data=gpt_data
        )
        
        if not signal_id:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª {signal.symbol}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        success_count = await self._send_to_subscribers(
            subscribers, message, signal.symbol, '–ø–æ–∫—É–ø–∫–∏'
        )
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        for chat_id in subscribers[:success_count]:
            await self.db.open_position(chat_id, signal.symbol, signal_id, signal.price)
        
        logger.info(f"üìà –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ {signal.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {success_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
    
    async def send_peak_signal(self, symbol: str, current_price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –ë–ï–ó ADX"""
        if not self.app:
            return
        
        subscribers = await self.db.get_subscribers_for_ticker(symbol)
        if not subscribers:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª–∏
        profit_info = await self._get_profit_summary(symbol, current_price)
        
        message = f"""üî• <b>–ü–ò–ö –¢–†–ï–ù–î–ê - –ü–†–û–î–ê–Å–ú {symbol}!</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

üìä <b>–ü—Ä–∏—á–∏–Ω–∞:</b> GPT –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞
‚ö° –í—Ä–µ–º—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å{profit_info}

üîç <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...</b>"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –ë–ï–ó ADX –ø–æ–ª–µ–π
        await self.db.save_signal(
            symbol=symbol, 
            signal_type='PEAK', 
            price=current_price,
            ema20=current_price * 0.98  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        success_count = await self._send_to_subscribers(
            subscribers, message, symbol, '–ø–∏–∫–∞'
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        await self.db.close_positions(symbol, 'PEAK')
        
        logger.info(f"üî• –°–∏–≥–Ω–∞–ª –ø–∏–∫–∞ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {success_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
    
    async def send_cancel_signal(self, symbol: str, current_price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã –ë–ï–ó ADX"""
        if not self.app:
            return
        
        subscribers = await self.db.get_subscribers_for_ticker(symbol)
        if not subscribers:
            return
        
        profit_info = await self._get_profit_summary(symbol, current_price)
        
        message = f"""‚ùå <b>–°–ò–ì–ù–ê–õ –û–¢–ú–ï–ù–ï–ù {symbol}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è:
‚Ä¢ –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ EMA20
‚Ä¢ GPT –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å{profit_info}

üîç <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...</b>"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –ë–ï–ó ADX –ø–æ–ª–µ–π
        await self.db.save_signal(
            symbol=symbol, 
            signal_type='SELL', 
            price=current_price,
            ema20=current_price * 0.98  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        success_count = await self._send_to_subscribers(
            subscribers, message, symbol, '–æ—Ç–º–µ–Ω—ã'
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        await self.db.close_positions(symbol, 'SELL')
        
        logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {success_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
    
    def _format_buy_signal(self, signal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–ï–ó ADX"""
        return f"""üîî <b>–°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò {signal.symbol}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {signal.price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {signal.ema20:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ –≤—ã—à–µ)

üìä <b>–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:</b>
‚úÖ –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (—Ü–µ–Ω–∞ > EMA20)
‚úÖ –¢–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ
‚úÖ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω"""
    
    async def _get_gpt_analysis(self, signal) -> Optional[dict]:
        """–£–°–¢–ê–†–ï–í–®–ò–ô: GPT –∞–Ω–∞–ª–∏–∑ —Ç–µ–ø–µ—Ä—å –≤ signal –æ–±—ä–µ–∫—Ç–µ"""
        logger.warning("‚ö†Ô∏è _get_gpt_analysis —É—Å—Ç–∞—Ä–µ–ª - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ signal –æ–±—ä–µ–∫—Ç–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ signal –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(signal, 'gpt_recommendation') and signal.gpt_recommendation:
            return {
                'formatted_message': f"""
ü§ñ <b>GPT –ê–ù–ê–õ–ò–ó:</b> {signal.gpt_recommendation} ({signal.gpt_confidence}%)""",
                'db_data': {
                    'recommendation': signal.gpt_recommendation,
                    'confidence': signal.gpt_confidence
                }
            }
        
        return None
    
    async def _get_profit_summary(self, symbol: str, current_price: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏"""
        try:
            positions = await self.db.get_positions_for_profit_calculation(symbol)
            if not positions:
                return ""
            
            total_positions = sum(pos['position_count'] for pos in positions)
            profits = []
            
            for pos in positions:
                buy_price = float(pos['buy_price'])
                count = pos['position_count']
                profit_pct = self._calculate_profit_percentage(buy_price, current_price)
                profits.append((buy_price, profit_pct, count))
            
            # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            weighted_profit = sum(profit * count for _, profit, count in profits) / total_positions
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if weighted_profit > 0:
                profit_emoji = "üü¢"
                profit_text = f"+{weighted_profit:.2f}%"
            elif weighted_profit < 0:
                profit_emoji = "üî¥"
                profit_text = f"{weighted_profit:.2f}%"
            else:
                profit_emoji = "‚ö™"
                profit_text = "0.00%"
            
            if len(profits) == 1:
                buy_price = profits[0][0]
                return f"\n\nüí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {profit_emoji} {profit_text}\nüìà <b>–í—Ö–æ–¥:</b> {buy_price:.2f} ‚ÇΩ ‚Üí <b>–í—ã—Ö–æ–¥:</b> {current_price:.2f} ‚ÇΩ"
            else:
                return f"\n\nüí∞ <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {profit_emoji} {profit_text}\nüë• <b>–ü–æ–∑–∏—Ü–∏–π:</b> {total_positions}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ {symbol}: {e}")
            return ""
    
    def _calculate_profit_percentage(self, buy_price: float, sell_price: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if buy_price <= 0:
            return 0
        return ((sell_price - buy_price) / buy_price) * 100
    
    async def _send_to_subscribers(self, subscribers: list, message: str, 
                                  symbol: str, signal_type: str) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        failed_chats = []
        successful_sends = 0
        
        for chat_id in subscribers:
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except TelegramError as e:
                if "Can't parse entities" in str(e):
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        simple_message = f"–°–∏–≥–Ω–∞–ª {signal_type} {symbol}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                        await self.app.bot.send_message(chat_id=chat_id, text=simple_message)
                        successful_sends += 1
                    except:
                        failed_chats.append(chat_id)
                else:
                    failed_chats.append(chat_id)
            except (TimedOut, NetworkError):
                failed_chats.append(chat_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {symbol} –≤ {chat_id}: {e}")
                failed_chats.append(chat_id)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in failed_chats:
            await self.db.deactivate_user(chat_id)
        
        return successful_sends
