import asyncio
import logging
from typing import Optional
from telegram.error import TelegramError, TimedOut, NetworkError

logger = logging.getLogger(__name__)

class MessageSender:
    """–û—Ç–ø—Ä–∞–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    
    def __init__(self, database, gpt_analyzer=None, tinkoff_provider=None):
        self.db = database
        self.gpt_analyzer = gpt_analyzer
        self.tinkoff_provider = tinkoff_provider
        self.app = None
    
    def set_app(self, app):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.app = app
    
    async def send_buy_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏"""
        if not self.app:
            logger.error("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = await self.db.get_subscribers_for_ticker(signal.symbol)
        if not subscribers:
            logger.info(f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {signal.symbol}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_buy_signal(signal)
        
        # –ü–æ–ª—É—á–∞–µ–º GPT –∞–Ω–∞–ª–∏–∑
        gpt_data = await self._get_gpt_analysis(signal)
        if gpt_data:
            message += f"\n{gpt_data['formatted_message']}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î
        signal_id = await self.db.save_signal(
            symbol=signal.symbol,
            signal_type='BUY',
            price=signal.price,
            ema20=signal.ema20,
            adx=signal.adx,
            plus_di=signal.plus_di,
            minus_di=signal.minus_di,
            gpt_data=gpt_data['db_data'] if gpt_data else None
        )
        
        if not signal_id:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª {signal.symbol}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        success_count = await self._send_to_subscribers(
            subscribers, message, signal.symbol, '–ø–æ–∫—É–ø–∫–∏'
        )
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        for chat_id in subscribers[:success_count]:
            await self.db.open_position(chat_id, signal.symbol, signal_id, signal.price)
        
        logger.info(f"üìà –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ {signal.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {success_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
    
    async def send_peak_signal(self, symbol: str, current_price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞"""
        if not self.app:
            return
        
        subscribers = await self.db.get_subscribers_for_ticker(symbol)
        if not subscribers:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª–∏
        profit_info = await self._get_profit_summary(symbol, current_price)
        
        message = f"""üî• <b>–ü–ò–ö –¢–†–ï–ù–î–ê - –ü–†–û–î–ê–Å–ú {symbol}!</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

üìä ADX > 45 - –ø–∏–∫ —Ç—Ä–µ–Ω–¥–∞!
–í—Ä–µ–º—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å.{profit_info}

üîç <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...</b>"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
        await self.db.save_signal(
            symbol=symbol, signal_type='PEAK', price=current_price,
            ema20=current_price * 0.98, adx=47, plus_di=35, minus_di=20
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        success_count = await self._send_to_subscribers(
            subscribers, message, symbol, '–ø–∏–∫–∞'
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        await self.db.close_positions(symbol, 'PEAK')
        
        logger.info(f"üî• –°–∏–≥–Ω–∞–ª –ø–∏–∫–∞ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {success_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
    
    async def send_cancel_signal(self, symbol: str, current_price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω—ã"""
        if not self.app:
            return
        
        subscribers = await self.db.get_subscribers_for_ticker(symbol)
        if not subscribers:
            return
        
        profit_info = await self._get_profit_summary(symbol, current_price)
        
        message = f"""‚ùå <b>–°–ò–ì–ù–ê–õ –û–¢–ú–ï–ù–ï–ù {symbol}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} ‚ÇΩ

‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –£—Å–ª–æ–≤–∏—è –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è{profit_info}

üîç <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...</b>"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
        await self.db.save_signal(
            symbol=symbol, signal_type='SELL', price=current_price,
            ema20=current_price * 0.98, adx=20, plus_di=25, minus_di=30
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        success_count = await self._send_to_subscribers(
            subscribers, message, symbol, '–æ—Ç–º–µ–Ω—ã'
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        await self.db.close_positions(symbol, 'SELL')
        
        logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {success_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
    
    def _format_buy_signal(self, signal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏"""
        return f"""üîî <b>–°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò {signal.symbol}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {signal.price:.2f} ‚ÇΩ
üìà <b>EMA20:</b> {signal.ema20:.2f} ‚ÇΩ (—Ü–µ–Ω–∞ –≤—ã—à–µ)

üìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {signal.adx:.1f} (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ >25)
‚Ä¢ <b>+DI:</b> {signal.plus_di:.1f}
‚Ä¢ <b>-DI:</b> {signal.minus_di:.1f}
‚Ä¢ <b>–†–∞–∑–Ω–∏—Ü–∞ DI:</b> {signal.plus_di - signal.minus_di:.1f}"""
    
    async def _get_gpt_analysis(self, signal) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        if not self.gpt_analyzer:
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GPT
            ticker_info = await self.db.get_ticker_info(signal.symbol)
            candles_data = None
            
            if ticker_info and self.tinkoff_provider:
                try:
                    candles = await self.tinkoff_provider.get_candles_for_ticker(
                        ticker_info['figi'], hours=100
                    )
                    df = self.tinkoff_provider.candles_to_dataframe(candles)
                    
                    if not df.empty:
                        candles_data = []
                        for _, row in df.iterrows():
                            candles_data.append({
                                'timestamp': row['timestamp'],
                                'open': float(row['open']),
                                'high': float(row['high']),
                                'low': float(row['low']),
                                'close': float(row['close']),
                                'volume': int(row['volume'])
                            })
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è GPT {signal.symbol}: {e}")
            
            signal_data = {
                'price': signal.price,
                'ema20': signal.ema20,
                'adx': signal.adx,
                'plus_di': signal.plus_di,
                'minus_di': signal.minus_di
            }
            
            gpt_advice = await self.gpt_analyzer.analyze_signal(
                signal_data, candles_data, is_manual_check=False, symbol=signal.symbol
            )
            
            if gpt_advice:
                formatted_message = self.gpt_analyzer.format_advice_for_telegram(gpt_advice, signal.symbol)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                if gpt_advice.recommendation == 'AVOID':
                    formatted_message += "\n\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> GPT –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–∫—É–ø–∫—É!"
                elif gpt_advice.recommendation == 'WEAK_BUY':
                    formatted_message += "\n\n‚ö° <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ:</b> GPT —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫"
                
                return {
                    'formatted_message': formatted_message,
                    'db_data': {
                        'recommendation': gpt_advice.recommendation,
                        'confidence': gpt_advice.confidence,
                        'take_profit': gpt_advice.take_profit,
                        'stop_loss': gpt_advice.stop_loss
                    }
                }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {signal.symbol}: {e}")
        
        return None
    
    async def _get_profit_summary(self, symbol: str, current_price: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏"""
        try:
            positions = await self.db.get_positions_for_profit_calculation(symbol)
            if not positions:
                return ""
            
            total_positions = sum(pos['position_count'] for pos in positions)
            profits = []
            
            for pos in positions:
                buy_price = float(pos['buy_price'])
                count = pos['position_count']
                profit_pct = self._calculate_profit_percentage(buy_price, current_price)
                profits.append((buy_price, profit_pct, count))
            
            # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            weighted_profit = sum(profit * count for _, profit, count in profits) / total_positions
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if weighted_profit > 0:
                profit_emoji = "üü¢"
                profit_text = f"+{weighted_profit:.2f}%"
            elif weighted_profit < 0:
                profit_emoji = "üî¥"
                profit_text = f"{weighted_profit:.2f}%"
            else:
                profit_emoji = "‚ö™"
                profit_text = "0.00%"
            
            if len(profits) == 1:
                buy_price = profits[0][0]
                return f"\n\nüí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {profit_emoji} {profit_text}\nüìà <b>–í—Ö–æ–¥:</b> {buy_price:.2f} ‚ÇΩ ‚Üí <b>–í—ã—Ö–æ–¥:</b> {current_price:.2f} ‚ÇΩ"
            else:
                return f"\n\nüí∞ <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {profit_emoji} {profit_text}\nüë• <b>–ü–æ–∑–∏—Ü–∏–π:</b> {total_positions}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ {symbol}: {e}")
            return ""
    
    def _calculate_profit_percentage(self, buy_price: float, sell_price: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if buy_price <= 0:
            return 0
        return ((sell_price - buy_price) / buy_price) * 100
    
    async def _send_to_subscribers(self, subscribers: list, message: str, 
                                  symbol: str, signal_type: str) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        failed_chats = []
        successful_sends = 0
        
        for chat_id in subscribers:
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id, 
                    text=message, 
                    parse_mode='HTML'
                )
                successful_sends += 1
                await asyncio.sleep(0.1)
                
            except TelegramError as e:
                if "Can't parse entities" in str(e):
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        simple_message = f"–°–∏–≥–Ω–∞–ª {signal_type} {symbol}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                        await self.app.bot.send_message(chat_id=chat_id, text=simple_message)
                        successful_sends += 1
                    except:
                        failed_chats.append(chat_id)
                else:
                    failed_chats.append(chat_id)
            except (TimedOut, NetworkError):
                failed_chats.append(chat_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {symbol} –≤ {chat_id}: {e}")
                failed_chats.append(chat_id)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in failed_chats:
            await self.db.deactivate_user(chat_id)
        
        return successful_sends
