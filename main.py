import os
import asyncio
from datetime import datetime, timedelta
import logging

import pandas as pd
import pandas_ta as ta
import httpx
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

if not TELEGRAM_TOKEN:
    raise ValueError("Missing TELEGRAM_TOKEN environment variable")


def calculate_adx_tradingview_exact(df, period=14):
    """
    –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è Pine Script –∫–æ–¥–∞ TradingView:
    ADX = sma(DX, len) - –ø—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è!
    """
    high = df['high'].values
    low = df['low'].values
    close = df['close'].values
    
    # –†–∞—Å—á–µ—Ç True Range
    tr = []
    dm_plus = []
    dm_minus = []
    
    for i in range(1, len(high)):
        # True Range (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Pine Script)
        tr1 = high[i] - low[i]
        tr2 = abs(high[i] - close[i-1])
        tr3 = abs(low[i] - close[i-1])
        tr.append(max(tr1, tr2, tr3))
        
        # Directional Movement (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Pine Script)
        up_move = high[i] - high[i-1]
        down_move = low[i-1] - low[i]
        
        # DirectionalMovementPlus = high-nz(high[1]) > nz(low[1])-low ? max(high-nz(high[1]), 0): 0
        dm_p = max(up_move, 0) if up_move > down_move else 0
        # DirectionalMovementMinus = nz(low[1])-low > high-nz(high[1]) ? max(nz(low[1])-low, 0): 0  
        dm_m = max(down_move, 0) if down_move > up_move else 0
        
        dm_plus.append(dm_p)
        dm_minus.append(dm_m)
    
    # Wilder's Smoothing (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Pine Script)
    # SmoothedTrueRange := nz(SmoothedTrueRange[1]) - (nz(SmoothedTrueRange[1])/len) + TrueRange
    def wilders_smoothing_exact(data, period):
        if not data:
            return []
        
        smoothed = []
        # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–∞—è —Å—Ä–µ–¥–Ω—è—è
        first_smooth = sum(data[:period]) / period if len(data) >= period else sum(data) / len(data)
        smoothed.append(first_smooth)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: new = previous - (previous/period) + current
        start_idx = period if len(data) >= period else len(data)
        for i in range(start_idx, len(data)):
            prev_smooth = smoothed[-1]
            new_smooth = prev_smooth - (prev_smooth / period) + data[i]
            smoothed.append(new_smooth)
        
        return smoothed
    
    # –°–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    str_values = wilders_smoothing_exact(tr, period)
    sdm_plus = wilders_smoothing_exact(dm_plus, period)
    sdm_minus = wilders_smoothing_exact(dm_minus, period)
    
    if not str_values or not sdm_plus or not sdm_minus:
        return {'adx': 0, 'di_plus': 0, 'di_minus': 0}
    
    # DI+ –∏ DI- (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Pine Script)
    # DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
    # DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100
    di_plus = [(sdm_plus[i] / str_values[i]) * 100 if str_values[i] > 0 else 0 
               for i in range(min(len(str_values), len(sdm_plus)))]
    di_minus = [(sdm_minus[i] / str_values[i]) * 100 if str_values[i] > 0 else 0
                for i in range(min(len(str_values), len(sdm_minus)))]
    
    # DX (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Pine Script)  
    # DX = abs(DIPlus-DIMinus) / (DIPlus+DIMinus)*100
    dx = []
    for i in range(min(len(di_plus), len(di_minus))):
        if (di_plus[i] + di_minus[i]) > 0:
            dx_val = abs(di_plus[i] - di_minus[i]) / (di_plus[i] + di_minus[i]) * 100
            dx.append(dx_val)
        else:
            dx.append(0)
    
    # ADX - –ü–†–û–°–¢–ê–Ø –°–ö–û–õ–¨–ó–Ø–©–ê–Ø –°–†–ï–î–ù–Ø–Ø (–∫–∞–∫ –≤ Pine Script!)
    # ADX = sma(DX, len)
    if len(dx) >= period:
        adx = sum(dx[-period:]) / period  # –ü—Ä–æ—Å—Ç–∞—è SMA –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –ø–µ—Ä–∏–æ–¥–æ–≤
    else:
        adx = sum(dx) / len(dx) if dx else 0
    
    return {
        'adx': adx,
        'di_plus': di_plus[-1] if di_plus else 0,
        'di_minus': di_minus[-1] if di_minus else 0
    }


async def get_current_sber_price():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã SBER"""
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≤ —Ä–µ–∂–∏–º–µ TQBR
        url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/SBER.json"
        params = {
            'iss.meta': 'off',
            'iss.only': 'marketdata',
            'marketdata.columns': 'LAST,BID,OFFER,TIME'  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞, bid, offer, –≤—Ä–µ–º—è
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if 'marketdata' in data and 'data' in data['marketdata'] and data['marketdata']['data']:
            columns = data['marketdata']['columns']  # ['LAST', 'BID', 'OFFER', 'TIME']
            market_data = data['marketdata']['data'][0]  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ LAST
            last_price_index = columns.index('LAST') if 'LAST' in columns else None
            time_index = columns.index('TIME') if 'TIME' in columns else None
            
            if last_price_index is not None and market_data[last_price_index]:
                current_price = float(market_data[last_price_index])
                time_str = market_data[time_index] if time_index is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ SBER: {current_price:.2f} ‚ÇΩ (–≤—Ä–µ–º—è: {time_str})")
                return current_price
        
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ TQBR marketdata endpoint")
        return None
        
    except Exception as e:
        logger.error(f"Error fetching current SBER price: {e}")
        return None


async def get_sber_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö SBER —á–µ—Ä–µ–∑ MOEX API –∏ —Ä–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        current_price = await get_current_sber_price()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        to_date = datetime.now()
        from_date = to_date - timedelta(days=5)
        
        # MOEX API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π SBER (–∫–∞–∫ TradingView)
        url = "https://iss.moex.com/iss/engines/stock/markets/shares/securities/SBER/candles.json"
        params = {
            'from': from_date.strftime('%Y-%m-%d'),
            'till': to_date.strftime('%Y-%m-%d'),
            'interval': '60'  # 60 –º–∏–Ω—É—Ç = —á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ (–∫–∞–∫ TradingView)
        }
        
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ MOEX API —Å {from_date.strftime('%Y-%m-%d')} –ø–æ {to_date.strftime('%Y-%m-%d')} (—á–∞—Å–æ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º, 5 –¥–Ω–µ–π)")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ MOEX API —Å httpx
        async with httpx.AsyncClient() as client:
            response = await client.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        if 'candles' not in data or not data['candles']['data']:
            logger.error("No candle data received from MOEX API")
            return None
        
        columns = data['candles']['columns']
        candles_raw = data['candles']['data']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è pandas
        candles_data = []
        for candle in candles_raw:
            # columns: ["open", "close", "high", "low", "value", "volume", "begin", "end"]
            candles_data.append({
                'open': float(candle[0]),
                'close': float(candle[1]),
                'high': float(candle[2]),
                'low': float(candle[3]),
                'volume': int(candle[5]),
                'time': candle[6]  # –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–≤–µ—á–∏
            })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å–≤–µ—á–µ–π
        if len(candles_data) > 50:
            candles_data = candles_data[-50:]
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(candles_data)} —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π —Å MOEX –∑–∞ 5 –¥–Ω–µ–π")
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π
        if candles_data:
            logger.info("üîç –ü–û–°–õ–ï–î–ù–ò–ï 3 –°–í–ï–ß–ò (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤):")
            for i, candle in enumerate(candles_data[-3:]):
                logger.info(f"   {i+1}. {candle['time']} | O:{candle['open']:.2f} H:{candle['high']:.2f} L:{candle['low']:.2f} C:{candle['close']:.2f}")
            
            first_time = candles_data[0]['time']
            last_time = candles_data[-1]['time']
            logger.info(f"–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö): {first_time} ‚Üí {last_time}")
            logger.info(f"–¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏: {candles_data[-1]['close']:.2f} ‚ÇΩ")
            if current_price:
                logger.info(f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å): {current_price:.2f} ‚ÇΩ")
        
        if len(candles_data) < 30:
            logger.error(f"Insufficient data: {len(candles_data)} candles (need at least 30)")
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df = pd.DataFrame(candles_data)
        
        # –†–∞—Å—á–µ—Ç EMA20
        df['ema20'] = ta.ema(df['close'], length=20)
        
        # –î–í–ê –í–ê–†–ò–ê–ù–¢–ê —Ä–∞—Å—á–µ—Ç–∞ ADX
        # 1. pandas-ta (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
        adx_data_standard = ta.adx(df['high'], df['low'], df['close'], length=14, mamode='rma')
        
        # 2. Pine Script (ADX = sma(DX, len))
        adx_pinescript = calculate_adx_tradingview_exact(df, period=14)
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        last_row = df.iloc[-1]
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ª–æ–≥–∞—Ö
        logger.info("üìä –°–†–ê–í–ù–ï–ù–ò–ï –î–í–£–• –§–û–†–ú–£–õ ADX:")
        logger.info(f"   üîß pandas-ta: ADX={adx_data_standard['ADX_14'].iloc[-1]:.2f}, DI+={adx_data_standard['DMP_14'].iloc[-1]:.2f}, DI-={adx_data_standard['DMN_14'].iloc[-1]:.2f}")
        logger.info(f"   üìà Pine Script: ADX={adx_pinescript['adx']:.2f}, DI+={adx_pinescript['di_plus']:.2f}, DI-={adx_pinescript['di_minus']:.2f}")
        
        return {
            'current_price': current_price if current_price else last_row['close'],  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
            'ema20': last_row['ema20'],
            # pandas-ta
            'adx_standard': adx_data_standard['ADX_14'].iloc[-1],
            'di_plus_standard': adx_data_standard['DMP_14'].iloc[-1],
            'di_minus_standard': adx_data_standard['DMN_14'].iloc[-1],
            # Pine Script
            'adx_pinescript': adx_pinescript['adx'],
            'di_plus_pinescript': adx_pinescript['di_plus'],
            'di_minus_pinescript': adx_pinescript['di_minus']
        }
        
    except httpx.HTTPError as e:
        logger.error(f"MOEX API request error: {e}")
        return None
    except Exception as e:
        logger.error(f"Error fetching SBER data: {e}")
        return None


def format_sber_message(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ SBER - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –î–í–ê –≤–∞—Ä–∏–∞–Ω—Ç–∞ ADX"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    adx_standard_strength = "–°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥" if data['adx_standard'] > 25 else "–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥"
    adx_pine_strength = "–°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥" if data['adx_pinescript'] > 25 else "–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥"
    
    message = f"""üè¶ <b>SBER - –°–±–µ—Ä–±–∞–Ω–∫</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {data['current_price']:.2f} ‚ÇΩ
üìä <b>EMA20:</b> {data['ema20']:.2f} ‚ÇΩ

üîß <b>ADX ‚Äî pandas-ta (—Å—Ç–∞–Ω–¥–∞—Ä—Ç):</b>
‚Ä¢ <b>ADX:</b> {data['adx_standard']:.2f} ({adx_standard_strength})
‚Ä¢ <b>DI+:</b> {data['di_plus_standard']:.2f} | <b>DI-:</b> {data['di_minus_standard']:.2f}

üìà <b>ADX ‚Äî Pine Script (sma):</b>
‚Ä¢ <b>ADX:</b> {data['adx_pinescript']:.2f} ({adx_pine_strength})
‚Ä¢ <b>DI+:</b> {data['di_plus_pinescript']:.2f} | <b>DI-:</b> {data['di_minus_pinescript']:.2f}"""
    
    return message


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ü–∏–π SBER.

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/sber - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –°–±–µ—Ä–±–∞–Ω–∫—É

<i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ MOEX API</i>"""
    
    await update.message.reply_text(welcome_message, parse_mode='HTML')


async def sber_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sber"""
    loading_message = await update.message.reply_text('‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å MOEX...')
    
    try:
        sber_data = await get_sber_data()
        
        if not sber_data:
            await loading_message.edit_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å MOEX API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
        if (pd.isna(sber_data['ema20']) or 
            pd.isna(sber_data['adx_standard']) or pd.isna(sber_data['adx_pinescript']) or
            pd.isna(sber_data['di_plus_standard']) or pd.isna(sber_data['di_plus_pinescript']) or
            pd.isna(sber_data['di_minus_standard']) or pd.isna(sber_data['di_minus_pinescript'])):
            await loading_message.edit_text('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return
        
        message = format_sber_message(sber_data)
        await loading_message.edit_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in sber_command: {e}")
        await loading_message.edit_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("sber", sber_command))
    
    application.add_error_handler(error_handler)
    
    logger.info("ü§ñ SBER Telegram Bot started with MOEX API...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
