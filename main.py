import os
import asyncio
from datetime import datetime, timedelta, timezone
import logging

import pandas as pd
import pandas_ta as ta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from tinkoff.invest import Client, CandleInterval
from tinkoff.invest.utils import quotation_to_decimal, now

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TINKOFF_TOKEN = os.getenv('TINKOFF_TOKEN')
SBER_FIGI = 'BBG004730N88'  # FIGI –¥–ª—è –°–±–µ—Ä–±–∞–Ω–∫–∞

if not TELEGRAM_TOKEN or not TINKOFF_TOKEN:
    raise ValueError("Missing required environment variables")


async def get_sber_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö SBER –∏ —Ä–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        with Client(TINKOFF_TOKEN) as client:
            # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π (—Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 50+ —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π)
            to_date = now()
            from_date = to_date - timedelta(days=7)  # –£–º–µ–Ω—å—à–∏–ª —Å 60 –¥–Ω–µ–π –¥–æ 7
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            candles_data = []
            for candle in client.get_all_candles(
                figi=SBER_FIGI,
                from_=from_date,
                interval=CandleInterval.CANDLE_INTERVAL_HOUR
            ):
                candles_data.append({
                    'high': float(quotation_to_decimal(candle.high)),
                    'low': float(quotation_to_decimal(candle.low)),
                    'close': float(quotation_to_decimal(candle.close)),
                    'volume': candle.volume,
                    'time': candle.time
                })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å–≤–µ—á–µ–π
            if len(candles_data) > 50:
                candles_data = candles_data[-50:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(candles_data)} —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
            if not candles_data:
                logger.error("No candles data received")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df = pd.DataFrame(candles_data)
            df = df.sort_values('time').reset_index(drop=True)
            
            if df.empty or len(df) < 30:  # –ú–∏–Ω–∏–º—É–º 30 —Å–≤–µ—á–µ–π (–±—ã–ª–æ 50)
                logger.error(f"Insufficient data for calculations: {len(df)} candles")
                return None
            
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            
            # –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –¢–ï–°–¢–ò–†–£–ï–ú 4 –í–ê–†–ò–ê–ù–¢–ê ADX
            # EMA20
            df['ema20'] = ta.ema(df['close'], length=20)
            
            # ADX —Å 4 —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            adx_period = 14
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: RMA (Relative MA) - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Wilder's ADX
            adx_rma = ta.adx(df['high'], df['low'], df['close'], length=adx_period, mamode='rma')
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: EMA (Exponential MA) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MT4, TradingView
            adx_ema = ta.adx(df['high'], df['low'], df['close'], length=adx_period, mamode='ema')
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: SMA (Simple MA) - –ø—Ä–æ—Å—Ç—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            adx_sma = ta.adx(df['high'], df['low'], df['close'], length=adx_period, mamode='sma')
            
            # –í–∞—Ä–∏–∞–Ω—Ç 4: WMA (Weighted MA) - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            adx_wma = ta.adx(df['high'], df['low'], df['close'], length=adx_period, mamode='wma')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RMA –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å)
            df['adx'] = adx_rma[f'ADX_{adx_period}']
            df['di_plus'] = adx_rma[f'DMP_{adx_period}'] 
            df['di_minus'] = adx_rma[f'DMN_{adx_period}']
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            last_row = df.iloc[-1]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
            logger.info("=== üîç –°–†–ê–í–ù–ï–ù–ò–ï 4-–• –ú–ï–¢–û–î–û–í ADX ===")
            logger.info(f"üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: ADX=25.47, DI+=29.84, DI-=15.18")
            logger.info(f"1Ô∏è‚É£ RMA (Wilder): ADX={adx_rma[f'ADX_{adx_period}'].iloc[-1]:.2f}, DI+={adx_rma[f'DMP_{adx_period}'].iloc[-1]:.2f}, DI-={adx_rma[f'DMN_{adx_period}'].iloc[-1]:.2f}")
            logger.info(f"2Ô∏è‚É£ EMA (MT4/TV): ADX={adx_ema[f'ADX_{adx_period}'].iloc[-1]:.2f}, DI+={adx_ema[f'DMP_{adx_period}'].iloc[-1]:.2f}, DI-={adx_ema[f'DMN_{adx_period}'].iloc[-1]:.2f}")
            logger.info(f"3Ô∏è‚É£ SMA (–ø—Ä–æ—Å—Ç–æ–π): ADX={adx_sma[f'ADX_{adx_period}'].iloc[-1]:.2f}, DI+={adx_sma[f'DMP_{adx_period}'].iloc[-1]:.2f}, DI-={adx_sma[f'DMN_{adx_period}'].iloc[-1]:.2f}")
            logger.info(f"4Ô∏è‚É£ WMA (–≤–∑–≤–µ—à–µ–Ω): ADX={adx_wma[f'ADX_{adx_period}'].iloc[-1]:.2f}, DI+={adx_wma[f'DMP_{adx_period}'].iloc[-1]:.2f}, DI-={adx_wma[f'DMN_{adx_period}'].iloc[-1]:.2f}")
            logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º RMA: ADX={last_row['adx']:.2f}, DI+={last_row['di_plus']:.2f}, DI-={last_row['di_minus']:.2f}")
            logger.info("=== –ö–∞–∫–æ–π –±–ª–∏–∂–µ –∫ –≥—Ä–∞—Ñ–∏–∫—É? ===")
            
            return {
                'current_price': last_row['close'],
                'ema20': last_row['ema20'],
                'adx': last_row['adx'],
                'di_plus': last_row['di_plus'],
                'di_minus': last_row['di_minus']
            }
            
    except Exception as e:
        logger.error(f"Error fetching SBER data: {e}")
        return None


def format_sber_message(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ SBER"""
    adx_strength = "–°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥" if data['adx'] > 25 else "–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥"
    
    message = f"""üè¶ <b>SBER - –°–±–µ—Ä–±–∞–Ω–∫</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {data['current_price']:.2f} ‚ÇΩ
üìä <b>EMA20:</b> {data['ema20']:.2f} ‚ÇΩ

üìà <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {data['adx']:.2f} ({adx_strength})
‚Ä¢ <b>DI+:</b> {data['di_plus']:.2f}
‚Ä¢ <b>DI-:</b> {data['di_minus']:.2f}"""
    
    return message


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ü–∏–π SBER.

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/sber - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –°–±–µ—Ä–±–∞–Ω–∫—É

<i>–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ, EMA20, ADX, DI+ –∏ DI-</i>"""
    
    await update.message.reply_text(welcome_message, parse_mode='HTML')


async def sber_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sber"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await update.message.reply_text('‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ SBER...')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sber_data = await get_sber_data()
        
        if not sber_data:
            await loading_message.edit_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ SBER. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è
        if (pd.isna(sber_data['ema20']) or 
            pd.isna(sber_data['adx']) or 
            pd.isna(sber_data['di_plus']) or 
            pd.isna(sber_data['di_minus'])):
            await loading_message.edit_text('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        message = format_sber_message(sber_data)
        await loading_message.edit_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in sber_command: {e}")
        await loading_message.edit_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("sber", sber_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ SBER Telegram Bot started...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
