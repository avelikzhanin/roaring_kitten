import os
import asyncio
from datetime import datetime, timedelta
import logging

import pandas as pd
import pandas_ta as ta
import httpx
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

if not TELEGRAM_TOKEN:
    raise ValueError("Missing TELEGRAM_TOKEN environment variable")


async def get_sber_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö SBER —á–µ—Ä–µ–∑ MOEX API –∏ —Ä–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        to_date = datetime.now()
        from_date = to_date - timedelta(days=7)
        
        # MOEX API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π SBER
        url = "https://iss.moex.com/iss/engines/stock/markets/shares/securities/SBER/candles.json"
        params = {
            'from': from_date.strftime('%Y-%m-%d'),
            'till': to_date.strftime('%Y-%m-%d'),
            'interval': '60'  # 60 –º–∏–Ω—É—Ç = —á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏
        }
        
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ MOEX API —Å {from_date.strftime('%Y-%m-%d')} –ø–æ {to_date.strftime('%Y-%m-%d')}")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ MOEX API —Å httpx
        async with httpx.AsyncClient() as client:
            response = await client.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        if 'candles' not in data or not data['candles']['data']:
            logger.error("No candle data received from MOEX API")
            return None
        
        columns = data['candles']['columns']
        candles_raw = data['candles']['data']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è pandas
        candles_data = []
        for candle in candles_raw:
            # columns: ["open", "close", "high", "low", "value", "volume", "begin", "end"]
            candles_data.append({
                'open': float(candle[0]),
                'close': float(candle[1]),
                'high': float(candle[2]),
                'low': float(candle[3]),
                'volume': int(candle[5]),
                'time': candle[6]  # –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–≤–µ—á–∏
            })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å–≤–µ—á–µ–π
        if len(candles_data) > 50:
            candles_data = candles_data[-50:]
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(candles_data)} —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π —Å MOEX")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        if candles_data:
            first_time = candles_data[0]['time']
            last_time = candles_data[-1]['time']
            logger.info(f"–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö): {first_time} ‚Üí {last_time}")
            logger.info(f"–¶–µ–Ω–∞: {candles_data[-1]['close']:.2f} ‚ÇΩ")
        
        if len(candles_data) < 30:
            logger.error(f"Insufficient data: {len(candles_data)} candles")
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df = pd.DataFrame(candles_data)
        
        # –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        df['ema20'] = ta.ema(df['close'], length=20)
        adx_data = ta.adx(df['high'], df['low'], df['close'], length=14, mamode='rma')
        df['adx'] = adx_data['ADX_14']
        df['di_plus'] = adx_data['DMP_14'] 
        df['di_minus'] = adx_data['DMN_14']
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        last_row = df.iloc[-1]
        
        logger.info(f"MOEX —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ADX={last_row['adx']:.2f}, DI+={last_row['di_plus']:.2f}, DI-={last_row['di_minus']:.2f}")
        
        return {
            'current_price': last_row['close'],
            'ema20': last_row['ema20'],
            'adx': last_row['adx'],
            'di_plus': last_row['di_plus'],
            'di_minus': last_row['di_minus']
        }
        
    except httpx.HTTPError as e:
        logger.error(f"MOEX API request error: {e}")
        return None
    except Exception as e:
        logger.error(f"Error fetching SBER data: {e}")
        return None


def format_sber_message(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ SBER"""
    adx_strength = "–°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥" if data['adx'] > 25 else "–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥"
    
    message = f"""üè¶ <b>SBER - –°–±–µ—Ä–±–∞–Ω–∫</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {data['current_price']:.2f} ‚ÇΩ
üìä <b>EMA20:</b> {data['ema20']:.2f} ‚ÇΩ

üìà <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ <b>ADX:</b> {data['adx']:.2f} ({adx_strength})
‚Ä¢ <b>DI+:</b> {data['di_plus']:.2f}
‚Ä¢ <b>DI-:</b> {data['di_minus']:.2f}"""
    
    return message


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ü–∏–π SBER.

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/sber - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –°–±–µ—Ä–±–∞–Ω–∫—É

<i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ MOEX API</i>"""
    
    await update.message.reply_text(welcome_message, parse_mode='HTML')


async def sber_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sber"""
    loading_message = await update.message.reply_text('‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å MOEX...')
    
    try:
        sber_data = await get_sber_data()
        
        if not sber_data:
            await loading_message.edit_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å MOEX API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è
        if (pd.isna(sber_data['ema20']) or 
            pd.isna(sber_data['adx']) or 
            pd.isna(sber_data['di_plus']) or 
            pd.isna(sber_data['di_minus'])):
            await loading_message.edit_text('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return
        
        message = format_sber_message(sber_data)
        await loading_message.edit_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in sber_command: {e}")
        await loading_message.edit_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("sber", sber_command))
    
    application.add_error_handler(error_handler)
    
    logger.info("ü§ñ SBER Telegram Bot started with MOEX API...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
