import os
import logging
import time
import pandas as pd
from tinkoff.invest import Client
from tinkoff.invest.schemas import CandleInterval
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TINKOFF_TOKEN = os.getenv("TINKOFF_API_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

FIGI = "BBG004730N88"  # SBER
INTERVAL = CandleInterval.CANDLE_INTERVAL_HOUR
HISTORY_HOURS = 200

# –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø (–¥–æ–ª—è): 0.015 = 1.5%
TRAIL_PCT = float(os.getenv("TRAIL_PCT", "0.015"))

CHAT_ID_FILE = "chat_id.txt"

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
position = None          # None / "long" / "short"
entry_price = None       # —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
best_price = None        # max –¥–ª—è long, min –¥–ª—è short —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ö–æ–¥–∞
trail_stop = None        # –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞

# --- –£—Ç–∏–ª–∏—Ç—ã Telegram ---
def save_chat_id(chat_id):
    with open(CHAT_ID_FILE, "w") as f:
        f.write(str(chat_id))
    logging.info(f"Chat ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {chat_id}")

def load_chat_id():
    if os.path.exists(CHAT_ID_FILE):
        with open(CHAT_ID_FILE, "r") as f:
            return f.read().strip()
    return None

def send_telegram_message(text):
    chat_id = load_chat_id()
    if not chat_id:
        logging.warning("‚ùå Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–∞–ø–∏—à–∏ /start –±–æ—Ç—É")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        requests.post(url, json={"chat_id": chat_id, "text": text}, timeout=10)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    save_chat_id(chat_id)
    await context.bot.send_message(
        chat_id=chat_id,
        text="üò∫ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ë—É–¥—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å/–∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –∏ —Ç—Ä–µ–π–ª–∏–Ω–≥—É."
    )

async def signal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = get_candles()
    sig, curr_price = get_signal(df)

    # —Ç–µ–∫—É—â–∞—è (–ø–ª–∞–≤–∞—é—â–∞—è) PnL
    pnl_text = "-"
    if position == "long" and entry_price:
        pnl = (curr_price - entry_price) / entry_price * 100
        pnl_text = f"{pnl:.2f}%"
    elif position == "short" and entry_price:
        pnl = (entry_price - curr_price) / entry_price * 100
        pnl_text = f"{pnl:.2f}%"

    text = (
        f"–°–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {sig or 'None'}\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {curr_price:.2f}\n"
        f"–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏: {position or '-'}\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}" if entry_price else
        f"–°–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {sig or 'None'}\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {curr_price:.2f}\n–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏: {position or '-'}\n–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: -"
    )
    # –î–æ–±–∞–≤–∏–º —Ç—Ä–µ–π–ª–∏–Ω–≥ –∏ PnL
    if trail_stop:
        text += f"\n–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: {trail_stop:.2f}"
    else:
        text += "\n–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: -"
    text += f"\n–¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: {pnl_text}"

    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

# --- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ---
def ema(series, period):
    return series.ewm(span=period, adjust=False).mean()

def adx(high, low, close, period=14):
    plus_dm = high.diff()
    minus_dm = low.diff()
    plus_dm[plus_dm < 0] = 0
    minus_dm[minus_dm > 0] = 0

    tr1 = high - low
    tr2 = (high - close.shift()).abs()
    tr3 = (low - close.shift()).abs()
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)

    atr = tr.rolling(window=period).mean()

    plus_di = 100 * (plus_dm.rolling(window=period).mean() / atr)
    minus_di = abs(100 * (minus_dm.rolling(window=period).mean() / atr))

    dx = (abs(plus_di - minus_di) / (plus_di + minus_di)) * 100
    adx_val = dx.rolling(window=period).mean()
    return adx_val, plus_di, minus_di

# --- –î–∞–Ω–Ω—ã–µ ---
def get_candles():
    with Client(TINKOFF_TOKEN) as client:
        now = pd.Timestamp.now(tz="Europe/Moscow")
        candles = client.market_data.get_candles(
            figi=FIGI,
            from_=now - pd.Timedelta(hours=HISTORY_HOURS),
            to=now,
            interval=INTERVAL
        ).candles

        df = pd.DataFrame([{
            "time": c.time,
            "open": c.open.units + c.open.nano / 1e9,
            "high": c.high.units + c.high.nano / 1e9,
            "low": c.low.units + c.low.nano / 1e9,
            "close": c.close.units + c.close.nano / 1e9,
            "volume": c.volume
        } for c in candles])
    return df

# --- –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
def get_signal(df):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ('BUY' | 'SELL' | None, current_price)
    BUY  -> —Ö–æ—Ç–∏–º long
    SELL -> —Ö–æ—Ç–∏–º short
    """
    df["ema100"] = ema(df["close"], 100)
    df["ADX"], df["+DI"], df["-DI"] = adx(df["high"], df["low"], df["close"])
    vol_ma = df["volume"].rolling(window=20).mean()
    last = df.iloc[-1]

    curr_price = last["close"]

    if (
        last["ADX"] > 23 and
        last["+DI"] > last["-DI"] and
        last["volume"] > vol_ma.iloc[-1] and
        last["close"] > df["ema100"].iloc[-1]
    ):
        return "BUY", curr_price
    elif last["ADX"] < 20 or last["close"] < df["ema100"].iloc[-1]:
        return "SELL", curr_price
    else:
        return None, curr_price

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–º ---
def init_trailing_for_long(price):
    global best_price, trail_stop
    best_price = price
    trail_stop = best_price * (1 - TRAIL_PCT)

def init_trailing_for_short(price):
    global best_price, trail_stop
    best_price = price
    trail_stop = best_price * (1 + TRAIL_PCT)

def update_trailing(curr_price):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç best_price –∏ trail_stop –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
    –î–ª—è long: best = max(best, price), —Å—Ç–æ–ø = best*(1 - TRAIL_PCT)
    –î–ª—è short: best = min(best, price), —Å—Ç–æ–ø = best*(1 + TRAIL_PCT)
    """
    global best_price, trail_stop
    if position == "long":
        if curr_price > best_price:
            best_price = curr_price
            trail_stop = best_price * (1 - TRAIL_PCT)
    elif position == "short":
        if curr_price < best_price:
            best_price = curr_price
            trail_stop = best_price * (1 + TRAIL_PCT)

def should_stop_out(curr_price):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞:
    - long: –≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ price <= trail_stop
    - short: –≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ price >= trail_stop
    """
    if trail_stop is None or position is None:
        return False
    if position == "long":
        return curr_price <= trail_stop
    else:  # short
        return curr_price >= trail_stop

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: —Å–∏–≥–Ω–∞–ª—ã + —Ç—Ä–µ–π–ª–∏–Ω–≥ ---
def main_loop():
    global position, entry_price, best_price, trail_stop

    while True:
        try:
            df = get_candles()
            sig, curr_price = get_signal(df)

            # 1) –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –ø–æ –Ω–µ–º—É
            if position is not None:
                update_trailing(curr_price)
                if should_stop_out(curr_price):
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ç—Ä–µ–π–ª–∏–Ω–≥—É
                    if position == "long":
                        pnl = (curr_price - entry_price) / entry_price * 100
                        send_telegram_message(
                            f"üîî –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø —Å—Ä–∞–±–æ—Ç–∞–ª (LONG)\n"
                            f"–í—ã—Ö–æ–¥ –ø–æ —Ü–µ–Ω–µ: {curr_price:.2f}\n"
                            f"PnL: {pnl:.2f}%"
                        )
                    else:
                        pnl = (entry_price - curr_price) / entry_price * 100
                        send_telegram_message(
                            f"üîî –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø —Å—Ä–∞–±–æ—Ç–∞–ª (SHORT)\n"
                            f"–í—ã—Ö–æ–¥ –ø–æ —Ü–µ–Ω–µ: {curr_price:.2f}\n"
                            f"PnL: {pnl:.2f}%"
                        )
                    position = None
                    entry_price = None
                    best_price = None
                    trail_stop = None
                    # –ü–æ—Å–ª–µ —Å—Ç–æ–ø–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é, –∂–¥—ë–º —è–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ

            # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é)
            if sig == "BUY":
                if position == "short":
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º short –ø–æ —Å–∏–≥–Ω–∞–ª—É
                    pnl = (entry_price - curr_price) / entry_price * 100
                    send_telegram_message(
                        f"üìà –û–±—Ä–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª: –∑–∞–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ {curr_price:.2f}\nPnL: {pnl:.2f}%"
                    )
                    position = None
                    entry_price = None
                    best_price = None
                    trail_stop = None

                if position is None:
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º long
                    position = "long"
                    entry_price = curr_price
                    init_trailing_for_long(entry_price)
                    send_telegram_message(
                        f"üìà –û—Ç–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ {entry_price:.2f}\n–¢—Ä–µ–π–ª–∏–Ω–≥: {trail_stop:.2f} (‚àí{TRAIL_PCT*100:.2f}%)"
                    )

            elif sig == "SELL":
                if position == "long":
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º long –ø–æ —Å–∏–≥–Ω–∞–ª—É
                    pnl = (curr_price - entry_price) / entry_price * 100
                    send_telegram_message(
                        f"üìâ –û–±—Ä–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª: –∑–∞–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ {curr_price:.2f}\nPnL: {pnl:.2f}%"
                    )
                    position = None
                    entry_price = None
                    best_price = None
                    trail_stop = None

                if position is None:
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º short
                    position = "short"
                    entry_price = curr_price
                    init_trailing_for_short(entry_price)
                    send_telegram_message(
                        f"üìâ –û—Ç–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ {entry_price:.2f}\n–¢—Ä–µ–π–ª–∏–Ω–≥: {trail_stop:.2f} (+{TRAIL_PCT*100:.2f}%)"
                    )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ main_loop: {e}")

        time.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    from threading import Thread

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("signal", signal_command))

    Thread(target=main_loop, daemon=True).start()
    app.run_polling()
