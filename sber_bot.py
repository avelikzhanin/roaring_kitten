import logging
import time
import pandas as pd
from tinkoff.invest import Client, CandleInterval
from tinkoff.invest.utils import now
from tinkoff.invest.schemas import HistoricCandle
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import talib
import datetime
import json
import os

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN_TINKOFF = "–¢–í–û–ô_TINKOFF_API_–¢–û–ö–ï–ù"
TOKEN_TELEGRAM = "–¢–í–û–ô_TELEGRAM_BOT_TOKEN"
FIGI = "BBG004730RP0"  # FIGI –¥–ª—è SBER
CANDLE_INTERVAL = CandleInterval.CANDLE_INTERVAL_15_MIN

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users_data.json"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ===
def load_users_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {}
    return {}

def save_users_data(users_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def register_user(chat_id, username=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users_data = load_users_data()
    
    if str(chat_id) not in users_data:
        users_data[str(chat_id)] = {
            "username": username,
            "registered_at": datetime.datetime.now().isoformat(),
            "position_open": False,
            "entry_price": None,
            "subscribed": True
        }
        save_users_data(users_data)
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id} ({username})")
        return True
    return False

def get_subscribed_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users_data = load_users_data()
    return [int(chat_id) for chat_id, data in users_data.items() if data.get("subscribed", True)]

def update_user_position(chat_id, position_open, entry_price=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users_data = load_users_data()
    chat_id_str = str(chat_id)
    
    if chat_id_str in users_data:
        users_data[chat_id_str]["position_open"] = position_open
        users_data[chat_id_str]["entry_price"] = entry_price
        save_users_data(users_data)

def get_user_position(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users_data = load_users_data()
    chat_id_str = str(chat_id)
    
    if chat_id_str in users_data:
        user_data = users_data[chat_id_str]
        return user_data.get("position_open", False), user_data.get("entry_price")
    return False, None

def subscribe_user(chat_id):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã"""
    users_data = load_users_data()
    chat_id_str = str(chat_id)
    
    if chat_id_str in users_data:
        users_data[chat_id_str]["subscribed"] = True
        save_users_data(users_data)
        return True
    return False

def unsubscribe_user(chat_id):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤"""
    users_data = load_users_data()
    chat_id_str = str(chat_id)
    
    if chat_id_str in users_data:
        users_data[chat_id_str]["subscribed"] = False
        save_users_data(users_data)
        return True
    return False

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ===
def get_candles():
    with Client(TOKEN_TINKOFF) as client:
        now_dt = datetime.datetime.utcnow()
        from_dt = now_dt - datetime.timedelta(days=5)
        candles = client.market_data.get_candles(
            figi=FIGI,
            from_=from_dt,
            to=now_dt,
            interval=CANDLE_INTERVAL
        ).candles

    data = []
    for c in candles:
        data.append([
            c.time,
            candle_to_float(c.open),
            candle_to_float(c.high),
            candle_to_float(c.low),
            candle_to_float(c.close),
            c.volume
        ])

    df = pd.DataFrame(data, columns=["time", "open", "high", "low", "close", "volume"])
    return df

def candle_to_float(p):
    return p.units + p.nano / 1e9

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===
def check_signal():
    df = get_candles()

    close = df["close"].values
    high = df["high"].values
    low = df["low"].values
    volume = df["volume"].values

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    adx = talib.ADX(high, low, close, timeperiod=14)
    plus_di = talib.PLUS_DI(high, low, close, timeperiod=14)
    minus_di = talib.MINUS_DI(high, low, close, timeperiod=14)
    ema100 = talib.EMA(close, timeperiod=100)
    avg_volume = pd.Series(volume).rolling(window=20).mean()

    last_adx = adx[-1]
    last_plus_di = plus_di[-1]
    last_minus_di = minus_di[-1]
    last_close = close[-1]
    last_volume = volume[-1]
    last_ema100 = ema100[-1]
    last_avg_volume = avg_volume.iloc[-1]

    # –£—Å–ª–æ–≤–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É
    buy_signal = (
        last_adx > 23 and
        last_plus_di > last_minus_di and
        last_volume > last_avg_volume and
        last_close > last_ema100
    )

    # –£—Å–ª–æ–≤–∏—è –Ω–∞ –≤—ã—Ö–æ–¥ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    return buy_signal, last_close, last_adx, last_plus_di, last_minus_di, last_volume, last_ema100

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ===
async def send_signal(context: ContextTypes.DEFAULT_TYPE):
    try:
        buy_signal, last_close, last_adx, last_plus_di, last_minus_di, last_volume, last_ema100 = check_signal()
        
        subscribed_users = get_subscribed_users()
        
        if not subscribed_users:
            logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        for chat_id in subscribed_users:
            try:
                position_open, entry_price = get_user_position(chat_id)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                sell_signal = (
                    position_open and (
                        last_adx < 20 or
                        last_plus_di < last_minus_di or
                        last_close < last_ema100
                    )
                )

                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
                if buy_signal and not position_open:
                    update_user_position(chat_id, True, last_close)
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üìà –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É SBER!\n–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {last_close:.2f}‚ÇΩ"
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

                # –°–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥
                elif sell_signal:
                    update_user_position(chat_id, False, None)
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üìâ –°–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏\n–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {last_close:.2f}‚ÇΩ\n–í—Ö–æ–¥ –±—ã–ª –ø–æ: {entry_price:.2f}‚ÇΩ"
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_signal: {e}")

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    username = update.effective_user.username
    
    is_new_user = register_user(chat_id, username)
    
    if is_new_user:
        await update.message.reply_text(
            f"üò∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–µ–≤—É—â–∏–π –∫–æ—Ç—ë–Ω–æ–∫ –Ω–∞ —Å–≤—è–∑–∏!\n\n"
            f"üéØ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ SBER\n"
            f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ADX + DI + EMA100\n"
            f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: 15 –º–∏–Ω—É—Ç\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏\n"
            f"/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã\n"
            f"/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            f"/help - –ø–æ–º–æ—â—å"
        )
    else:
        await update.message.reply_text(
            f"üò∫ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    position_open, entry_price = get_user_position(chat_id)
    
    try:
        _, last_close, last_adx, last_plus_di, last_minus_di, last_volume, last_ema100 = check_signal()
        
        status_text = f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
        
        if position_open:
            profit_loss = ((last_close - entry_price) / entry_price) * 100
            status_text += f"üü¢ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞\n"
            status_text += f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}‚ÇΩ\n"
            status_text += f"üíπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {last_close:.2f}‚ÇΩ\n"
            status_text += f"üìà P&L: {profit_loss:+.2f}%\n\n"
        else:
            status_text += f"‚≠ï –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞\n"
            status_text += f"üíπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {last_close:.2f}‚ÇΩ\n\n"
        
        status_text += f"üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:\n"
        status_text += f"ADX: {last_adx:.1f}\n"
        status_text += f"+DI: {last_plus_di:.1f}\n"
        status_text += f"-DI: {last_minus_di:.1f}\n"
        status_text += f"EMA100: {last_ema100:.2f}‚ÇΩ"
        
        await update.message.reply_text(status_text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    if subscribe_user(chat_id):
        await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!")
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    if unsubscribe_user(chat_id):
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç - –ü–æ–º–æ—â—å

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã  
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üìä –û —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ADX, +DI, -DI, EMA100
‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: 15 –º–∏–Ω—É—Ç
‚Ä¢ –ê–∫—Ç–∏–≤: SBER

‚ö†Ô∏è –í–∞–∂–Ω–æ: –°–∏–≥–Ω–∞–ª—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
    """
    await update.message.reply_text(help_text)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(TOKEN_TELEGRAM).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("subscribe", subscribe_command))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    app.add_handler(CommandHandler("help", help_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    app.job_queue.run_repeating(send_signal, interval=900, first=5)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
