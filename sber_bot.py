import asyncio
import nest_asyncio
import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ü—Ä–∏–º–µ–Ω—è–µ–º patch –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ event loop
nest_asyncio.apply()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
current_signal = None  # "LONG" / "SHORT" / None
entry_price = None
trades_history = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: {'type': ..., 'entry': ..., 'exit': ..., 'profit': ...}

# --- –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ---
async def check_signal_logic():
    """
    –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥.
    """
    import random
    await asyncio.sleep(1)  # —ç–º—É–ª—è—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    price = 318.0 + random.uniform(-1, 1)  # –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    signal_type = random.choice(["LONG", "SHORT", None])
    return signal_type, price

async def signal_loop(app):
    global current_signal, entry_price, trades_history
    while True:
        signal, price = await check_signal_logic()
        if signal:
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏
            if current_signal is None:
                current_signal = signal
                entry_price = price
                text = f"üìà {signal} —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—Ö–æ–¥: {price:.2f}"
                await app.bot.send_message(chat_id="YOUR_CHAT_ID", text=text)
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–π —Å–¥–µ–ª–∫–∏
            elif current_signal and signal != current_signal:
                exit_price = price
                profit = ((exit_price - entry_price)/entry_price*100 
                          if current_signal=="LONG" else (entry_price - exit_price)/entry_price*100)
                trades_history.append({
                    "type": current_signal,
                    "entry": entry_price,
                    "exit": exit_price,
                    "profit": profit,
                    "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
                })
                text = f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ {current_signal} —Å–¥–µ–ª–∫–∞\n–í—Ö–æ–¥: {entry_price:.2f}, –í—ã—Ö–æ–¥: {exit_price:.2f}\n–ü—Ä–∏–±—ã–ª—å: {profit:.2f}%"
                await app.bot.send_message(chat_id="YOUR_CHAT_ID", text=text)
                current_signal = None
                entry_price = None
        await asyncio.sleep(10)  # –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏

# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---
async def signal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É /signal"""
    if current_signal:
        text = f"–¢–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª: {current_signal}\n–í—Ö–æ–¥ –ø–æ —Ü–µ–Ω–µ: {entry_price:.2f}"
    else:
        text = "–°–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç"
    await update.message.reply_text(text)

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –∏ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏"""
    if not trades_history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞")
        return
    total_profit = sum(trade["profit"] for trade in trades_history)
    lines = [f"{t['date']} | {t['type']} | –í—Ö–æ–¥: {t['entry']:.2f} | –í—ã—Ö–æ–¥: {t['exit']:.2f} | –ü—Ä–∏–±—ã–ª—å: {t['profit']:.2f}%" 
             for t in trades_history]
    text = "\n".join(lines) + f"\n\nüí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f}%"
    await update.message.reply_text(text)

# --- Main ---
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("signal", signal_command))
    app.add_handler(CommandHandler("history", history_command))

    # –ó–∞–ø—É—Å–∫ loop —Å–∏–≥–Ω–∞–ª–æ–≤
    asyncio.create_task(signal_loop(app))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.run_polling()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
