import os
import asyncio
import nest_asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ event loop –Ω–∞ Railway
nest_asyncio.apply()

# –¢–æ–∫–µ–Ω—ã –∏ chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
CHAT_ID = int(os.environ.get("CHAT_ID"))

# –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
trade_history = []

# –¢–µ–∫—É—â–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
current_positions = {"long": None, "short": None}

CHECK_INTERVAL = 10 * 60  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

async def check_signals():
    """
    –ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.
    –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–≤–æ—é –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—á–µ–π
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –≤–∏–¥–∞: {"long": True/False, "short": True/False, "exit_long": True/False, "exit_short": True/False}
    """
    # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    return {
        "long": False,
        "short": False,
        "exit_long": False,
        "exit_short": False
    }

async def signal_loop(app):
    while True:
        try:
            signals = await check_signals()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º long
            if signals["long"] and current_positions["long"] is None:
                current_positions["long"] = {"entry_time": datetime.utcnow(), "entry_price": 100}  # –ø—Ä–∏–º–µ—Ä —Ü–µ–Ω—ã
                await app.bot.send_message(chat_id=CHAT_ID, text="üöÄ Long —Å–∏–≥–Ω–∞–ª! –í—Ö–æ–¥–∏–º –≤ —Å–¥–µ–ª–∫—É.")
            
            if signals["exit_long"] and current_positions["long"] is not None:
                entry = current_positions["long"]
                exit_price = 105  # –ø—Ä–∏–º–µ—Ä
                profit_pct = (exit_price - entry["entry_price"]) / entry["entry_price"] * 100
                trade_history.append({
                    "type": "long",
                    "entry_price": entry["entry_price"],
                    "exit_price": exit_price,
                    "profit_pct": profit_pct,
                    "entry_time": entry["entry_time"],
                    "exit_time": datetime.utcnow()
                })
                current_positions["long"] = None
                await app.bot.send_message(chat_id=CHAT_ID, text=f"‚úÖ –í—ã—Ö–æ–¥ –∏–∑ Long! –ü—Ä–∏–±—ã–ª—å: {profit_pct:.2f}%")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º short
            if signals["short"] and current_positions["short"] is None:
                current_positions["short"] = {"entry_time": datetime.utcnow(), "entry_price": 100}
                await app.bot.send_message(chat_id=CHAT_ID, text="üìâ Short —Å–∏–≥–Ω–∞–ª! –í—Ö–æ–¥–∏–º –≤ —Å–¥–µ–ª–∫—É.")
            
            if signals["exit_short"] and current_positions["short"] is not None:
                entry = current_positions["short"]
                exit_price = 95
                profit_pct = (entry["entry_price"] - exit_price) / entry["entry_price"] * 100
                trade_history.append({
                    "type": "short",
                    "entry_price": entry["entry_price"],
                    "exit_price": exit_price,
                    "profit_pct": profit_pct,
                    "entry_time": entry["entry_time"],
                    "exit_time": datetime.utcnow()
                })
                current_positions["short"] = None
                await app.bot.send_message(chat_id=CHAT_ID, text=f"‚úÖ –í—ã—Ö–æ–¥ –∏–∑ Short! –ü—Ä–∏–±—ã–ª—å: {profit_pct:.2f}%")
                
        except Exception as e:
            await app.bot.send_message(chat_id=CHAT_ID, text=f"–û—à–∏–±–∫–∞ –≤ signal_loop: {e}")

        await asyncio.sleep(CHECK_INTERVAL)

# –ö–æ–º–∞–Ω–¥–∞ /signal –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async def signal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:\n"
    total_profit = 0
    for t in trade_history[-10:]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
        msg += f"{t['type'].upper()}: {t['entry_price']} ‚Üí {t['exit_price']} ({t['profit_pct']:.2f}%)\n"
        total_profit += t['profit_pct']
    msg += f"\nüí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {total_profit:.2f}%"
    await update.message.reply_text(msg)

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("signal", signal_command))

    # –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    app.create_task(signal_loop(app))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.run_polling()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
