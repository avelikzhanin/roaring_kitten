import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime

# –¢–æ–∫–µ–Ω Telegram
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
open_trades = {
    "long": None,
    "short": None
}

# –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
trade_history = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /signal –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.")

async def signal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    messages = []
    for direction in ["long", "short"]:
        trade = open_trades[direction]
        if trade is None:
            messages.append(f"No open {direction.upper()} trades.")
        else:
            messages.append(f"{direction.upper()} trade open since {trade['entry_time']}, entry price: {trade['entry_price']:.2f}")
    await update.message.reply_text("\n".join(messages))

async def signal_loop(app):
    """
    –¶–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —á–∞—Ç.
    """
    chat_id = "YOUR_CHAT_ID"
    while True:
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_long, price_long = check_long_signal()
        signal_short, price_short = check_short_signal()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Long
        if signal_long and open_trades["long"] is None:
            # –í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É
            open_trades["long"] = {"entry_time": datetime.now(), "entry_price": price_long}
            await app.bot.send_message(chat_id=chat_id, text=f"üìà LONG –≤—Ö–æ–¥ ‚Äî —Ü–µ–Ω–∞ {price_long:.2f}")
        elif signal_long is False and open_trades["long"]:
            # –í—ã—Ö–æ–¥ –∏–∑ —Å–¥–µ–ª–∫–∏
            entry_price = open_trades["long"]["entry_price"]
            profit = (price_long - entry_price) / entry_price * 100
            trade_history.append({"type": "long", "entry": entry_price, "exit": price_long, "profit_pct": profit})
            await app.bot.send_message(chat_id=chat_id, text=f"üìâ LONG –≤—ã—Ö–æ–¥ ‚Äî —Ü–µ–Ω–∞ {price_long:.2f}, –ø—Ä–æ—Ñ–∏—Ç {profit:.2f}%")
            open_trades["long"] = None

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Short
        if signal_short and open_trades["short"] is None:
            open_trades["short"] = {"entry_time": datetime.now(), "entry_price": price_short}
            await app.bot.send_message(chat_id=chat_id, text=f"üìâ SHORT –≤—Ö–æ–¥ ‚Äî —Ü–µ–Ω–∞ {price_short:.2f}")
        elif signal_short is False and open_trades["short"]:
            entry_price = open_trades["short"]["entry_price"]
            profit = (entry_price - price_short) / entry_price * 100
            trade_history.append({"type": "short", "entry": entry_price, "exit": price_short, "profit_pct": profit})
            await app.bot.send_message(chat_id=chat_id, text=f"üìà SHORT –≤—ã—Ö–æ–¥ ‚Äî —Ü–µ–Ω–∞ {price_short:.2f}, –ø—Ä–æ—Ñ–∏—Ç {profit:.2f}%")
            open_trades["short"] = None

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def check_long_signal():
    """
    –ó–¥–µ—Å—å –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ Long.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True = –≤—Ö–æ–¥, False = –≤—ã—Ö–æ–¥, None = –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è) –∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É.
    """
    # –ó–∞–≥–ª—É—à–∫–∞
    from random import random
    price = 318.0 + random()
    return random() > 0.7, price

def check_short_signal():
    """
    –ó–¥–µ—Å—å –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ Short.
    """
    from random import random
    price = 318.0 + random()
    return random() > 0.7, price

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("signal", signal_command))

    # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    asyncio.create_task(signal_loop(app))

    # –°—Ç–∞—Ä—Ç polling
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
