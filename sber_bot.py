import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

from tinkoff.invest import Client

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
TELEGRAM_TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"
TINKOFF_TOKEN = "–í–ê–®_TINKOFF_INVEST_API_TOKEN"
FIGI = "BBG004730N88"  # SBER
EMA_PERIOD = 100

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ /start
CHAT_IDS = set()

# ===== –¢–µ–ª–µ–≥—Ä–∞–º —Ö—ç–Ω–¥–ª–µ—Ä /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    CHAT_IDS.add(chat_id)
    await context.bot.send_message(chat_id=chat_id, text="–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –°–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

# ===== –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Tinkoff =====
def get_candles():
    with Client(TINKOFF_TOKEN) as client:
        now = datetime.utcnow()
        from_ = now.replace(hour=0, minute=0, second=0, microsecond=0)
        candles = client.market.candles_get(
            figi=FIGI,
            from_=from_,
            to=now,
            interval="1min"
        ).candles
        return candles

# ===== –†–∞—Å—Å—á—ë—Ç EMA =====
def calculate_ema(prices, period=EMA_PERIOD):
    if len(prices) < period:
        return None
    ema = sum(prices[:period]) / period
    k = 2 / (period + 1)
    for price in prices[period:]:
        ema = price * k + ema * (1 - k)
    return ema

# ===== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º =====
async def send_signal_to_all(price, app):
    for chat_id in CHAT_IDS:
        try:
            await app.bot.send_message(
                chat_id=chat_id,
                text=f"üìà –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É!\n–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {price}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ {chat_id}: {e}")

# ===== –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ =====
async def auto_check(app):
    while True:
        try:
            candles = get_candles()
            if not candles:
                await asyncio.sleep(60)
                continue

            close_prices = [c.close.price for c in candles]
            ema = calculate_ema(close_prices)

            current_price = close_prices[-1]

            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Ü–µ–Ω–∞ –≤—ã—à–µ EMA + –æ–±—ä—ë–º —Å–≤–µ—á–∏ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            volumes = [c.volume for c in candles]
            avg_volume = sum(volumes) / len(volumes)

            if current_price > ema and candles[-1].volume > avg_volume:
                await send_signal_to_all(current_price, app)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ auto_check: {e}")

        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# ===== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    app.create_task(auto_check(app))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
