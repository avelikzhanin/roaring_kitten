import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from tinkoff.invest import Client
import os

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TINKOFF_TOKEN = os.environ.get("TINKOFF_TOKEN")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")  # –í–∞—à chat_id
SYMBOL = "SBER"  # —Ç–∏–∫–µ—Ä
TIMEFRAME = "H1"  # —á–∞—Å–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
current_position = None  # None, "long" –∏–ª–∏ "short"
trade_history = []

# --- –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ---
def get_signal():  
    """
    –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—á–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: "long", "short", "exit" –∏–ª–∏ None
    """
    # –ó–¥–µ—Å—å –ø–æ–¥–∫–ª—é—á–∞–µ–º Tinkoff API –∏ —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:
    import random
    return random.choice(["long", "short", "exit", None])

async def check_signals(app):
    global current_position
    signal = get_signal()
    now = datetime.utcnow().strftime("%Y-%m-%d %H:%M")
    
    if signal in ["long", "short"] and current_position is None:
        current_position = signal
        trade_history.append({"type": signal, "entry_time": now})
        await app.bot.send_message(
            chat_id=CHAT_ID,
            text=f"üìà –í—Ö–æ–¥ –≤ {signal.upper()} —Å–¥–µ–ª–∫—É: {now}"
        )
    elif signal == "exit" and current_position:
        last_trade = trade_history[-1]
        last_trade["exit_time"] = now
        # –ü—Ä–∏–º–µ—Ä: —Å—á–∏—Ç–∞–µ–º —É—Å–ª–æ–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        last_trade["profit_percent"] = round((1.5 if current_position=="long" else 1.2),2)
        await app.bot.send_message(
            chat_id=CHAT_ID,
            text=f"üìâ –í—ã—Ö–æ–¥ –∏–∑ {current_position.upper()} —Å–¥–µ–ª–∫–∏: {now}\n–ü—Ä–∏–±—ã–ª—å: {last_trade['profit_percent']}%"
        )
        current_position = None

# --- –ö–æ–º–∞–Ω–¥–∞ /signal –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ ---
async def signal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    signal = get_signal()
    text = f"–¢–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª: {signal}" if signal else "–°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç"
    await update.message.reply_text(text)

# --- –ö–æ–º–∞–Ω–¥–∞ /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–¥–µ–ª–æ–∫ ---
async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not trade_history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞.")
        return
    text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:\n"
    for t in trade_history:
        text += f"{t['type'].upper()} | –í—Ö–æ–¥: {t['entry_time']} | "
        text += f"–í—ã—Ö–æ–¥: {t.get('exit_time', '-')}"
        if "profit_percent" in t:
            text += f" | –ü—Ä–∏–±—ã–ª—å: {t['profit_percent']}%"
        text += "\n"
    await update.message.reply_text(text)

# --- –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ ---
async def signal_loop(app):
    while True:
        try:
            await check_signals(app)
        except Exception as e:
            await app.bot.send_message(chat_id=CHAT_ID, text=f"–û—à–∏–±–∫–∞ –≤ —Å–∏–≥–Ω–∞–ª–µ: {e}")
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("signal", signal_command))
    app.add_handler(CommandHandler("history", history_command))
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    app.create_task(signal_loop(app))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
