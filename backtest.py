#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –±—ç–∫—Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ SBER –¥–ª—è Railway
–¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Tinkoff API –∑–∞ –≤–µ—Å—å –∞–≤–≥—É—Å—Ç
–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å 15 –ø–æ 26 –∞–≤–≥—É—Å—Ç–∞
"""

import os
import sys
import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional
from dataclasses import dataclass
import logging
import traceback

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –±–µ–∑ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
os.environ['PYTHONUNBUFFERED'] = '1'
sys.stdout.reconfigure(line_buffering=True)
sys.stderr.reconfigure(line_buffering=True)

def force_print(msg: str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —Ñ–ª–µ—à–µ–º"""
    print(msg)
    sys.stdout.flush()
    sys.stderr.flush()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ],
    force=True
)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
for handler in logging.root.handlers:
    handler.setStream(sys.stdout)
    if hasattr(handler.stream, 'reconfigure'):
        handler.stream.reconfigure(line_buffering=True)

logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
force_print("üîç –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –ò–ú–ü–û–†–¢–û–í...")
force_print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
force_print(f"Pandas –≤–µ—Ä—Å–∏—è: {pd.__version__}")
force_print(f"Numpy –≤–µ—Ä—Å–∏—è: {np.__version__}")

try:
    from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
    from tinkoff.invest.utils import now
    TINKOFF_AVAILABLE = True
    force_print("‚úÖ tinkoff-investments –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    force_print(f"‚ùå tinkoff-investments –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    force_print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–µ–∑ Tinkoff API —Ä–∞–±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!")
    sys.exit(1)

@dataclass
class SignalData:
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞"""
    timestamp: str
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float
    di_diff: float
    signal_strength: float

def calculate_ema(prices: List[float], period: int = 20) -> List[float]:
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç EMA"""
    try:
        if len(prices) < period:
            return [np.nan] * len(prices)
        
        series = pd.Series(prices)
        ema = series.ewm(span=period, adjust=False).mean()
        return ema.fillna(np.nan).tolist()
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA: {e}")
        return [np.nan] * len(prices)

def calculate_adx_simple(highs: List[float], lows: List[float], closes: List[float], period: int = 14):
    """–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç ADX –ø–æ —Ñ–æ—Ä–º—É–ª–µ –£–∞–π–ª–¥–µ—Ä–∞"""
    try:
        n = len(highs)
        if n < period * 2:
            return [np.nan] * n, [np.nan] * n, [np.nan] * n
        
        # 1. True Range
        tr_list = []
        for i in range(n):
            if i == 0:
                tr = highs[i] - lows[i]
            else:
                hl = highs[i] - lows[i]
                hc = abs(highs[i] - closes[i-1])
                lc = abs(lows[i] - closes[i-1])
                tr = max(hl, hc, lc)
            tr_list.append(tr)
        
        # 2. Directional Movement
        plus_dm = []
        minus_dm = []
        
        for i in range(n):
            if i == 0:
                plus_dm.append(0)
                minus_dm.append(0)
            else:
                up_move = highs[i] - highs[i-1]
                down_move = lows[i-1] - lows[i]
                
                if up_move > down_move and up_move > 0:
                    plus_dm.append(up_move)
                    minus_dm.append(0)
                elif down_move > up_move and down_move > 0:
                    plus_dm.append(0)
                    minus_dm.append(down_move)
                else:
                    plus_dm.append(0)
                    minus_dm.append(0)
        
        # 3. –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –£–∞–π–ª–¥–µ—Ä–∞
        def smooth_wilder(values, period):
            result = [np.nan] * len(values)
            
            if len(values) >= period:
                result[period-1] = sum(values[:period]) / period
                
                for i in range(period, len(values)):
                    result[i] = (result[i-1] * (period-1) + values[i]) / period
            
            return result
        
        # –°–≥–ª–∞–∂–∏–≤–∞–µ–º TR, +DM, -DM
        atr_smooth = smooth_wilder(tr_list, period)
        plus_dm_smooth = smooth_wilder(plus_dm, period)
        minus_dm_smooth = smooth_wilder(minus_dm, period)
        
        # 4. –†–∞—Å—á–µ—Ç +DI –∏ -DI
        plus_di = []
        minus_di = []
        dx_values = []
        
        for i in range(n):
            if i < period-1 or atr_smooth[i] == 0 or np.isnan(atr_smooth[i]):
                plus_di.append(np.nan)
                minus_di.append(np.nan)
                dx_values.append(np.nan)
            else:
                pdi = (plus_dm_smooth[i] / atr_smooth[i]) * 100
                mdi = (minus_dm_smooth[i] / atr_smooth[i]) * 100
                plus_di.append(pdi)
                minus_di.append(mdi)
                
                if (pdi + mdi) == 0:
                    dx_values.append(0)
                else:
                    dx = abs(pdi - mdi) / (pdi + mdi) * 100
                    dx_values.append(dx)
        
        # 5. ADX - —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ DX
        adx_values = [np.nan] * len(dx_values)
        
        first_valid_idx = None
        for i in range(len(dx_values)):
            if not np.isnan(dx_values[i]):
                first_valid_idx = i
                break
        
        if first_valid_idx is not None and first_valid_idx + period <= len(dx_values):
            valid_dx = []
            start_idx = first_valid_idx
            
            for i in range(start_idx, min(start_idx + period, len(dx_values))):
                if not np.isnan(dx_values[i]):
                    valid_dx.append(dx_values[i])
            
            if len(valid_dx) >= period:
                first_adx = sum(valid_dx[:period]) / period
                adx_idx = start_idx + period - 1
                if adx_idx < len(adx_values):
                    adx_values[adx_idx] = first_adx
                    
                    for i in range(adx_idx + 1, len(dx_values)):
                        if not np.isnan(dx_values[i]):
                            adx_values[i] = (adx_values[i-1] * (period-1) + dx_values[i]) / period
                        else:
                            adx_values[i] = adx_values[i-1] if i > 0 else np.nan
        
        return adx_values, plus_di, minus_di
        
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ADX: {e}")
        traceback.print_exc()
        n = len(highs)
        return [np.nan] * n, [np.nan] * n, [np.nan] * n

async def get_real_data() -> pd.DataFrame:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤–µ—Å—å –∞–≤–≥—É—Å—Ç —á–µ—Ä–µ–∑ Tinkoff API"""
    token = os.getenv('TINKOFF_TOKEN')
    
    if not token:
        force_print("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return pd.DataFrame()
    
    try:
        force_print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤–µ—Å—å –∞–≤–≥—É—Å—Ç 2025...")
        
        with Client(token) as client:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤–µ—Å—å –∞–≤–≥—É—Å—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            moscow_tz = timezone(timedelta(hours=3))
            from_time = datetime(2025, 8, 1, 0, 0, tzinfo=moscow_tz).astimezone(timezone.utc)
            to_time = datetime(2025, 8, 31, 23, 59, tzinfo=moscow_tz).astimezone(timezone.utc)
            
            force_print(f"üìÖ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö: –≤–µ—Å—å –∞–≤–≥—É—Å—Ç 2025")
            
            response = client.market_data.get_candles(
                figi="BBG004730N88",  # SBER
                from_=from_time,
                to=to_time,
                interval=CandleInterval.CANDLE_INTERVAL_HOUR
            )
            
            if not response.candles:
                force_print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Tinkoff API")
                return pd.DataFrame()
            
            data = []
            for candle in response.candles:
                try:
                    price = float(candle.close.units + candle.close.nano / 1e9)
                    high = float(candle.high.units + candle.high.nano / 1e9)
                    low = float(candle.low.units + candle.low.nano / 1e9)
                    open_price = float(candle.open.units + candle.open.nano / 1e9)
                    
                    data.append({
                        'timestamp': candle.time,
                        'open': open_price,
                        'high': high,
                        'low': low,
                        'close': price,
                        'volume': candle.volume
                    })
                except Exception as e:
                    force_print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏: {e}")
                    continue
            
            if not data:
                force_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API")
                return pd.DataFrame()
            
            df = pd.DataFrame(data)
            df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
            df['timestamp'] = df['timestamp'].dt.tz_convert('Europe/Moscow')
            df = df.sort_values('timestamp').reset_index(drop=True)
            
            force_print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –∑–∞ –∞–≤–≥—É—Å—Ç")
            force_print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df['timestamp'].min()} - {df['timestamp'].max()}")
            return df
            
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Tinkoff API: {e}")
        traceback.print_exc()
        return pd.DataFrame()

def find_signals(df: pd.DataFrame) -> List[SignalData]:
    """–ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥ —Å 15 –ø–æ 26 –∞–≤–≥—É—Å—Ç–∞"""
    try:
        force_print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        if df.empty:
            force_print("‚ùå –ü—É—Å—Ç–æ–π DataFrame")
            return []
        
        force_print("üìä –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        closes = df['close'].tolist()
        ema20_list = calculate_ema(closes, 20)
        
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        adx_list, plus_di_list, minus_di_list = calculate_adx_simple(highs, lows, closes, 14)
        
        df['ema20'] = ema20_list
        df['adx'] = adx_list
        df['plus_di'] = plus_di_list
        df['minus_di'] = minus_di_list
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (15-26 –∞–≤–≥—É—Å—Ç–∞)
        analysis_start = datetime(2025, 8, 15, 0, 0, tzinfo=timezone(timedelta(hours=3)))
        analysis_end = datetime(2025, 8, 26, 23, 59, tzinfo=timezone(timedelta(hours=3)))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ timezone-aware –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if df['timestamp'].dt.tz is None:
            df['timestamp'] = df['timestamp'].dt.tz_localize('Europe/Moscow')
        
        analysis_df = df[
            (df['timestamp'] >= analysis_start) & 
            (df['timestamp'] <= analysis_end)
        ].copy()
        
        force_print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ 15-26 –∞–≤–≥—É—Å—Ç–∞: {len(analysis_df)} —Å–≤–µ—á–µ–π")
        
        signals = []
        
        for i, row in analysis_df.iterrows():
            try:
                if (pd.isna(row['ema20']) or pd.isna(row['adx']) or 
                    pd.isna(row['plus_di']) or pd.isna(row['minus_di'])):
                    continue
                
                price_above_ema = row['close'] > row['ema20']
                adx_strong = row['adx'] > 25
                bullish_di = row['plus_di'] > row['minus_di']
                
                if price_above_ema and adx_strong and bullish_di:
                    strength = 0
                    strength += min(row['adx'] / 50 * 40, 40)
                    strength += min((row['plus_di'] - row['minus_di']) / 20 * 30, 30)
                    strength += min(((row['close'] - row['ema20']) / row['ema20'] * 100) / 2 * 20, 20)
                    strength += 10
                    
                    signal = SignalData(
                        timestamp=row['timestamp'].strftime('%Y-%m-%d %H:%M MSK'),
                        price=round(row['close'], 2),
                        ema20=round(row['ema20'], 2),
                        adx=round(row['adx'], 2),
                        plus_di=round(row['plus_di'], 2),
                        minus_di=round(row['minus_di'], 2),
                        di_diff=round(row['plus_di'] - row['minus_di'], 2),
                        signal_strength=round(min(strength, 100), 1)
                    )
                    signals.append(signal)
                    
            except Exception as e:
                force_print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                continue
        
        force_print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ 15-26 –∞–≤–≥—É—Å—Ç–∞")
        return signals
        
    except Exception as e:
        force_print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        traceback.print_exc()
        return []

def print_results(signals: List[SignalData], df: pd.DataFrame):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ª–æ–≥–∏"""
    try:
        force_print("\n" + "="*80)
        force_print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê SBER (15-26 –ê–í–ì–£–°–¢–ê 2025)")
        force_print("="*80)
        
        if not df.empty:
            # –û–±—â–∏–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            force_print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞: {df['timestamp'].min().strftime('%Y-%m-%d %H:%M')} - {df['timestamp'].max().strftime('%Y-%m-%d %H:%M')} MSK")
            force_print(f"üìà –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {len(df)}")
            
            # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            analysis_start = datetime(2025, 8, 15, 0, 0, tzinfo=timezone(timedelta(hours=3)))
            analysis_end = datetime(2025, 8, 26, 23, 59, tzinfo=timezone(timedelta(hours=3)))
            
            if df['timestamp'].dt.tz is None:
                df_temp = df.copy()
                df_temp['timestamp'] = df_temp['timestamp'].dt.tz_localize('Europe/Moscow')
            else:
                df_temp = df
                
            analysis_candles = len(df_temp[
                (df_temp['timestamp'] >= analysis_start) & 
                (df_temp['timestamp'] <= analysis_end)
            ])
            
            force_print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥: 15-26 –∞–≤–≥—É—Å—Ç–∞ 2025")
            force_print(f"üïê –°–≤–µ—á–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ –∞–Ω–∞–ª–∏–∑–∞: {analysis_candles}")
        
        if len(signals) == 0:
            force_print(f"\n‚ùå –°–ò–ì–ù–ê–õ–´ –ù–ï –ù–ê–ô–î–ï–ù–´")
            force_print("üí° –í –ø–µ—Ä–∏–æ–¥ 15-26 –∞–≤–≥—É—Å—Ç–∞ –Ω–µ –±—ã–ª–æ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
            return
        
        force_print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–û –°–ò–ì–ù–ê–õ–û–í: {len(signals)}")
        force_print("="*80)
        
        for i, signal in enumerate(signals, 1):
            force_print(f"\nüöÄ –°–ò–ì–ù–ê–õ #{i}")
            force_print(f"üìÖ –í—Ä–µ–º—è: {signal.timestamp}")
            force_print(f"üí∞ –¶–µ–Ω–∞: {signal.price} ‚ÇΩ")
            force_print(f"üìä EMA20: {signal.ema20} ‚ÇΩ")
            force_print(f"üìà ADX: {signal.adx}")
            force_print(f"üìä +DI: {signal.plus_di} | -DI: {signal.minus_di}")
            force_print(f"üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal.signal_strength}%")
        
        force_print("\n" + "="*80)
        force_print(f"üìã –ò–¢–û–ì–û: {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
        force_print("="*80)
        
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        traceback.print_exc()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        force_print("üöÄ –ó–ê–ü–£–°–ö SBER BACKTEST")
        force_print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤–µ—Å—å –∞–≤–≥—É—Å—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤")
        force_print("üéØ –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤: 15-26 –∞–≤–≥—É—Å—Ç–∞ 2025")
        force_print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
        force_print("-"*60)
        
        railway_env = os.getenv('RAILWAY_ENVIRONMENT')
        if railway_env:
            force_print(f"üöÇ Railway –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {railway_env}")
        else:
            force_print("üè† –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Tinkoff API
        df = await get_real_data()
        
        if df.empty:
            force_print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Tinkoff API")
            force_print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            force_print("   1. –ü–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TINKOFF_TOKEN")
            force_print("   2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            force_print("   3. –°—Ç–∞—Ç—É—Å Tinkoff API")
            return
        
        # –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = find_signals(df)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ª–æ–≥–∏
        print_results(signals, df)
        
        force_print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        
    except KeyboardInterrupt:
        force_print("\nüëã –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        force_print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    force_print("üéØ SBER BACKTEST - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï")
    force_print(f"üêç Python: {sys.executable}")
    force_print(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}")
    
    token_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if os.getenv('TINKOFF_TOKEN') else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    force_print(f"üîë TINKOFF_TOKEN: {token_status}")
    
    if not os.getenv('TINKOFF_TOKEN'):
        force_print("‚ùå –û–°–¢–ê–ù–û–í: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TINKOFF_TOKEN!")
        sys.exit(1)
    
    try:
        asyncio.run(main())
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ asyncio.run: {e}")
        traceback.print_exc()
        sys.exit(1)
