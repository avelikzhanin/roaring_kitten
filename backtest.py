#!/usr/bin/env python3
"""
SBER 1H Strategy - –ü—Ä–æ—Å—Ç–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
–¢–æ–ª—å–∫–æ —á–∞—Å–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –±–µ–∑ –ø–µ—Ä–µ—É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
"""

import asyncio
import logging
import os
import sys
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Tuple, Optional
from dataclasses import dataclass
from enum import Enum

# –ò–º–ø–æ—Ä—Ç—ã Tinkoff API
from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
from tinkoff.invest.utils import now

print("üéØ SBER 1H STRATEGY ANALYZER")
print("=" * 50)
print("‚úÖ –¢–æ–ª—å–∫–æ —á–∞—Å–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
print("üéØ –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –±–µ–∑ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")  
print("üìä –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–æ–≤")
print("‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã...")
print("=" * 50)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

@dataclass
class SignalConditions:
    """–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    adx_threshold: float = 23.0
    price_above_ema: bool = True
    di_plus_above_di_minus: bool = True
    ema_period: int = 20

@dataclass
class Signal:
    """–°–∏–≥–Ω–∞–ª –Ω–∞ 1h"""
    timestamp: datetime
    price: float
    adx: float
    plus_di: float
    minus_di: float
    ema: float
    signal_strength: float
    conditions_met: Dict[str, bool]
    
    def is_valid(self) -> bool:
        return all(self.conditions_met.values())
    
    def get_strength_category(self) -> str:
        if self.signal_strength >= 80:
            return "–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô"
        elif self.signal_strength >= 60:
            return "–°–ò–õ–¨–ù–´–ô"
        elif self.signal_strength >= 40:
            return "–°–†–ï–î–ù–ò–ô"
        elif self.signal_strength >= 20:
            return "–°–õ–ê–ë–´–ô"
        else:
            return "–û–ß–ï–ù–¨ –°–õ–ê–ë–´–ô"

class DataProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö Tinkoff"""
    
    def __init__(self, token: str):
        self.token = token
        self.figi = "BBG004730N88"  # SBER
        
    async def get_candles(self, days: int = 21) -> List[HistoricCandle]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with Client(self.token) as client:
                to_time = now()
                from_time = to_time - timedelta(days=days)
                
                logger.info(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ 1H: {days} –¥–Ω–µ–π ({from_time.strftime('%d.%m %H:%M')} - {to_time.strftime('%d.%m %H:%M')})")
                
                response = client.market_data.get_candles(
                    figi=self.figi,
                    from_=from_time,
                    to=to_time,
                    interval=CandleInterval.CANDLE_INTERVAL_HOUR
                )
                
                if response.candles:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(response.candles)} —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
                    return response.candles
                else:
                    logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def candles_to_dataframe(self, candles: List[HistoricCandle]) -> pd.DataFrame:
        if not candles:
            return pd.DataFrame()
        
        data = []
        for candle in candles:
            try:
                data.append({
                    'timestamp': candle.time,
                    'open': self.quotation_to_decimal(candle.open),
                    'high': self.quotation_to_decimal(candle.high),
                    'low': self.quotation_to_decimal(candle.low),
                    'close': self.quotation_to_decimal(candle.close),
                    'volume': candle.volume
                })
            except:
                continue
        
        if not data:
            return pd.DataFrame()
        
        df = pd.DataFrame(data)
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        df = df.sort_values('timestamp').reset_index(drop=True)
        df = df.drop_duplicates(subset=['timestamp'], keep='last')
        
        return df
    
    @staticmethod
    def quotation_to_decimal(quotation) -> float:
        try:
            return float(quotation.units + quotation.nano / 1e9)
        except:
            return 0.0

class TechnicalIndicators:
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        if len(prices) < period:
            return [np.nan] * len(prices)
        series = pd.Series(prices)
        ema = series.ewm(span=period, adjust=False).mean()
        return ema.tolist()
    
    @staticmethod
    def wilder_smoothing(values: pd.Series, period: int) -> pd.Series:
        result = pd.Series(index=values.index, dtype=float)
        if len(values) < period:
            return result
        
        first_avg = values.iloc[:period].mean()
        result.iloc[period-1] = first_avg
        
        for i in range(period, len(values)):
            result.iloc[i] = (result.iloc[i-1] * (period - 1) + values.iloc[i]) / period
        
        return result
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        if len(highs) < period * 2:
            return {
                'adx': [np.nan] * len(highs), 
                'plus_di': [np.nan] * len(highs), 
                'minus_di': [np.nan] * len(highs)
            }
        
        df = pd.DataFrame({'high': highs, 'low': lows, 'close': closes})
        
        # True Range
        df['prev_close'] = df['close'].shift(1)
        df['hl'] = df['high'] - df['low']
        df['hc'] = abs(df['high'] - df['prev_close'])
        df['lc'] = abs(df['low'] - df['prev_close'])
        df['tr'] = df[['hl', 'hc', 'lc']].max(axis=1)
        
        # Directional Movement
        df['high_diff'] = df['high'] - df['high'].shift(1)
        df['low_diff'] = df['low'].shift(1) - df['low']
        
        df['plus_dm'] = np.where((df['high_diff'] > df['low_diff']) & (df['high_diff'] > 0), df['high_diff'], 0)
        df['minus_dm'] = np.where((df['low_diff'] > df['high_diff']) & (df['low_diff'] > 0), df['low_diff'], 0)
        
        # Smoothing
        df['atr'] = TechnicalIndicators.wilder_smoothing(df['tr'], period)
        df['plus_dm_smooth'] = TechnicalIndicators.wilder_smoothing(df['plus_dm'], period)
        df['minus_dm_smooth'] = TechnicalIndicators.wilder_smoothing(df['minus_dm'], period)
        
        # DI
        df['plus_di'] = (df['plus_dm_smooth'] / df['atr']) * 100
        df['minus_di'] = (df['minus_dm_smooth'] / df['atr']) * 100
        
        # DX –∏ ADX
        df['di_sum'] = df['plus_di'] + df['minus_di']
        df['di_diff'] = abs(df['plus_di'] - df['minus_di'])
        df['dx'] = np.where(df['di_sum'] != 0, (df['di_diff'] / df['di_sum']) * 100, 0)
        df['adx'] = TechnicalIndicators.wilder_smoothing(df['dx'], period)
        
        return {
            'adx': df['adx'].fillna(np.nan).tolist(),
            'plus_di': df['plus_di'].fillna(np.nan).tolist(),
            'minus_di': df['minus_di'].fillna(np.nan).tolist()
        }

class SignalAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, conditions: SignalConditions = None):
        self.conditions = conditions or SignalConditions()
    
    def analyze_signals(self, df: pd.DataFrame) -> List[Signal]:
        if df.empty or len(df) < 50:
            return []
        
        closes = df['close'].tolist()
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        timestamps = df['timestamp'].tolist()
        
        ema = TechnicalIndicators.calculate_ema(closes, self.conditions.ema_period)
        adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
        
        signals = []
        
        for i in range(50, len(df)):
            try:
                if pd.isna(ema[i]) or pd.isna(adx_data['adx'][i]):
                    continue
                
                price = closes[i]
                current_ema = ema[i]
                current_adx = adx_data['adx'][i]
                plus_di = adx_data['plus_di'][i]
                minus_di = adx_data['minus_di'][i]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
                conditions_met = {
                    'adx_above_threshold': current_adx > self.conditions.adx_threshold,
                    'price_above_ema': price > current_ema,
                    'di_plus_above_minus': plus_di > minus_di
                }
                
                # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
                signal_strength = 0
                
                # ADX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (40% –æ—Ç –æ–±—â–µ–π —Å–∏–ª—ã)
                if conditions_met['adx_above_threshold']:
                    adx_excess = (current_adx - self.conditions.adx_threshold) / 20
                    adx_component = min(adx_excess * 40, 40)
                    signal_strength += adx_component
                
                # EMA –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (30% –æ—Ç –æ–±—â–µ–π —Å–∏–ª—ã)
                if conditions_met['price_above_ema']:
                    ema_distance = ((price - current_ema) / current_ema) * 100
                    ema_component = min(abs(ema_distance) * 15, 30)
                    signal_strength += ema_component
                
                # DI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (30% –æ—Ç –æ–±—â–µ–π —Å–∏–ª—ã)
                if conditions_met['di_plus_above_minus']:
                    di_diff = plus_di - minus_di
                    di_component = min(di_diff * 2, 30)
                    signal_strength += di_component
                
                signal = Signal(
                    timestamp=timestamps[i],
                    price=price,
                    adx=current_adx,
                    plus_di=plus_di,
                    minus_di=minus_di,
                    ema=current_ema,
                    signal_strength=min(signal_strength, 100),
                    conditions_met=conditions_met
                )
                
                if signal.is_valid():
                    signals.append(signal)
                    
            except:
                continue
        
        return signals

class StrategyAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self, token: str):
        self.data_provider = DataProvider(token)
        self.signal_analyzer = SignalAnalyzer()
        
    async def run_analysis(self, days: int = 21) -> List[Signal]:
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ 1H —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞ {days} –¥–Ω–µ–π...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        candles = await self.data_provider.get_candles(days)
        if not candles:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return []
        
        df = self.data_provider.candles_to_dataframe(candles)
        if df.empty:
            logger.error("‚ùå –ü—É—Å—Ç–æ–π DataFrame")
            return []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = self.signal_analyzer.analyze_signals(df)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_results(signals)
        
        return signals
    
    def print_results(self, signals: List[Signal]):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–∏–ª—ã"""
        
        print(f"\n{'='*80}")
        print("üéØ –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í SBER 1H –°–¢–†–ê–¢–ï–ì–ò–ò")
        print(f"{'='*80}")
        
        if not signals:
            print("‚ùå –°–ò–ì–ù–ê–õ–´ –ù–ï –ù–ê–ô–î–ï–ù–´")
            return
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_signals = len(signals)
        avg_strength = np.mean([s.signal_strength for s in signals])
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üíé –í—Å–µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
        print(f"   üìà –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞: {avg_strength:.1f}%")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–ª–µ
        strength_ranges = {
            "–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ï (80-100%)": [s for s in signals if s.signal_strength >= 80],
            "–°–ò–õ–¨–ù–´–ï (60-80%)": [s for s in signals if 60 <= s.signal_strength < 80],
            "–°–†–ï–î–ù–ò–ï (40-60%)": [s for s in signals if 40 <= s.signal_strength < 60],
            "–°–õ–ê–ë–´–ï (20-40%)": [s for s in signals if 20 <= s.signal_strength < 40],
            "–û–ß–ï–ù–¨ –°–õ–ê–ë–´–ï (0-20%)": [s for s in signals if s.signal_strength < 20]
        }
        
        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–ò–õ–ï:")
        for category, group in strength_ranges.items():
            count = len(group)
            pct = (count / total_signals) * 100 if total_signals > 0 else 0
            avg_str = np.mean([s.signal_strength for s in group]) if group else 0
            print(f"   ‚Ä¢ {category}: {count:>2} —Å–∏–≥–Ω–∞–ª–æ–≤ ({pct:>4.1f}%, —Å—Ä.—Å–∏–ª–∞ {avg_str:.1f}%)")
        
        # –¢–æ–ø —Å–∏–≥–Ω–∞–ª—ã
        sorted_signals = sorted(signals, key=lambda x: x.signal_strength, reverse=True)
        
        print(f"\n{'='*80}")
        print("üèÜ –¢–û–ü-20 –°–ê–ú–´–• –°–ò–õ–¨–ù–´–• –°–ò–ì–ù–ê–õ–û–í")
        print(f"{'='*80}")
        print(f"{'#':<2} {'–î–∞—Ç–∞/–í—Ä–µ–º—è':<17} {'–¶–µ–Ω–∞':<8} {'–°–∏–ª–∞%':<6} {'ADX':<6} {'DI+':<6} {'DI-':<6} {'EMA':<8} {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è'}")
        print("-" * 80)
        
        for i, signal in enumerate(sorted_signals[:20], 1):
            timestamp_str = signal.timestamp.strftime('%d.%m %H:%M')
            category = signal.get_strength_category()
            
            print(f"{i:<2} {timestamp_str:<17} {signal.price:<8.2f} "
                  f"{signal.signal_strength:<6.1f} {signal.adx:<6.1f} "
                  f"{signal.plus_di:<6.1f} {signal.minus_di:<6.1f} {signal.ema:<8.2f} {category}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¢–û–ü-5
        print(f"\n{'='*80}")
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ü-5 –°–ò–ì–ù–ê–õ–û–í")
        print(f"{'='*80}")
        
        for i, signal in enumerate(sorted_signals[:5], 1):
            ema_distance = ((signal.price - signal.ema) / signal.ema) * 100
            di_spread = signal.plus_di - signal.minus_di
            adx_excess = signal.adx - 23.0
            
            print(f"\nüèÜ #{i} - –°–ò–õ–ê: {signal.signal_strength:.1f}% ({signal.get_strength_category()})")
            print(f"   üìÖ –í—Ä–µ–º—è: {signal.timestamp.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)")
            print(f"   üí∞ –¶–µ–Ω–∞: {signal.price:.2f} —Ä—É–±")
            
            print(f"   üìä –†–ê–ó–ë–û–† –°–ò–õ–´ –°–ò–ì–ù–ê–õ–ê:")
            
            # ADX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            adx_component = min((adx_excess / 20) * 40, 40) if adx_excess > 0 else 0
            print(f"       ‚Ä¢ ADX: {signal.adx:.1f} (–ø–æ—Ä–æ–≥ 23.0, –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {adx_excess:.1f})")
            print(f"         –í–∫–ª–∞–¥ –≤ —Å–∏–ª—É: {adx_component:.1f} –±–∞–ª–ª–æ–≤ –∏–∑ 40")
            
            # EMA –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            ema_component = min(abs(ema_distance) * 15, 30) if ema_distance > 0 else 0
            print(f"       ‚Ä¢ EMA20: {signal.ema:.2f} —Ä—É–± (—Ü–µ–Ω–∞ –≤—ã—à–µ –Ω–∞ {ema_distance:.3f}%)")
            print(f"         –í–∫–ª–∞–¥ –≤ —Å–∏–ª—É: {ema_component:.1f} –±–∞–ª–ª–æ–≤ –∏–∑ 30")
            
            # DI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            di_component = min(di_spread * 2, 30) if di_spread > 0 else 0
            print(f"       ‚Ä¢ DI: +{signal.plus_di:.1f} vs -{signal.minus_di:.1f} (—Ä–∞–∑–Ω–∏—Ü–∞ +{di_spread:.1f})")
            print(f"         –í–∫–ª–∞–¥ –≤ —Å–∏–ª—É: {di_component:.1f} –±–∞–ª–ª–æ–≤ –∏–∑ 30")
            
            print(f"       ‚Ä¢ –ò–¢–û–ì–û: {adx_component:.1f} + {ema_component:.1f} + {di_component:.1f} = {signal.signal_strength:.1f}%")
            
            print(f"   üéØ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print(f"       ‚Ä¢ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {signal.price:.2f} —Ä—É–±")
            print(f"       ‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: ~{signal.price * 0.97:.2f} —Ä—É–± (-3%)")
            print(f"       ‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ~{signal.price * 1.06:.2f} —Ä—É–± (+6%, R:R = 2:1)")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏–ª—ã
        print(f"\n{'='*80}")
        print("üìà –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –°–ò–õ–´ –°–ò–ì–ù–ê–õ–û–í")
        print(f"{'='*80}")
        
        adx_values = [s.adx for s in signals]
        ema_distances = [((s.price - s.ema) / s.ema) * 100 for s in signals]
        di_spreads = [s.plus_di - s.minus_di for s in signals]
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê ADX:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {np.mean(adx_values):.1f}")
        print(f"   ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {np.min(adx_values):.1f} (–ø–æ—Ä–æ–≥: 23.0)")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {np.max(adx_values):.1f}")
        print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {np.median(adx_values):.1f}")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ò–°–¢–ê–ù–¶–ò–ò –û–¢ EMA:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {np.mean(ema_distances):.3f}%")
        print(f"   ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {np.min(ema_distances):.3f}%")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {np.max(ema_distances):.3f}%")
        print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {np.median(ema_distances):.3f}%")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê DI –†–ê–ó–ù–û–°–¢–ò:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {np.mean(di_spreads):.1f}")
        print(f"   ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {np.min(di_spreads):.1f}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {np.max(di_spreads):.1f}")
        print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {np.median(di_spreads):.1f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        strong_signals = [s for s in signals if s.signal_strength >= 60]
        
        print(f"\n{'='*80}")
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print(f"{'='*80}")
        
        print(f"üéØ –î–õ–Ø –¢–û–†–ì–û–í–õ–ò:")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã —Å —Å–∏–ª–æ–π ‚â• 60% ({len(strong_signals)} –∏–∑ {total_signals})")
        print(f"   ‚Ä¢ –õ—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏–º–µ—é—Ç ADX > 30 –∏ DI —Ä–∞–∑–Ω–æ—Å—Ç—å > 5")
        print(f"   ‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Å–∏–ª–æ–π < 40%")
        
        if strong_signals:
            best_signal = sorted_signals[0]
            print(f"\nüèÜ –≠–¢–ê–õ–û–ù–ù–´–ô –°–ò–ì–ù–ê–õ:")
            print(f"   üìÖ –î–∞—Ç–∞: {best_signal.timestamp.strftime('%d.%m.%Y %H:%M')}")
            print(f"   üí∞ –¶–µ–Ω–∞: {best_signal.price:.2f} —Ä—É–±")
            print(f"   üéØ –°–∏–ª–∞: {best_signal.signal_strength:.1f}%")
            print(f"   üìä ADX: {best_signal.adx:.1f}, DI —Ä–∞–∑–Ω–æ—Å—Ç—å: {best_signal.plus_di - best_signal.minus_di:.1f}")
        
        print(f"\nü§ñ –ö–û–î –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
        print(f"   # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è")
        print(f"   if adx > 23.0 and price > ema20 and di_plus > di_minus:")
        print(f"       # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞")
        print(f"       if adx > 30.0 and (di_plus - di_minus) > 5.0:")
        print(f"           signal_strength = 'HIGH'")
        print(f"       elif adx > 25.0 and (di_plus - di_minus) > 2.0:")
        print(f"           signal_strength = 'MEDIUM'")
        print(f"       else:")
        print(f"           signal_strength = 'LOW'")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
    
    TINKOFF_TOKEN = os.getenv('TINKOFF_TOKEN')
    
    if not TINKOFF_TOKEN:
        logger.error("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    try:
        analyzer = StrategyAnalyzer(TINKOFF_TOKEN)
        signals = await analyzer.run_analysis(days=21)
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ 1H —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
