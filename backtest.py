#!/usr/bin/env python3
"""
optimizer.py - –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ SBER –Ω–∞ Railway
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import logging
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)  # –í—ã–≤–æ–¥ –≤ Railway –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv('TINKOFF_TOKEN')
    if not token:
        logger.error("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logger.error("üí° –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ Railway:")
        logger.error("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –≤ Railway")
        logger.error("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Variables")
        logger.error("   3. –î–æ–±–∞–≤—å—Ç–µ TINKOFF_TOKEN = –≤–∞—à_—Ç–æ–∫–µ–Ω")
        return False
    
    logger.info("‚úÖ TINKOFF_TOKEN –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    python_version = sys.version_info
    logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {python_version.major}.{python_version.minor}")
    
    if python_version < (3, 8):
        logger.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Python 3.8+")
    
    return True

async def run_optimization():
    """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å –∏–º–ø–æ—Ä—Ç–æ–º"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º)
        logger.info("üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞...")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –ø–æ–º–µ—Å—Ç–∏–ª–∏ –∫–æ–¥ –≤—ã—à–µ –≤ —ç—Ç–æ—Ç –∂–µ —Ñ–∞–π–ª:
        from sber_optimizer_railway import EnhancedStrategyOptimizer
        
        # –ò–ª–∏ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª:
        # from enhanced_optimizer import EnhancedStrategyOptimizer
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = os.getenv('TINKOFF_TOKEN')
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞...")
        optimizer = EnhancedStrategyOptimizer(token)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é (60 –¥–Ω–µ–π –¥–ª—è Railway)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SBER...")
        results = await optimizer.run_optimization(test_days=60)
        
        if results:
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            optimizer.print_results(results, top_n=10)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            best = results[0]
            
            # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
            
            with open('best_strategy.txt', 'w') as f:
                f.write("# –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è SBER —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n")
                f.write(f"EMA_PERIOD = {best.params.ema_period}\n")
                f.write(f"ADX_THRESHOLD = {best.params.adx_threshold}\n")
                f.write(f"VOLUME_MULTIPLIER = {best.params.volume_multiplier}\n")
                
                if best.params.stop_loss_pct:
                    f.write(f"STOP_LOSS_PCT = {best.params.stop_loss_pct}\n")
                if best.params.take_profit_pct:
                    f.write(f"TAKE_PROFIT_PCT = {best.params.take_profit_pct}\n")
                if best.params.rsi_period:
                    f.write(f"RSI_PERIOD = {best.params.rsi_period}\n")
                    f.write(f"RSI_OVERBOUGHT = {best.params.rsi_overbought}\n")
                if best.params.avoid_lunch_time:
                    f.write("AVOID_LUNCH_TIME = True\n")
                
                f.write(f"\n# –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n")
                f.write(f"# –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {best.total_return:+.2f}%\n")
                f.write(f"# –í–∏–Ω—Ä–µ–π—Ç: {best.win_rate:.1f}%\n")
                f.write(f"# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {best.total_trades}\n")
            
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ best_strategy.txt")
            
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Railway"""
    print("üöÄ SBER Strategy Optimizer –¥–ª—è Railway")
    print("=" * 60)
    print("üìä –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("‚è±Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        sys.exit(1)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        asyncio.run(run_optimization())
        
    except KeyboardInterrupt:
        logger.info("üëã –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

# ===============================================
# –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø RAILWAY DEPLOYMENT:
# ===============================================
"""
1. –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê:
   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ optimizer.py
   - –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞)
   
2. –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–•:
   - TINKOFF_TOKEN = –≤–∞—à_—Ç–æ–∫–µ–Ω_—Ç–∏–Ω—å–∫–æ—Ñ—Ñ
   
3. –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–ü–£–°–ö–ê:
   - Start Command: python optimizer.py
   - Build Command: pip install -r requirements.txt
   
4. REQUIREMENTS.TXT:
   tinkoff-investments>=0.2.0b39
   pandas>=2.0.0
   numpy>=1.24.0
   asyncio
   
5. –ó–ê–ü–£–°–ö:
   - Deploy –≤ Railway
   - –ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
   - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ª–æ–≥–∞—Ö Railway
   
6. –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:
   - –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ Railway Dashboard
   - –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å
   - –§–∞–π–ª best_strategy.txt —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
"""
