#!/usr/bin/env python3
"""
–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
"""

from dataclasses import dataclass
from typing import Dict, List
import asyncio

@dataclass
class OptimizedTradeSetup:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏–∑ –±—ç–∫—Ç–µ—Å—Ç–∞:
    # 1. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ
    # 2. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    # 3. –ù—É–∂–Ω—ã –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏
    
    stop_loss_pct: float = -3.5        # –ß—É—Ç—å —à–∏—Ä–µ —Å—Ç–æ–ø—ã
    take_profit_pct: float = 4.0       # –ë–æ–ª–µ–µ –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Ü–µ–ª–∏
    partial_profit_pct: float = 2.0    # –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è
    partial_close_pct: float = 0.5     # –ó–∞–∫—Ä—ã–≤–∞–µ–º 50%
    max_hold_hours: int = 36           # –ö–æ—Ä–æ—á–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
    trailing_stop_pct: float = 1.5     # –¢–∞–π—Ç–µ—Ä —Ç—Ä–µ–π–ª–∏–Ω–≥
    commission_pct: float = 0.1        # –†–µ–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è

@dataclass 
class SmartFilters:
    """–£–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –ò–∑ –±—ç–∫—Ç–µ—Å—Ç–∞: —Å–∏–≥–Ω–∞–ª—ã 80-90% –ø–æ–∫–∞–∑–∞–ª–∏ –ª—É—á—à–∏–π –≤–∏–Ω—Ä–µ–π—Ç (75%)
    min_signal_strength: float = 80.0
    max_signal_strength: float = 92.0  # –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    avoid_late_friday: bool = True
    avoid_lunch_time: bool = True
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    min_adx: float = 35.0              # –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
    min_di_diff: float = 15.0          # –°–∏–ª—å–Ω–æ–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    max_ema_distance: float = 1.5      # –ù–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ç—Ä–µ–Ω–¥–∞

class OptimizedStrategy:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self, token: str):
        self.token = token
        self.setup = OptimizedTradeSetup()
        self.filters = SmartFilters()
    
    def filter_signals(self, signals: List[Dict]) -> List[Dict]:
        """–£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        filtered = []
        
        for signal in signals:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            if not self.passes_strength_filter(signal):
                continue
            if not self.passes_time_filter(signal):
                continue
            if not self.passes_technical_filter(signal):
                continue
                
            filtered.append(signal)
        
        print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered)} –∏–∑ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        return filtered
    
    def passes_strength_filter(self, signal: Dict) -> bool:
        """–§–∏–ª—å—Ç—Ä —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        strength = signal['strength']
        return (self.filters.min_signal_strength <= strength <= 
                self.filters.max_signal_strength)
    
    def passes_time_filter(self, signal: Dict) -> bool:
        """–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä"""
        timestamp = signal['timestamp']
        
        # –ò–∑–±–µ–≥–∞–µ–º –ø—è—Ç–Ω–∏—Ü—É –ø–æ—Å–ª–µ 16:00
        if (self.filters.avoid_late_friday and 
            timestamp.weekday() == 4 and timestamp.hour >= 16):
            return False
        
        # –ò–∑–±–µ–≥–∞–µ–º –æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if (self.filters.avoid_lunch_time and 
            13 <= timestamp.hour <= 14):
            return False
            
        return True
    
    def passes_technical_filter(self, signal: Dict) -> bool:
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä"""
        return (signal['adx'] >= self.filters.min_adx and
                signal['di_diff'] >= self.filters.min_di_diff)
    
    def calculate_position_size(self, signal: Dict, capital: float) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        
        strength = signal['strength']
        base_risk = 0.02  # 2% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ —Å–∏–ª–µ
        if strength >= 90:
            risk_multiplier = 1.5      # –ë–æ–ª—å—à–µ —Ä–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
        elif strength >= 85:
            risk_multiplier = 1.25
        elif strength >= 82:
            risk_multiplier = 1.0
        else:
            risk_multiplier = 0.75     # –ú–µ–Ω—å—à–µ —Ä–∏—Å–∫–∞ –Ω–∞ —Å–ª–∞–±—ã–µ
        
        risk_per_trade = capital * base_risk * risk_multiplier
        stop_distance = abs(self.setup.stop_loss_pct / 100)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
        shares = int(risk_per_trade / (signal['price'] * stop_distance))
        position_value = shares * signal['price']
        
        return {
            'shares': shares,
            'position_value': position_value,
            'risk_amount': risk_per_trade,
            'risk_multiplier': risk_multiplier
        }

async def test_optimized_strategy():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    import os
    from backtest_analyzer import BacktestEngine  # –ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞
    
    token = os.getenv('TINKOFF_TOKEN')
    if not token:
        print("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    opt_setup = OptimizedTradeSetup()
    engine = BacktestEngine(token, opt_setup)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
    all_signals = engine.generate_sample_signals()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    strategy = OptimizedStrategy(token)
    filtered_signals = strategy.filter_signals(all_signals)
    
    if not filtered_signals:
        print("‚ùå –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(filtered_signals)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    results = await engine.run_backtest(filtered_signals)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if results:
        analyze_optimization_results(results, filtered_signals)

def analyze_optimization_results(results, signals: List[Dict]):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    print(f"\n{'='*60}")
    print("üéØ –ê–ù–ê–õ–ò–ó –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
    print(f"{'='*60}")
    
    print(f"\nüìà –£–õ–£–ß–®–ï–ù–ò–Ø:")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    base_winrate = 40.0   # –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    base_return = 0.3
    
    improvement_winrate = results.win_rate - base_winrate
    improvement_return = results.total_return_pct - base_return
    
    print(f"   üìä –í–∏–Ω—Ä–µ–π—Ç: {results.win_rate:.1f}% ({improvement_winrate:+.1f}% vs –±–∞–∑–æ–≤–æ–π)")
    print(f"   üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results.total_return_pct:.1f}% ({improvement_return:+.1f}% vs –±–∞–∑–æ–≤–æ–π)")
    print(f"   üîß –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {80 - len(signals)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–ª–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–∏–≥–Ω–∞–ª–æ–≤
    strengths = [s['strength'] for s in signals]
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–• –°–ò–ì–ù–ê–õ–û–í:")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞: {sum(strengths)/len(strengths):.1f}%")
    print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min(strengths):.1f}%")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max(strengths):.1f}%")
    
    # –†–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞–ø–∏—Ç–∞–ª–æ–≤
    print(f"\nüíº –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –†–ê–ó–ú–ï–†–´ –ü–û–ó–ò–¶–ò–ô:")
    
    strategy = OptimizedStrategy("")
    
    for capital in [100_000, 500_000, 1_000_000]:
        total_risk = 0
        total_positions = 0
        
        for signal in signals[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            pos_calc = strategy.calculate_position_size(signal, capital)
            total_risk += pos_calc['risk_amount']
            total_positions += 1
        
        avg_position = total_risk / total_positions if total_positions > 0 else 0
        
        print(f"   üí∞ –ö–∞–ø–∏—Ç–∞–ª {capital:,}: —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ {avg_position:,.0f} —Ä—É–± –Ω–∞ —Å–¥–µ–ª–∫—É")
        print(f"      ‚îî‚îÄ –ü—Ä–∏ –≤–∏–Ω—Ä–µ–π—Ç–µ {results.win_rate:.1f}% –æ–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: "
              f"{(avg_position * results.average_trade_pct / 100):+,.0f} —Ä—É–±")

def create_trading_plan():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞"""
    
    plan = f"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–û–†–ì–û–í–´–ô –ü–õ–ê–ù - SBER 1H (–Ω–∞ –æ—Å–Ω–æ–≤–µ –±—ç–∫—Ç–µ—Å—Ç–∞)

üìã –§–ò–õ–¨–¢–†–´ –í–•–û–î–ê:
‚úÖ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: 80-92% (–∏–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏)
‚úÖ ADX ‚â• 35 (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥)
‚úÖ DI —Ä–∞–∑–Ω–æ—Å—Ç—å ‚â• 15 (–¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π)
‚úÖ –í—Ä–µ–º—è: –∏–∑–±–µ–≥–∞—Ç—å 13:00-14:00 –∏ –ø—è—Ç–Ω–∏—Ü—É –ø–æ—Å–ª–µ 16:00
‚úÖ –¶–µ–Ω–∞ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1.5% –≤—ã—à–µ EMA20

üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–õ–û–ú:
‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫: 2% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
‚Ä¢ –°–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (90%+): —Ä–∏—Å–∫ √ó 1.5
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã (85-90%): —Ä–∏—Å–∫ √ó 1.25  
‚Ä¢ –°–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã (80-85%): —Ä–∏—Å–∫ √ó 0.75

üéØ –¶–ï–õ–ò –ò –°–¢–û–ü–´ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):
‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: -3.5% (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è: +2% (50% –ø–æ–∑–∏—Ü–∏–∏)
‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: +4% (–¥–æ—Å—Ç–∏–∂–∏–º–æ)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ: 36 —á–∞—Å–æ–≤
‚Ä¢ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: 1.5% –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è +2%

üìä –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: ~55-65% (—É–ª—É—á—à–µ–Ω–∏–µ –∑–∞ —Å—á–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤)
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: +0.5-1.0% –Ω–∞ —Å–¥–µ–ª–∫—É
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: <15%
‚Ä¢ –°–¥–µ–ª–æ–∫ –≤ –º–µ—Å—è—Ü: 8-12 (–∫–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)

üí° –ü–°–ò–•–û–õ–û–ì–ò–Ø –¢–û–†–ì–û–í–õ–ò:
‚Ä¢ –ù–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥—Ä—è–¥
‚Ä¢ –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞–º
‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—É—é –ø—Ä–∏–±—ã–ª—å –Ω–∞ +2%
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å —Å—Ç–æ–ø—ã –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è
‚Ä¢ –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

üö® –ö–†–ê–°–ù–´–ï –§–õ–ê–ì–ò (–≤—ã—Ö–æ–¥–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ):
‚Ä¢ –†–µ–∑–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –°–±–µ—Ä—É
‚Ä¢ –û–±–≤–∞–ª —Ä—ã–Ω–∫–∞ –±–æ–ª–µ–µ 3%
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —É–±—ã—Ç–∫–æ–≤ (-6% –∫–∞–ø–∏—Ç–∞–ª–∞)

ü§ñ –ö–û–î –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:
if (signal_strength >= 80 and signal_strength <= 92 and
    adx >= 35 and di_diff >= 15 and
    not (13 <= hour <= 14) and
    not (weekday == 4 and hour >= 16)):
    
    risk_mult = get_risk_multiplier(signal_strength)
    position_size = calculate_position(capital, risk_mult)
    
    entry_price = current_price
    stop_loss = entry_price * 0.965
    partial_target = entry_price * 1.02
    full_target = entry_price * 1.04
    
    execute_trade(position_size, stop_loss, partial_target, full_target)
    """
    
    return plan

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    asyncio.run(test_optimized_strategy())
    
    # –ü–æ–∫–∞–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    print("\n" + "="*80)
    print(create_trading_plan())
