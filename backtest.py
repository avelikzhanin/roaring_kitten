import asyncio
import pandas as pd
import logging
from datetime import datetime, timedelta, timezone
from dataclasses import dataclass
from typing import List, Optional, Tuple
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from data_provider import TinkoffDataProvider
from indicators import TechnicalIndicators

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class Trade:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–¥–µ–ª–∫–∏"""
    entry_time: datetime
    entry_price: float
    exit_time: Optional[datetime] = None
    exit_price: Optional[float] = None
    signal_data: dict = None

    @property
    def duration_hours(self) -> float:
        """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ –≤ —á–∞—Å–∞—Ö"""
        if self.exit_time is not None:
            return (self.exit_time - self.entry_time).total_seconds() / 3600
        return 0

    @property
    def profit_pct(self) -> float:
        """–ü—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if self.exit_price is not None:
            return (self.exit_price - self.entry_price) / self.entry_price * 100
        return 0

    @property
    def profit_rub(self) -> float:
        """–ü—Ä–∏–±—ã–ª—å –≤ —Ä—É–±–ª—è—Ö –Ω–∞ 1 –∞–∫—Ü–∏—é"""
        if self.exit_price is not None:
            return self.exit_price - self.entry_price
        return 0

class BacktestEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self, data_provider: TinkoffDataProvider):
        self.data_provider = data_provider
        self.trades: List[Trade] = []
        self.current_position: Optional[Trade] = None
        
    async def run_backtest(self, hours_back: int = 2000) -> dict:
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        candles = await self.data_provider.get_candles(hours=hours_back)
        
        if len(candles) < 100:
            logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
            return {}
        
        df = self.data_provider.candles_to_dataframe(candles)
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        self.calculate_indicators(df)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        self.simulate_trading(df)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return self.analyze_results(df)
    
    def calculate_indicators(self, df: pd.DataFrame):
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        logger.info("üìà –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # EMA20
        ema20_list = TechnicalIndicators.calculate_ema(df['close'].tolist(), 20)
        df['ema20'] = ema20_list
        
        # ADX, +DI, -DI
        adx_data = TechnicalIndicators.calculate_adx(
            df['high'].tolist(), 
            df['low'].tolist(), 
            df['close'].tolist(), 
            14
        )
        
        df['adx'] = adx_data['adx']
        df['plus_di'] = adx_data['plus_di']
        df['minus_di'] = adx_data['minus_di']
        
        # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ 20 —á–∞—Å–æ–≤
        df['avg_volume_20'] = df['volume'].rolling(window=20, min_periods=1).mean()
        df['volume_ratio'] = df['volume'] / df['avg_volume_20']
        
        # –£—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        df['price_above_ema'] = df['close'] > df['ema20']
        df['strong_trend'] = df['adx'] > 23
        df['positive_direction'] = df['plus_di'] > df['minus_di']
        df['di_difference'] = (df['plus_di'] - df['minus_di']) > 5
        df['high_volume'] = df['volume_ratio'] > 1.47
        
        # –û–±—â–∏–π —Å–∏–≥–Ω–∞–ª
        df['buy_signal'] = (
            df['price_above_ema'] & 
            df['strong_trend'] & 
            df['positive_direction'] & 
            df['di_difference'] & 
            df['high_volume']
        ).fillna(False)
        
        logger.info(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã. –ù–∞–π–¥–µ–Ω–æ {df['buy_signal'].sum()} —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫—É–ø–∫–∏")
    
    def simulate_trading(self, df: pd.DataFrame):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        logger.info("üéØ –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        for i in range(1, len(df)):
            row = df.iloc[i]
            prev_row = df.iloc[i-1]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Ö–æ–¥–∞
            if not self.current_position and row['buy_signal'] and not prev_row['buy_signal']:
                # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
                self.current_position = Trade(
                    entry_time=row['timestamp'],
                    entry_price=row['close'],
                    signal_data={
                        'ema20': row['ema20'],
                        'adx': row['adx'],
                        'plus_di': row['plus_di'],
                        'minus_di': row['minus_di'],
                        'volume_ratio': row['volume_ratio']
                    }
                )
                logger.debug(f"üìà –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é: {row['timestamp']}, —Ü–µ–Ω–∞: {row['close']:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞
            elif self.current_position and not row['buy_signal'] and prev_row['buy_signal']:
                # –£—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è - –≤—ã—Ö–æ–¥–∏–º
                self.current_position.exit_time = row['timestamp']
                self.current_position.exit_price = row['close']
                
                self.trades.append(self.current_position)
                logger.debug(f"üìâ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {row['timestamp']}, —Ü–µ–Ω–∞: {row['close']:.2f}, –ø—Ä–∏–±—ã–ª—å: {self.current_position.profit_pct:.2f}%")
                
                self.current_position = None
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞
        if self.current_position:
            last_row = df.iloc[-1]
            self.current_position.exit_time = last_row['timestamp']
            self.current_position.exit_price = last_row['close']
            self.trades.append(self.current_position)
        
        logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(self.trades)}")
    
    def analyze_results(self, df: pd.DataFrame) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if not self.trades:
            logger.warning("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
        profits_pct = [trade.profit_pct for trade in self.trades]
        profits_rub = [trade.profit_rub for trade in self.trades]
        durations = [trade.duration_hours for trade in self.trades]
        
        # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –∏ —É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        profitable_trades = [p for p in profits_pct if p > 0]
        losing_trades = [p for p in profits_pct if p < 0]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_return_pct = sum(profits_pct)
        win_rate = len(profitable_trades) / len(self.trades) * 100
        avg_profit_pct = sum(profits_pct) / len(profits_pct)
        avg_duration = sum(durations) / len(durations)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        max_profit = max(profits_pct) if profits_pct else 0
        max_loss = min(profits_pct) if profits_pct else 0
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
        cumulative_returns = []
        running_return = 0
        for profit in profits_pct:
            running_return += profit
            cumulative_returns.append(running_return)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        peak = cumulative_returns[0]
        max_drawdown = 0
        for value in cumulative_returns:
            if value > peak:
                peak = value
            drawdown = (peak - value)
            if drawdown > max_drawdown:
                max_drawdown = drawdown
        
        results = {
            'total_trades': len(self.trades),
            'profitable_trades': len(profitable_trades),
            'losing_trades': len(losing_trades),
            'win_rate': win_rate,
            'total_return_pct': total_return_pct,
            'avg_return_pct': avg_profit_pct,
            'max_profit_pct': max_profit,
            'max_loss_pct': max_loss,
            'avg_duration_hours': avg_duration,
            'max_drawdown_pct': max_drawdown,
            'avg_profit_when_win': sum(profitable_trades) / len(profitable_trades) if profitable_trades else 0,
            'avg_loss_when_lose': sum(losing_trades) / len(losing_trades) if losing_trades else 0,
            'profit_factor': abs(sum(profitable_trades) / sum(losing_trades)) if losing_trades else float('inf'),
            'period_start': df.iloc[0]['timestamp'],
            'period_end': df.iloc[-1]['timestamp'],
            'total_hours': (df.iloc[-1]['timestamp'] - df.iloc[0]['timestamp']).total_seconds() / 3600
        }
        
        return results
    
    def print_results(self, results: dict):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if not results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê –°–¢–†–ê–¢–ï–ì–ò–ò SBER")
        print("="*60)
        
        # –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"üóìÔ∏è  –ü–µ—Ä–∏–æ–¥: {results['period_start'].strftime('%d.%m.%Y %H:%M')} - {results['period_end'].strftime('%d.%m.%Y %H:%M')}")
        print(f"‚è±Ô∏è  –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {results['total_hours']:.0f} —á–∞—Å–æ–≤ ({results['total_hours']/24:.1f} –¥–Ω–µ–π)")
        
        print("\n" + "-"*40)
        print("üìà –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò")
        print("-"*40)
        print(f"üíº –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {results['total_trades']}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {results['profitable_trades']} ({results['win_rate']:.1f}%)")
        print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {results['losing_trades']} ({100-results['win_rate']:.1f}%)")
        
        print(f"\nüí∞ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['total_return_pct']:+.2f}%")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ —Å–¥–µ–ª–∫—É: {results['avg_return_pct']:+.2f}%")
        print(f"‚è≥ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏: {results['avg_duration_hours']:.1f} —á–∞—Å–∞")
        
        print("\n" + "-"*40)  
        print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("-"*40)
        print(f"üöÄ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: +{results['max_profit_pct']:.2f}%")
        print(f"üí• –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {results['max_loss_pct']:+.2f}%")
        print(f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å (–ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ): +{results['avg_profit_when_win']:.2f}%")
        
        if results['avg_loss_when_lose'] != 0:
            print(f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ (–ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ): {results['avg_loss_when_lose']:+.2f}%")
        
        print(f"üéØ Profit Factor: {results['profit_factor']:.2f}")
        print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: -{results['max_drawdown_pct']:.2f}%")
        
        print("\n" + "-"*40)
        print("üìã –î–ï–¢–ê–õ–ò –°–î–ï–õ–û–ö")
        print("-"*40)
        
        for i, trade in enumerate(self.trades[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–¥–µ–ª–æ–∫
            entry_str = trade.entry_time.strftime('%d.%m %H:%M')
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ exit_time –∏ exit_price
            if trade.exit_time:
                exit_str = trade.exit_time.strftime('%d.%m %H:%M')
            else:
                exit_str = '---'
                
            if trade.exit_price is not None:
                exit_price_str = f"{trade.exit_price:.2f}"
            else:
                exit_price_str = "---"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ —á–∞—Å–æ–≤
            profit_str = f"{trade.profit_pct:+6.2f}" if trade.exit_price is not None else "  ---"
            duration_str = f"{trade.duration_hours:5.1f}" if trade.exit_time is not None else " ---"
            
            print(f"{i:2d}. {entry_str} | {trade.entry_price:.2f} ‚ÇΩ ‚Üí {exit_price_str} ‚ÇΩ | "
                  f"{profit_str}% | {duration_str}—á")
        
        if len(self.trades) > 10:
            print(f"... –∏ –µ—â–µ {len(self.trades) - 10} —Å–¥–µ–ª–æ–∫")
        
        print("\n" + "="*60)
        
        # –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if results['win_rate'] >= 60 and results['total_return_pct'] > 0:
            print("‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û–ö–ê–ó–´–í–ê–ï–¢ –•–û–†–û–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        elif results['total_return_pct'] > 0:
            print("üü° –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–†–ò–ë–´–õ–¨–ù–ê–Ø, –ù–û –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò") 
        else:
            print("‚ùå –°–¢–†–ê–¢–ï–ì–ò–Ø –£–ë–´–¢–û–ß–ù–ê–Ø, –ù–£–ñ–ù–ê –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–ê–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        
        print("="*60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Tinkoff
    tinkoff_token = os.getenv('TINKOFF_TOKEN')
    if not tinkoff_token:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TINKOFF_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        data_provider = TinkoffDataProvider(tinkoff_token)
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
        backtest_engine = BacktestEngine(data_provider)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π = 720 —á–∞—Å–æ–≤)
        results = await backtest_engine.run_backtest(hours_back=720)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        backtest_engine.print_results(results)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
