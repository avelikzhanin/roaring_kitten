#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SBER –¥–ª—è Railway
–í—Å–µ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ - –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""

import asyncio
import logging
import os
import sys
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Tuple, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã Tinkoff API
from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
from tinkoff.invest.utils import now

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class OptimizedParams:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    ema_period: int = 20
    adx_threshold: float = 23
    di_diff_threshold: float = 5
    volume_multiplier: float = 1.47
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    stop_loss_pct: Optional[float] = None
    take_profit_pct: Optional[float] = None
    trailing_stop_pct: Optional[float] = None
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    rsi_period: Optional[int] = None
    rsi_overbought: Optional[float] = None
    momentum_periods: Optional[int] = None
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    avoid_lunch_time: bool = False
    trading_hours_start: int = 10
    trading_hours_end: int = 18
    
    def __str__(self):
        base = f"EMA{self.ema_period}_ADX{self.adx_threshold}_VOL{self.volume_multiplier}"
        
        filters = []
        if self.stop_loss_pct:
            filters.append(f"SL{self.stop_loss_pct}")
        if self.take_profit_pct:
            filters.append(f"TP{self.take_profit_pct}")
        if self.rsi_period:
            filters.append(f"RSI{self.rsi_period}")
        if self.avoid_lunch_time:
            filters.append("NoLunch")
            
        if filters:
            return f"{base}_{'_'.join(filters)}"
        return base

@dataclass 
class OptimizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    params: OptimizedParams
    total_return: float
    win_rate: float
    total_trades: int
    profitable_trades: int
    avg_return_per_trade: float
    max_drawdown: float
    avg_trade_duration_hours: float
    sharpe_ratio: float
    max_consecutive_losses: int
    
    def overall_score(self) -> float:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return_score = min(self.total_return / 10, 10)
        winrate_score = self.win_rate / 10
        trades_score = min(self.total_trades / 5, 5)
        drawdown_penalty = max(0, abs(self.max_drawdown) / 2)
        
        return return_score * 0.4 + winrate_score * 0.3 + trades_score * 0.2 - drawdown_penalty * 0.1

class DataProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö Tinkoff"""
    
    def __init__(self, token: str):
        self.token = token
        self.figi = "BBG004730N88"  # SBER
    
    async def get_candles(self, hours: int = 300) -> List[HistoricCandle]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with Client(self.token) as client:
                to_time = now()
                from_time = to_time - timedelta(hours=hours)
                
                logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö SBER —Å {from_time.strftime('%d.%m %H:%M')} –ø–æ {to_time.strftime('%d.%m %H:%M')}")
                
                response = client.market_data.get_candles(
                    figi=self.figi,
                    from_=from_time,
                    to=to_time,
                    interval=CandleInterval.CANDLE_INTERVAL_HOUR
                )
                
                if response.candles:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(response.candles)} —Å–≤–µ—á–µ–π")
                    return response.candles
                else:
                    logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def candles_to_dataframe(self, candles: List[HistoricCandle]) -> pd.DataFrame:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame"""
        if not candles:
            return pd.DataFrame()
        
        data = []
        for candle in candles:
            try:
                data.append({
                    'timestamp': candle.time,
                    'open': self.quotation_to_decimal(candle.open),
                    'high': self.quotation_to_decimal(candle.high),
                    'low': self.quotation_to_decimal(candle.low),
                    'close': self.quotation_to_decimal(candle.close),
                    'volume': candle.volume
                })
            except Exception as e:
                continue
        
        if not data:
            return pd.DataFrame()
        
        df = pd.DataFrame(data)
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        df = df.sort_values('timestamp').reset_index(drop=True)
        df = df.drop_duplicates(subset=['timestamp'], keep='last')
        
        return df
    
    @staticmethod
    def quotation_to_decimal(quotation) -> float:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ quotation –≤ decimal"""
        try:
            return float(quotation.units + quotation.nano / 1e9)
        except (AttributeError, TypeError):
            return 0.0

class TechnicalIndicators:
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        """EMA"""
        if len(prices) < period:
            return [np.nan] * len(prices)
        
        series = pd.Series(prices)
        ema = series.ewm(span=period, adjust=False).mean()
        return ema.tolist()
    
    @staticmethod
    def calculate_rsi(prices: List[float], period: int = 14) -> List[float]:
        """RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
        if len(prices) < period + 1:
            return [np.nan] * len(prices)
        
        df = pd.DataFrame({'price': prices})
        df['change'] = df['price'].diff()
        df['gain'] = df['change'].where(df['change'] > 0, 0)
        df['loss'] = (-df['change']).where(df['change'] < 0, 0)
        
        df['avg_gain'] = df['gain'].ewm(alpha=1/period, adjust=False).mean()
        df['avg_loss'] = df['loss'].ewm(alpha=1/period, adjust=False).mean()
        
        df['rs'] = df['avg_gain'] / df['avg_loss']
        df['rsi'] = 100 - (100 / (1 + df['rs']))
        
        return df['rsi'].fillna(np.nan).tolist()

    @staticmethod
    def calculate_momentum(prices: List[float], periods: int) -> List[float]:
        """Momentum –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
        if len(prices) < periods:
            return [np.nan] * len(prices)
        
        momentum = []
        for i in range(len(prices)):
            if i < periods:
                momentum.append(np.nan)
            else:
                mom = (prices[i] - prices[i - periods]) / prices[i - periods] * 100
                momentum.append(mom)
        
        return momentum
    
    @staticmethod
    def wilder_smoothing(values: pd.Series, period: int) -> pd.Series:
        """–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –£–∞–π–ª–¥–µ—Ä–∞"""
        result = pd.Series(index=values.index, dtype=float)
        first_avg = values.iloc[:period].mean()
        result.iloc[period-1] = first_avg
        
        for i in range(period, len(values)):
            result.iloc[i] = (result.iloc[i-1] * (period - 1) + values.iloc[i]) / period
        
        return result
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        """ADX —Ä–∞—Å—á–µ—Ç"""
        if len(highs) < period * 2:
            return {
                'adx': [np.nan] * len(highs), 
                'plus_di': [np.nan] * len(highs), 
                'minus_di': [np.nan] * len(highs)
            }
        
        df = pd.DataFrame({
            'high': highs,
            'low': lows,
            'close': closes
        })
        
        # True Range
        df['prev_close'] = df['close'].shift(1)
        df['hl'] = df['high'] - df['low']
        df['hc'] = abs(df['high'] - df['prev_close'])
        df['lc'] = abs(df['low'] - df['prev_close'])
        df['tr'] = df[['hl', 'hc', 'lc']].max(axis=1)
        
        # Directional Movement
        df['high_diff'] = df['high'] - df['high'].shift(1)
        df['low_diff'] = df['low'].shift(1) - df['low']
        
        df['plus_dm'] = np.where(
            (df['high_diff'] > df['low_diff']) & (df['high_diff'] > 0),
            df['high_diff'], 0
        )
        
        df['minus_dm'] = np.where(
            (df['low_diff'] > df['high_diff']) & (df['low_diff'] > 0),
            df['low_diff'], 0
        )
        
        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        df['atr'] = TechnicalIndicators.wilder_smoothing(df['tr'], period)
        df['plus_dm_smooth'] = TechnicalIndicators.wilder_smoothing(df['plus_dm'], period)
        df['minus_dm_smooth'] = TechnicalIndicators.wilder_smoothing(df['minus_dm'], period)
        
        # DI
        df['plus_di'] = (df['plus_dm_smooth'] / df['atr']) * 100
        df['minus_di'] = (df['minus_dm_smooth'] / df['atr']) * 100
        
        # DX –∏ ADX
        df['di_sum'] = df['plus_di'] + df['minus_di']
        df['di_diff'] = abs(df['plus_di'] - df['minus_di'])
        df['dx'] = np.where(df['di_sum'] != 0, (df['di_diff'] / df['di_sum']) * 100, 0)
        df['adx'] = TechnicalIndicators.wilder_smoothing(df['dx'], period)
        
        return {
            'adx': df['adx'].fillna(np.nan).tolist(),
            'plus_di': df['plus_di'].fillna(np.nan).tolist(),
            'minus_di': df['minus_di'].fillna(np.nan).tolist()
        }

class EnhancedStrategyOptimizer:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self, tinkoff_token: str):
        self.data_provider = DataProvider(tinkoff_token)
    
    async def run_optimization(self, test_days: int = 90) -> List[OptimizationResult]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SBER –∑–∞ {test_days} –¥–Ω–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        hours_needed = test_days * 24 + 200
        
        try:
            candles = await self.data_provider.get_candles(hours=hours_needed)
            
            if len(candles) < 100:
                logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return []
                
            df = self.data_provider.candles_to_dataframe(candles)
            
            if df.empty:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                return []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            parameter_combinations = self._generate_parameter_combinations()
            
            logger.info(f"üß™ –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {len(parameter_combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            results = []
            for i, params in enumerate(parameter_combinations, 1):
                try:
                    if i % 10 == 0:
                        logger.info(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(parameter_combinations)} ({i/len(parameter_combinations)*100:.1f}%)")
                    
                    result = await self._test_strategy_params(df, params, test_days)
                    if result:
                        results.append(result)
                        
                except Exception as e:
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
            results.sort(key=lambda x: x.overall_score(), reverse=True)
            
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return []
    
    def _generate_parameter_combinations(self) -> List[OptimizedParams]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        combinations = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è Railway)
        ema_periods = [15, 20, 25]
        adx_thresholds = [20, 23, 25, 28]
        volume_multipliers = [1.2, 1.47, 1.6, 1.8]
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        stop_losses = [None, 0.5, 0.8, 1.0]
        take_profits = [None, 1.2, 1.5, 2.0]
        
        # –§–∏–ª—å—Ç—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–æ)
        rsi_configs = [(None, None), (14, 70), (14, 65)]
        momentum_configs = [None, 3, 5]
        lunch_filters = [False, True]
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è Railway
        count = 0
        max_combinations = 100
        
        for ema in ema_periods:
            for adx in adx_thresholds[:3]:
                for vol in volume_multipliers[:3]:
                    for sl in stop_losses[:3]:
                        for tp in take_profits[:3]:
                            for rsi_period, rsi_thresh in rsi_configs:
                                for momentum in momentum_configs[:2]:
                                    for lunch_filter in lunch_filters:
                                        
                                        if count >= max_combinations:
                                            return combinations
                                        
                                        params = OptimizedParams(
                                            ema_period=ema,
                                            adx_threshold=adx,
                                            volume_multiplier=vol,
                                            stop_loss_pct=sl,
                                            take_profit_pct=tp,
                                            rsi_period=rsi_period,
                                            rsi_overbought=rsi_thresh,
                                            momentum_periods=momentum,
                                            avoid_lunch_time=lunch_filter
                                        )
                                        combinations.append(params)
                                        count += 1
        
        return combinations
    
    async def _test_strategy_params(self, df: pd.DataFrame, params: OptimizedParams, test_days: int) -> Optional[OptimizationResult]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            trades = self._simulate_trading(df, params, test_days)
            
            if not trades:
                return None
            
            return self._calculate_metrics(params, trades)
            
        except Exception as e:
            return None
    
    def _simulate_trading(self, df: pd.DataFrame, params: OptimizedParams, test_days: int) -> List[Dict]:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        closes = df['close'].tolist()
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        volumes = df['volume'].tolist()
        timestamps = df['timestamp'].tolist()
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        ema = TechnicalIndicators.calculate_ema(closes, params.ema_period)
        adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = []
        if params.rsi_period:
            rsi = TechnicalIndicators.calculate_rsi(closes, params.rsi_period)
        
        momentum = []
        if params.momentum_periods:
            momentum = TechnicalIndicators.calculate_momentum(closes, params.momentum_periods)
        
        # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
        df['avg_volume'] = df['volume'].rolling(window=20, min_periods=1).mean()
        avg_volumes = df['avg_volume'].tolist()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        test_start_time = timestamps[-1] - timedelta(days=test_days)
        test_start_idx = max(100, len(timestamps) // 3)
        
        for i in range(len(timestamps)):
            if timestamps[i] >= test_start_time:
                test_start_idx = max(test_start_idx, i)
                break
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        trades = []
        current_trade = None
        
        for i in range(test_start_idx, len(timestamps)):
            try:
                price = closes[i]
                timestamp = timestamps[i]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if (i >= len(ema) or i >= len(adx_data['adx']) or 
                    pd.isna(ema[i]) or pd.isna(adx_data['adx'][i])):
                    continue
                
                # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                conditions = [
                    price > ema[i],
                    adx_data['adx'][i] > params.adx_threshold,
                    adx_data['plus_di'][i] > adx_data['minus_di'][i],
                    adx_data['plus_di'][i] - adx_data['minus_di'][i] > params.di_diff_threshold,
                    volumes[i] > avg_volumes[i] * params.volume_multiplier
                ]
                
                # RSI —Ñ–∏–ª—å—Ç—Ä
                if params.rsi_period and i < len(rsi) and not pd.isna(rsi[i]):
                    conditions.append(rsi[i] < params.rsi_overbought)
                
                # Momentum —Ñ–∏–ª—å—Ç—Ä
                if params.momentum_periods and i < len(momentum) and not pd.isna(momentum[i]):
                    conditions.append(momentum[i] > 0)
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä (–æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
                if params.avoid_lunch_time:
                    hour = timestamp.hour
                    if 13 <= hour <= 15:
                        conditions.append(False)
                
                # –¢–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã
                hour = timestamp.hour
                if not (params.trading_hours_start <= hour <= params.trading_hours_end):
                    conditions.append(False)
                
                signal_active = all(conditions)
                
                # –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
                if signal_active and current_trade is None:
                    current_trade = {
                        'entry_time': timestamp,
                        'entry_price': price,
                        'highest_price': price
                    }
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π
                elif current_trade is not None:
                    current_trade['highest_price'] = max(current_trade['highest_price'], price)
                    
                    exit_reasons = []
                    
                    # –ë–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥
                    if not signal_active:
                        exit_reasons.append('signal_lost')
                    
                    # Stop Loss
                    if params.stop_loss_pct:
                        stop_price = current_trade['entry_price'] * (1 - params.stop_loss_pct/100)
                        if price <= stop_price:
                            exit_reasons.append('stop_loss')
                    
                    # Take Profit
                    if params.take_profit_pct:
                        tp_price = current_trade['entry_price'] * (1 + params.take_profit_pct/100)
                        if price >= tp_price:
                            exit_reasons.append('take_profit')
                    
                    # Trailing Stop
                    if params.trailing_stop_pct:
                        trail_price = current_trade['highest_price'] * (1 - params.trailing_stop_pct/100)
                        if price <= trail_price:
                            exit_reasons.append('trailing_stop')
                    
                    # –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
                    if exit_reasons:
                        profit_pct = ((price - current_trade['entry_price']) / current_trade['entry_price']) * 100
                        duration = (timestamp - current_trade['entry_time']).total_seconds() / 3600
                        
                        trades.append({
                            'entry_time': current_trade['entry_time'],
                            'exit_time': timestamp,
                            'entry_price': current_trade['entry_price'],
                            'exit_price': price,
                            'profit_pct': profit_pct,
                            'duration_hours': duration,
                            'exit_reason': exit_reasons[0]
                        })
                        
                        current_trade = None
                
            except Exception as e:
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é
        if current_trade is not None:
            profit_pct = ((closes[-1] - current_trade['entry_price']) / current_trade['entry_price']) * 100
            duration = (timestamps[-1] - current_trade['entry_time']).total_seconds() / 3600
            
            trades.append({
                'entry_time': current_trade['entry_time'],
                'exit_time': timestamps[-1],
                'entry_price': current_trade['entry_price'],
                'exit_price': closes[-1],
                'profit_pct': profit_pct,
                'duration_hours': duration,
                'exit_reason': 'end_of_data'
            })
        
        return trades
    
    def _calculate_metrics(self, params: OptimizedParams, trades: List[Dict]) -> OptimizationResult:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not trades:
            return OptimizationResult(
                params=params,
                total_return=0, win_rate=0, total_trades=0, profitable_trades=0,
                avg_return_per_trade=0, max_drawdown=0, avg_trade_duration_hours=0,
                sharpe_ratio=0, max_consecutive_losses=0
            )
        
        profits = [t['profit_pct'] for t in trades]
        profitable = [p for p in profits if p > 0]
        durations = [t['duration_hours'] for t in trades]
        
        total_return = sum(profits)
        win_rate = len(profitable) / len(profits) * 100 if profits else 0
        avg_return = np.mean(profits) if profits else 0
        max_drawdown = min(profits) if profits else 0
        avg_duration = np.mean(durations) if durations else 0
        
        # Sharpe Ratio
        if len(profits) > 1 and np.std(profits) > 0:
            sharpe_ratio = avg_return / np.std(profits)
        else:
            sharpe_ratio = 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤
        consecutive_losses = 0
        max_consecutive_losses = 0
        for profit in profits:
            if profit < 0:
                consecutive_losses += 1
            else:
                max_consecutive_losses = max(max_consecutive_losses, consecutive_losses)
                consecutive_losses = 0
        max_consecutive_losses = max(max_consecutive_losses, consecutive_losses)
        
        return OptimizationResult(
            params=params,
            total_return=total_return,
            win_rate=win_rate,
            total_trades=len(trades),
            profitable_trades=len(profitable),
            avg_return_per_trade=avg_return,
            max_drawdown=max_drawdown,
            avg_trade_duration_hours=avg_duration,
            sharpe_ratio=sharpe_ratio,
            max_consecutive_losses=max_consecutive_losses
        )
    
    def print_results(self, results: List[OptimizationResult], top_n: int = 10):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        print(f"\n{'='*80}")
        print(f"üèÜ –¢–û–ü-{top_n} –û–ü–¢–ò–ú–ê–õ–¨–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô SBER")
        print(f"{'='*80}")
        
        for i, result in enumerate(results[:top_n], 1):
            params = result.params
            
            print(f"\n{i:2d}. –û–¶–ï–ù–ö–ê: {result.overall_score():.2f} | –î–û–•–û–î–ù–û–°–¢–¨: {result.total_return:+.2f}%")
            print(f"    üìä –í–∏–Ω—Ä–µ–π—Ç: {result.win_rate:.1f}% | –°–¥–µ–ª–æ–∫: {result.total_trades}")
            print(f"    ‚öôÔ∏è EMA: {params.ema_period} | ADX: {params.adx_threshold} | –û–±—ä–µ–º: √ó{params.volume_multiplier}")
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
            risk_params = []
            if params.stop_loss_pct:
                risk_params.append(f"SL: -{params.stop_loss_pct}%")
            if params.take_profit_pct:
                risk_params.append(f"TP: +{params.take_profit_pct}%")
            
            if risk_params:
                print(f"    üõ°Ô∏è –†–∏—Å–∫–∏: {' | '.join(risk_params)}")
            
            # –§–∏–ª—å—Ç—Ä—ã
            filters = []
            if params.rsi_period:
                filters.append(f"RSI({params.rsi_period})<{params.rsi_overbought}")
            if params.avoid_lunch_time:
                filters.append("–ë–µ–∑ –æ–±–µ–¥–∞")
                
            if filters:
                print(f"    üéØ –§–∏–ª—å—Ç—Ä—ã: {' | '.join(filters)}")
            
            print(f"    üìà –°—Ä–µ–¥–Ω—è—è: {result.avg_return_per_trade:+.2f}% | –ü—Ä–æ—Å–∞–¥–∫–∞: {result.max_drawdown:.2f}%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n{'='*80}")
        print("üí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        best = results[0]
        print(f"üéØ –õ–£–ß–®–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø (–æ—Ü–µ–Ω–∫–∞: {best.overall_score():.2f}):")
        print(f"   ‚Ä¢ EMA –ø–µ—Ä–∏–æ–¥: {best.params.ema_period}")
        print(f"   ‚Ä¢ ADX –ø–æ—Ä–æ–≥: {best.params.adx_threshold}")  
        print(f"   ‚Ä¢ –û–±—ä–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å: {best.params.volume_multiplier}")
        
        if best.params.stop_loss_pct:
            print(f"   ‚Ä¢ Stop Loss: -{best.params.stop_loss_pct}%")
        if best.params.take_profit_pct:
            print(f"   ‚Ä¢ Take Profit: +{best.params.take_profit_pct}%")
        if best.params.rsi_period:
            print(f"   ‚Ä¢ RSI —Ñ–∏–ª—å—Ç—Ä: RSI({best.params.rsi_period}) < {best.params.rsi_overbought}")
        if best.params.avoid_lunch_time:
            print(f"   ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä: –ò–∑–±–µ–≥–∞—Ç—å 13:00-15:00")
        
        print(f"\nüìä –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {best.total_return:+.2f}%")
        print(f"   üé≤ –í–∏–Ω—Ä–µ–π—Ç: {best.win_rate:.1f}%")
        print(f"   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {best.total_trades}")
        print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {best.avg_trade_duration_hours:.1f}—á")
        
        # –ö–æ–¥ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
        print(f"\nüîß –ö–û–î –î–õ–Ø –í–ù–ï–î–†–ï–ù–ò–Ø –í –ë–û–¢:")
        print("=" * 50)
        print("# –ó–∞–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –≤–∞—à–µ–º –∫–æ–¥–µ –Ω–∞:")
        print(f"EMA_PERIOD = {best.params.ema_period}")
        print(f"ADX_THRESHOLD = {best.params.adx_threshold}")
        print(f"VOLUME_MULTIPLIER = {best.params.volume_multiplier}")
        
        if best.params.stop_loss_pct:
            print(f"STOP_LOSS_PCT = {best.params.stop_loss_pct}")
        if best.params.take_profit_pct:
            print(f"TAKE_PROFIT_PCT = {best.params.take_profit_pct}")
        if best.params.rsi_period:
            print(f"RSI_PERIOD = {best.params.rsi_period}")
            print(f"RSI_OVERBOUGHT = {best.params.rsi_overbought}")
        if best.params.avoid_lunch_time:
            print("AVOID_LUNCH_TIME = True  # –ò–∑–±–µ–≥–∞—Ç—å 13:00-15:00")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        print(f"\n‚ö†Ô∏è –í–ê–ñ–ù–û:")
        print("‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –º–∞–ª—ã—Ö —Å—É–º–º–∞—Ö")
        print("‚Ä¢ –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è")
        print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Railway"""
    print("üöÄ SBER Strategy Optimizer –¥–ª—è Railway")
    print("=" * 60)
    print("üìä –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("‚è±Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç...")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TINKOFF_TOKEN = os.getenv('TINKOFF_TOKEN')
    
    if not TINKOFF_TOKEN:
        logger.error("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.error("üîß –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ Railway: Settings ‚Üí Variables ‚Üí TINKOFF_TOKEN")
        sys.exit(1)
    
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        optimizer = EnhancedStrategyOptimizer(TINKOFF_TOKEN)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 60 –¥–Ω–µ–π –¥–ª—è Railway)
        test_days = 60
        logger.info(f"üî¨ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞ {test_days} –¥–Ω–µ–π...")
        
        results = await optimizer.run_optimization(test_days=test_days)
        
        if not results:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            return
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        optimizer.print_results(results, top_n=10)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        print(f"   üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(results)}")
        
        profitable = [r for r in results if r.total_return > 0]
        print(f"   üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {len(profitable)} ({len(profitable)/len(results)*100:.1f}%)")
        
        if profitable:
            avg_profitable = np.mean([r.total_return for r in profitable])
            print(f"   üìä –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {avg_profitable:.2f}%")
        
        high_winrate = [r for r in results if r.win_rate >= 60]
        print(f"   üéØ –° –≤–∏–Ω—Ä–µ–π—Ç–æ–º ‚â•60%: {len(high_winrate)}")
        
        logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    # –î–ª—è Railway
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
