#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –±—ç–∫—Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ SBER –¥–ª—è Railway
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤
"""

import os
import sys
import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional
import json
from dataclasses import dataclass, asdict
import logging
import traceback

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –±–µ–∑ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
os.environ['PYTHONUNBUFFERED'] = '1'
sys.stdout.reconfigure(line_buffering=True)
sys.stderr.reconfigure(line_buffering=True)

def force_print(msg: str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —Ñ–ª–µ—à–µ–º"""
    print(msg)
    sys.stdout.flush()
    sys.stderr.flush()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ],
    force=True
)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
for handler in logging.root.handlers:
    handler.setStream(sys.stdout)
    if hasattr(handler.stream, 'reconfigure'):
        handler.stream.reconfigure(line_buffering=True)

logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
force_print("üîç –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –ò–ú–ü–û–†–¢–û–í...")
force_print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
force_print(f"Pandas –≤–µ—Ä—Å–∏—è: {pd.__version__}")
force_print(f"Numpy –≤–µ—Ä—Å–∏—è: {np.__version__}")

try:
    from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
    from tinkoff.invest.utils import now
    TINKOFF_AVAILABLE = True
    force_print("‚úÖ tinkoff-investments –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    force_print(f"‚ö†Ô∏è tinkoff-investments –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    TINKOFF_AVAILABLE = False

@dataclass
class SignalData:
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞"""
    timestamp: str
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float
    di_diff: float
    signal_strength: float

def calculate_ema(prices: List[float], period: int = 20) -> List[float]:
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç EMA"""
    try:
        if len(prices) < period:
            return [np.nan] * len(prices)
        
        series = pd.Series(prices)
        ema = series.ewm(span=period, adjust=False).mean()
        return ema.fillna(np.nan).tolist()
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA: {e}")
        return [np.nan] * len(prices)

def calculate_adx_simple(highs: List[float], lows: List[float], closes: List[float], period: int = 14):
    """–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç ADX –ø–æ —Ñ–æ—Ä–º—É–ª–µ –£–∞–π–ª–¥–µ—Ä–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    try:
        n = len(highs)
        if n < period * 2:
            return [np.nan] * n, [np.nan] * n, [np.nan] * n
        
        # 1. True Range
        tr_list = []
        for i in range(n):
            if i == 0:
                tr = highs[i] - lows[i]
            else:
                hl = highs[i] - lows[i]
                hc = abs(highs[i] - closes[i-1])
                lc = abs(lows[i] - closes[i-1])
                tr = max(hl, hc, lc)
            tr_list.append(tr)
        
        # 2. Directional Movement
        plus_dm = []
        minus_dm = []
        
        for i in range(n):
            if i == 0:
                plus_dm.append(0)
                minus_dm.append(0)
            else:
                up_move = highs[i] - highs[i-1]
                down_move = lows[i-1] - lows[i]
                
                if up_move > down_move and up_move > 0:
                    plus_dm.append(up_move)
                    minus_dm.append(0)
                elif down_move > up_move and down_move > 0:
                    plus_dm.append(0)
                    minus_dm.append(down_move)
                else:
                    plus_dm.append(0)
                    minus_dm.append(0)
        
        # 3. –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –£–∞–π–ª–¥–µ—Ä–∞
        def smooth_wilder(values, period):
            result = [np.nan] * n
            
            # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ä–µ–¥–Ω–µ–µ
            if n >= period:
                result[period-1] = sum(values[:period]) / period
                
                # –î–∞–ª—å—à–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –£–∞–π–ª–¥–µ—Ä–∞
                for i in range(period, n):
                    result[i] = (result[i-1] * (period-1) + values[i]) / period
            
            return result
        
        # –°–≥–ª–∞–∂–∏–≤–∞–µ–º TR, +DM, -DM
        atr_smooth = smooth_wilder(tr_list, period)
        plus_dm_smooth = smooth_wilder(plus_dm, period)
        minus_dm_smooth = smooth_wilder(minus_dm, period)
        
        # 4. –†–∞—Å—á–µ—Ç +DI –∏ -DI
        plus_di = []
        minus_di = []
        dx_values = []
        
        for i in range(n):
            if i < period-1 or atr_smooth[i] == 0 or np.isnan(atr_smooth[i]):
                plus_di.append(np.nan)
                minus_di.append(np.nan)
                dx_values.append(np.nan)
            else:
                pdi = (plus_dm_smooth[i] / atr_smooth[i]) * 100
                mdi = (minus_dm_smooth[i] / atr_smooth[i]) * 100
                plus_di.append(pdi)
                minus_di.append(mdi)
                
                # DX = |+DI - -DI| / (+DI + -DI) * 100
                if (pdi + mdi) == 0:
                    dx_values.append(0)
                else:
                    dx = abs(pdi - mdi) / (pdi + mdi) * 100
                    dx_values.append(dx)
        
        # 5. ADX - —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ DX
        adx_values = smooth_wilder(dx_values, period)
        
        return adx_values, plus_di, minus_di
        
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ADX: {e}")
        traceback.print_exc()
        n = len(highs)
        return [np.nan] * n, [np.nan] * n, [np.nan] * n

def generate_test_data(days: int = 60) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        force_print(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {days} –¥–Ω–µ–π...")
        
        hours = days * 8
        timestamps = []
        base_time = datetime.now(timezone.utc) - timedelta(days=days)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        moscow_tz = timezone(timedelta(hours=3))
        base_time = base_time.replace(tzinfo=timezone.utc).astimezone(moscow_tz)
        
        for i in range(hours):
            timestamps.append(base_time + timedelta(hours=i))
        
        np.random.seed(42)
        base_price = 280.0
        prices = []
        
        for i in range(hours):
            if i == 0:
                prices.append(base_price)
            else:
                change = np.random.normal(0, 2)
                new_price = max(prices[-1] + change, 250)
                prices.append(new_price)
        
        highs = [p + np.random.uniform(0.5, 3) for p in prices]
        lows = [p - np.random.uniform(0.5, 3) for p in prices]
        volumes = [np.random.randint(1000000, 5000000) for _ in range(hours)]
        
        df = pd.DataFrame({
            'timestamp': timestamps,
            'open': prices,
            'high': highs,
            'low': lows,
            'close': prices,
            'volume': volumes
        })
        
        force_print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
        return df
        
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        traceback.print_exc()
        return pd.DataFrame()

async def get_real_data() -> pd.DataFrame:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    token = os.getenv('TINKOFF_TOKEN')
    
    if not token or not TINKOFF_AVAILABLE:
        force_print("üìù –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ tinkoff-investments –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return pd.DataFrame()
    
    try:
        force_print("üì° –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        with Client(token) as client:
            to_time = now()
            from_time = to_time - timedelta(days=30)  # 30 –¥–Ω–µ–π –≤–º–µ—Å—Ç–æ 200 —á–∞—Å–æ–≤
            
            response = client.market_data.get_candles(
                figi="BBG004730N88",  # SBER
                from_=from_time,
                to=to_time,
                interval=CandleInterval.CANDLE_INTERVAL_HOUR
            )
            
            if not response.candles:
                force_print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
                return pd.DataFrame()
            
            data = []
            for candle in response.candles:
                try:
                    price = float(candle.close.units + candle.close.nano / 1e9)
                    high = float(candle.high.units + candle.high.nano / 1e9)
                    low = float(candle.low.units + candle.low.nano / 1e9)
                    
                    data.append({
                        'timestamp': candle.time,
                        'open': price,
                        'high': high,
                        'low': low,
                        'close': price,
                        'volume': candle.volume
                    })
                except Exception as e:
                    force_print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏: {e}")
                    continue
            
            if not data:
                force_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return pd.DataFrame()
            
            df = pd.DataFrame(data)
            df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            df['timestamp'] = df['timestamp'].dt.tz_convert('Europe/Moscow')
            df = df.sort_values('timestamp').reset_index(drop=True)
            
            force_print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π")
            return df
            
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        traceback.print_exc()
        return pd.DataFrame()

def find_signals(df: pd.DataFrame) -> List[SignalData]:
    """–ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        force_print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        if df.empty:
            force_print("‚ùå –ü—É—Å—Ç–æ–π DataFrame")
            return []
        
        force_print("üìä –†–∞—Å—á–µ—Ç EMA20...")
        closes = df['close'].tolist()
        ema20_list = calculate_ema(closes, 20)
        
        force_print("üìä –†–∞—Å—á–µ—Ç ADX...")
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        adx_list, plus_di_list, minus_di_list = calculate_adx_simple(highs, lows, closes, 14)
        
        df['ema20'] = ema20_list
        df['adx'] = adx_list
        df['plus_di'] = plus_di_list
        df['minus_di'] = minus_di_list
        
        force_print("üéØ –ü–æ–∏—Å–∫ —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤...")
        signals = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        valid_rows = 0
        analyzed_rows = 0
        condition_stats = {
            'price_above_ema': 0,
            'adx_strong': 0,
            'bullish_di': 0,
            'all_conditions': 0
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        force_print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫:")
        last_rows = df.tail(10)
        for idx, row in last_rows.iterrows():
            if not (pd.isna(row['ema20']) or pd.isna(row['adx']) or 
                    pd.isna(row['plus_di']) or pd.isna(row['minus_di'])):
                price_above_ema = row['close'] > row['ema20']
                adx_strong = row['adx'] > 25
                bullish_di = row['plus_di'] > row['minus_di']
                
                force_print(f"  {row['timestamp'].strftime('%m-%d %H:%M')}: "
                          f"P={row['close']:.1f} EMA={row['ema20']:.1f} "
                          f"ADX={row['adx']:.1f} +DI={row['plus_di']:.1f} -DI={row['minus_di']:.1f}")
                force_print(f"    –£—Å–ª–æ–≤–∏—è: P>EMA={price_above_ema}, ADX>25={adx_strong}, +DI>-DI={bullish_di}")
        
        for i, row in df.iterrows():
            try:
                analyzed_rows += 1
                
                if (pd.isna(row['ema20']) or pd.isna(row['adx']) or 
                    pd.isna(row['plus_di']) or pd.isna(row['minus_di'])):
                    continue
                
                valid_rows += 1
                
                price_above_ema = row['close'] > row['ema20']
                adx_strong = row['adx'] > 25
                bullish_di = row['plus_di'] > row['minus_di']
                
                # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if price_above_ema: condition_stats['price_above_ema'] += 1
                if adx_strong: condition_stats['adx_strong'] += 1
                if bullish_di: condition_stats['bullish_di'] += 1
                if price_above_ema and adx_strong and bullish_di: condition_stats['all_conditions'] += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if valid_rows <= 5 or valid_rows % 100 == 0:  # –ø–µ—Ä–≤—ã–µ 5 –∏ –∫–∞–∂–¥—ã–µ 100 —Å—Ç—Ä–æ–∫
                    force_print(f"üìà –°—Ç—Ä–æ–∫–∞ {valid_rows}: ADX={row['adx']:.1f}, +DI={row['plus_di']:.1f}, -DI={row['minus_di']:.1f}")
                    force_print(f"    –£—Å–ª–æ–≤–∏—è: P>EMA={price_above_ema}, ADX>25={adx_strong}, +DI>-DI={bullish_di}")
                
                # –ü–æ–∫–∞–∂–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (2 –∏–∑ 3 —É—Å–ª–æ–≤–∏–π)
                conditions_met = sum([price_above_ema, adx_strong, bullish_di])
                
                if conditions_met >= 2:  # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    force_print(f"üü° –ë–õ–ò–ó–ö–ò–ô –°–ò–ì–ù–ê–õ: {row['timestamp'].strftime('%Y-%m-%d %H:%M')}")
                    force_print(f"    –¶–µ–Ω–∞>EMA: {price_above_ema}, ADX>25: {adx_strong}, +DI>-DI: {bullish_di}")
                    force_print(f"    –ó–Ω–∞—á–µ–Ω–∏—è: P={row['close']:.1f}, EMA={row['ema20']:.1f}, ADX={row['adx']:.1f}, +DI={row['plus_di']:.1f}, -DI={row['minus_di']:.1f}")
                
                if price_above_ema and adx_strong and bullish_di:
                    strength = 0
                    strength += min(row['adx'] / 50 * 40, 40)
                    strength += min((row['plus_di'] - row['minus_di']) / 20 * 30, 30)
                    strength += min(((row['close'] - row['ema20']) / row['ema20'] * 100) / 2 * 20, 20)
                    strength += 10
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    force_print(f"üîç –ù–ê–ô–î–ï–ù –°–ò–ì–ù–ê–õ: {row['timestamp'].strftime('%Y-%m-%d %H:%M')}")
                    force_print(f"    –¶–µ–Ω–∞: {row['close']:.2f}, EMA20: {row['ema20']:.2f}")
                    force_print(f"    ADX: {row['adx']:.1f}, +DI: {row['plus_di']:.1f}, -DI: {row['minus_di']:.1f}")
                    
                    signal = SignalData(
                        timestamp=row['timestamp'].strftime('%Y-%m-%d %H:%M MSK'),
                        price=round(row['close'], 2),
                        ema20=round(row['ema20'], 2),
                        adx=round(row['adx'], 2),
                        plus_di=round(row['plus_di'], 2),
                        minus_di=round(row['minus_di'], 2),
                        di_diff=round(row['plus_di'] - row['minus_di'], 2),
                        signal_strength=round(min(strength, 100), 1)
                    )
                    signals.append(signal)
                    
            except Exception as e:
                force_print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                continue
        
        force_print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:")
        force_print(f"    –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {analyzed_rows}")
        force_print(f"    –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {valid_rows}")
        force_print(f"    –¶–µ–Ω–∞ > EMA20: {condition_stats['price_above_ema']} ({condition_stats['price_above_ema']/max(valid_rows,1)*100:.1f}%)")
        force_print(f"    ADX > 25: {condition_stats['adx_strong']} ({condition_stats['adx_strong']/max(valid_rows,1)*100:.1f}%)")
        force_print(f"    +DI > -DI: {condition_stats['bullish_di']} ({condition_stats['bullish_di']/max(valid_rows,1)*100:.1f}%)")
        force_print(f"    –í—Å–µ —É—Å–ª–æ–≤–∏—è: {condition_stats['all_conditions']}")
        force_print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        return signals
        
    except Exception as e:
        force_print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        traceback.print_exc()
        return []

def print_results(signals: List[SignalData], total_candles: int, df: pd.DataFrame):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥ –∏ –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        force_print("\n" + "="*80)
        force_print("üéØ –°–ò–ì–ù–ê–õ–´ SBER")
        force_print("="*80)
        
        # –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        if not df.empty:
            start_time = df['timestamp'].min().strftime('%Y-%m-%d %H:%M MSK')
            end_time = df['timestamp'].max().strftime('%Y-%m-%d %H:%M MSK')
            force_print(f"\nüìÖ –ü–ï–†–ò–û–î: {start_time} - {end_time}")
            force_print(f"üìä –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {total_candles}")
        
        if len(signals) == 0:
            force_print(f"üìà –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: 0")
            force_print("\n‚ùå –°–ò–ì–ù–ê–õ–´ –ù–ï –ù–ê–ô–î–ï–ù–´")
            return
        
        force_print(f"üìà –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        force_print(f"\nüéØ –í–°–ï –°–ò–ì–ù–ê–õ–´:")
        force_print("="*80)
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        for i, signal in enumerate(signals, 1):
            force_print(f"\n{i:2d}. {signal.timestamp}")
            force_print(f"    üí∞ –¶–µ–Ω–∞: {signal.price:7.2f} ‚ÇΩ  |  EMA20: {signal.ema20:7.2f} ‚ÇΩ")
            force_print(f"    üìä ADX: {signal.adx:5.1f}  |  +DI: {signal.plus_di:5.1f}  |  -DI: {signal.minus_di:5.1f}")
            force_print(f"    üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal.signal_strength:5.1f}%")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_data = {
            'period_start': df['timestamp'].min().isoformat() if not df.empty else None,
            'period_end': df['timestamp'].max().isoformat() if not df.empty else None,
            'total_signals': len(signals),
            'total_candles': total_candles,
            'analysis_timestamp': datetime.now().isoformat(),
            'signals': [asdict(signal) for signal in signals]
        }
        
        with open('backtest_results.json', 'w', encoding='utf-8') as f:
            json.dump(results_data, f, ensure_ascii=False, indent=2)
        
        force_print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backtest_results.json")
        force_print("="*80)
        
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        traceback.print_exc()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        force_print("üöÄ –ó–ê–ü–£–°–ö SBER BACKTEST")
        force_print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
        force_print("-"*60)
        
        railway_env = os.getenv('RAILWAY_ENVIRONMENT')
        port = os.getenv('PORT', '8000')
        
        if railway_env:
            force_print(f"üöÇ Railway –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {railway_env}")
            force_print(f"üîå –ü–æ—Ä—Ç: {port}")
        else:
            force_print("üè† –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        
        force_print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df = await get_real_data()
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
        if df.empty:
            force_print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            df = generate_test_data(60)
        
        if df.empty:
            force_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        force_print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {len(df)} —Å–≤–µ—á–µ–π")
        force_print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['timestamp'].min()} - {df['timestamp'].max()}")
        
        # –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = find_signals(df)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_results(signals, len(df), df)
        
        force_print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –î–ª—è Railway - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
        # if railway_env:
        #     force_print(f"\nüöÇ –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º –¥–ª—è Railway...")
        #     
        #     count = 0
        #     while True:
        #         await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        #         count += 1
        #         force_print(f"üíì Heartbeat #{count}: {datetime.now().strftime('%H:%M:%S')}")
        #         
        #         # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        #         if count % 6 == 0:
        #             force_print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –Ω–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {len(df)} —Å–≤–µ—á–µ–π")
        
    except KeyboardInterrupt:
        force_print("\nüëã –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        force_print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç—É —á–∞—Å—Ç—å
        # railway_env = os.getenv('RAILWAY_ENVIRONMENT')
        # if railway_env:
        #     force_print("üöÇ –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞—Ç—å—Å—è –∂–∏–≤—ã–º–∏ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É...")
        #     try:
        #         while True:
        #             await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        #             force_print(f"üíî –ü—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π –∂–∏–≤: {datetime.now().strftime('%H:%M:%S')}")
        #     except:
        #         pass

if __name__ == "__main__":
    force_print("üéØ SBER BACKTEST - –°–¢–ê–†–¢")
    force_print(f"üêç Python: {sys.executable}")
    force_print(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}")
    force_print(f"üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: PORT={os.getenv('PORT')}, RAILWAY={os.getenv('RAILWAY_ENVIRONMENT')}")
    
    try:
        asyncio.run(main())
    except Exception as e:
        force_print(f"‚ùå –û—à–∏–±–∫–∞ asyncio.run: {e}")
        traceback.print_exc()
        sys.exit(1)
