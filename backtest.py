#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SBER —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ Trailing Stop
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã trailing stop –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
"""

import asyncio
import logging
import os
import sys
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Tuple, Optional
from dataclasses import dataclass
from enum import Enum

# –ò–º–ø–æ—Ä—Ç—ã Tinkoff API
from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
from tinkoff.invest.utils import now

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class TrailingStopType(Enum):
    """–¢–∏–ø—ã trailing stop"""
    FIXED = "fixed"                    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π %
    ADX_ADAPTIVE = "adx_adaptive"      # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–¥ —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
    PROFIT_STEPPED = "profit_stepped"  # –°—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–±—ã–ª–∏
    DYNAMIC = "dynamic"                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏

@dataclass
class TrailingStopConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Trailing Stop"""
    type: TrailingStopType
    base_percent: float = 1.0
    
    # –î–ª—è ADX –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ
    adx_strong_threshold: float = 35.0
    adx_weak_threshold: float = 25.0
    strong_trend_percent: float = 1.5
    weak_trend_percent: float = 0.7
    
    # –î–ª—è —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–≥–æ
    profit_levels: List[Tuple[float, float]] = None  # [(profit_threshold, trailing_percent)]
    
    # –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ
    atr_multiplier: float = 2.0
    
    def __post_init__(self):
        if self.profit_levels is None:
            self.profit_levels = [
                (0.5, 0.5),   # –ü—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ 0.5%+ ‚Üí trailing 0.5%
                (1.0, 0.8),   # –ü—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ 1.0%+ ‚Üí trailing 0.8%
                (2.0, 1.2),   # –ü—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ 2.0%+ ‚Üí trailing 1.2%
                (3.0, 1.8),   # –ü—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ 3.0%+ ‚Üí trailing 1.8%
            ]

@dataclass
class OptimizedParams:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    ema_period: int = 20
    adx_threshold: float = 23
    di_diff_threshold: float = 5
    volume_multiplier: float = 1.47
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    stop_loss_pct: Optional[float] = None
    take_profit_pct: Optional[float] = None
    
    # üéØ –ù–æ–≤—ã–π Trailing Stop
    trailing_config: Optional[TrailingStopConfig] = None
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    rsi_period: Optional[int] = None
    rsi_overbought: Optional[float] = None
    momentum_periods: Optional[int] = None
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    avoid_lunch_time: bool = False
    trading_hours_start: int = 10
    trading_hours_end: int = 18
    
    def __str__(self):
        base = f"EMA{self.ema_period}_ADX{self.adx_threshold}_VOL{self.volume_multiplier}"
        
        filters = []
        if self.stop_loss_pct:
            filters.append(f"SL{self.stop_loss_pct}")
        if self.take_profit_pct:
            filters.append(f"TP{self.take_profit_pct}")
        if self.trailing_config:
            filters.append(f"TS_{self.trailing_config.type.value}_{self.trailing_config.base_percent}")
        if self.rsi_period:
            filters.append(f"RSI{self.rsi_period}")
        if self.avoid_lunch_time:
            filters.append("NoLunch")
            
        if filters:
            return f"{base}_{'_'.join(filters)}"
        return base

@dataclass 
class OptimizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    params: OptimizedParams
    total_return: float
    win_rate: float
    total_trades: int
    profitable_trades: int
    avg_return_per_trade: float
    max_drawdown: float
    avg_trade_duration_hours: float
    sharpe_ratio: float
    max_consecutive_losses: int
    
    # üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è trailing stop
    max_profit_per_trade: float = 0
    avg_profit_on_winners: float = 0
    trailing_stop_exits: int = 0
    
    def overall_score(self) -> float:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return_score = min(self.total_return / 10, 15)
        winrate_score = self.win_rate / 8
        trades_score = min(self.total_trades / 5, 5)
        drawdown_penalty = max(0, abs(self.max_drawdown) / 2)
        
        # üéØ –ë–æ–Ω—É—Å –∑–∞ –∫—Ä—É–ø–Ω—ã–µ –ø—Ä–∏–±—ã–ª–∏
        big_profit_bonus = min(self.max_profit_per_trade / 2, 3)
        
        return (return_score * 0.4 + 
                winrate_score * 0.25 + 
                trades_score * 0.15 + 
                big_profit_bonus * 0.2 - 
                drawdown_penalty * 0.1)

class DataProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö Tinkoff"""
    
    def __init__(self, token: str):
        self.token = token
        self.figi = "BBG004730N88"  # SBER
    
    async def get_candles(self, hours: int = 300) -> List[HistoricCandle]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with Client(self.token) as client:
                to_time = now()
                from_time = to_time - timedelta(hours=hours)
                
                logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö SBER —Å {from_time.strftime('%d.%m %H:%M')} –ø–æ {to_time.strftime('%d.%m %H:%M')}")
                
                response = client.market_data.get_candles(
                    figi=self.figi,
                    from_=from_time,
                    to=to_time,
                    interval=CandleInterval.CANDLE_INTERVAL_HOUR
                )
                
                if response.candles:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(response.candles)} —Å–≤–µ—á–µ–π")
                    return response.candles
                else:
                    logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def candles_to_dataframe(self, candles: List[HistoricCandle]) -> pd.DataFrame:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame"""
        if not candles:
            return pd.DataFrame()
        
        data = []
        for candle in candles:
            try:
                data.append({
                    'timestamp': candle.time,
                    'open': self.quotation_to_decimal(candle.open),
                    'high': self.quotation_to_decimal(candle.high),
                    'low': self.quotation_to_decimal(candle.low),
                    'close': self.quotation_to_decimal(candle.close),
                    'volume': candle.volume
                })
            except Exception as e:
                continue
        
        if not data:
            return pd.DataFrame()
        
        df = pd.DataFrame(data)
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        df = df.sort_values('timestamp').reset_index(drop=True)
        df = df.drop_duplicates(subset=['timestamp'], keep='last')
        
        return df
    
    @staticmethod
    def quotation_to_decimal(quotation) -> float:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ quotation –≤ decimal"""
        try:
            return float(quotation.units + quotation.nano / 1e9)
        except (AttributeError, TypeError):
            return 0.0

class TechnicalIndicators:
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
    
    @staticmethod
    def calculate_ema(prices: List[float], period: int) -> List[float]:
        """EMA"""
        if len(prices) < period:
            return [np.nan] * len(prices)
        
        series = pd.Series(prices)
        ema = series.ewm(span=period, adjust=False).mean()
        return ema.tolist()
    
    @staticmethod
    def calculate_rsi(prices: List[float], period: int = 14) -> List[float]:
        """RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
        if len(prices) < period + 1:
            return [np.nan] * len(prices)
        
        df = pd.DataFrame({'price': prices})
        df['change'] = df['price'].diff()
        df['gain'] = df['change'].where(df['change'] > 0, 0)
        df['loss'] = (-df['change']).where(df['change'] < 0, 0)
        
        df['avg_gain'] = df['gain'].ewm(alpha=1/period, adjust=False).mean()
        df['avg_loss'] = df['loss'].ewm(alpha=1/period, adjust=False).mean()
        
        df['rs'] = df['avg_gain'] / df['avg_loss']
        df['rsi'] = 100 - (100 / (1 + df['rs']))
        
        return df['rsi'].fillna(np.nan).tolist()

    @staticmethod
    def calculate_atr(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> List[float]:
        """ATR –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ trailing stop"""
        if len(highs) < period + 1:
            return [np.nan] * len(highs)
        
        df = pd.DataFrame({
            'high': highs,
            'low': lows,
            'close': closes
        })
        
        df['prev_close'] = df['close'].shift(1)
        df['hl'] = df['high'] - df['low']
        df['hc'] = abs(df['high'] - df['prev_close'])
        df['lc'] = abs(df['low'] - df['prev_close'])
        df['tr'] = df[['hl', 'hc', 'lc']].max(axis=1)
        
        df['atr'] = df['tr'].rolling(window=period).mean()
        
        return df['atr'].fillna(np.nan).tolist()
    
    @staticmethod
    def wilder_smoothing(values: pd.Series, period: int) -> pd.Series:
        """–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –£–∞–π–ª–¥–µ—Ä–∞"""
        result = pd.Series(index=values.index, dtype=float)
        first_avg = values.iloc[:period].mean()
        result.iloc[period-1] = first_avg
        
        for i in range(period, len(values)):
            result.iloc[i] = (result.iloc[i-1] * (period - 1) + values.iloc[i]) / period
        
        return result
    
    @staticmethod
    def calculate_adx(highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> Dict:
        """ADX —Ä–∞—Å—á–µ—Ç"""
        if len(highs) < period * 2:
            return {
                'adx': [np.nan] * len(highs), 
                'plus_di': [np.nan] * len(highs), 
                'minus_di': [np.nan] * len(highs)
            }
        
        df = pd.DataFrame({
            'high': highs,
            'low': lows,
            'close': closes
        })
        
        # True Range
        df['prev_close'] = df['close'].shift(1)
        df['hl'] = df['high'] - df['low']
        df['hc'] = abs(df['high'] - df['prev_close'])
        df['lc'] = abs(df['low'] - df['prev_close'])
        df['tr'] = df[['hl', 'hc', 'lc']].max(axis=1)
        
        # Directional Movement
        df['high_diff'] = df['high'] - df['high'].shift(1)
        df['low_diff'] = df['low'].shift(1) - df['low']
        
        df['plus_dm'] = np.where(
            (df['high_diff'] > df['low_diff']) & (df['high_diff'] > 0),
            df['high_diff'], 0
        )
        
        df['minus_dm'] = np.where(
            (df['low_diff'] > df['high_diff']) & (df['low_diff'] > 0),
            df['low_diff'], 0
        )
        
        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        df['atr'] = TechnicalIndicators.wilder_smoothing(df['tr'], period)
        df['plus_dm_smooth'] = TechnicalIndicators.wilder_smoothing(df['plus_dm'], period)
        df['minus_dm_smooth'] = TechnicalIndicators.wilder_smoothing(df['minus_dm'], period)
        
        # DI
        df['plus_di'] = (df['plus_dm_smooth'] / df['atr']) * 100
        df['minus_di'] = (df['minus_dm_smooth'] / df['atr']) * 100
        
        # DX –∏ ADX
        df['di_sum'] = df['plus_di'] + df['minus_di']
        df['di_diff'] = abs(df['plus_di'] - df['minus_di'])
        df['dx'] = np.where(df['di_sum'] != 0, (df['di_diff'] / df['di_sum']) * 100, 0)
        df['adx'] = TechnicalIndicators.wilder_smoothing(df['dx'], period)
        
        return {
            'adx': df['adx'].fillna(np.nan).tolist(),
            'plus_di': df['plus_di'].fillna(np.nan).tolist(),
            'minus_di': df['minus_di'].fillna(np.nan).tolist()
        }

class TrailingStopManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Trailing Stop —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self, config: TrailingStopConfig):
        self.config = config
    
    def calculate_trailing_level(self, 
                               current_trade: Dict,
                               current_price: float,
                               current_adx: float = None,
                               current_atr: float = None) -> float:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è trailing stop"""
        
        entry_price = current_trade['entry_price']
        highest_price = current_trade['highest_price']
        current_profit = ((current_price - entry_price) / entry_price) * 100
        
        if self.config.type == TrailingStopType.FIXED:
            return highest_price * (1 - self.config.base_percent/100)
        
        elif self.config.type == TrailingStopType.ADX_ADAPTIVE:
            if current_adx is None:
                return highest_price * (1 - self.config.base_percent/100)
            
            if current_adx >= self.config.adx_strong_threshold:
                # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ - –¥–∞–µ–º –±–æ–ª—å—à–µ —Å–≤–æ–±–æ–¥—ã
                trailing_pct = self.config.strong_trend_percent
            elif current_adx <= self.config.adx_weak_threshold:
                # –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ - –∂–µ—Å—Ç—á–µ –¥–µ—Ä–∂–∏–º
                trailing_pct = self.config.weak_trend_percent
            else:
                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                ratio = (current_adx - self.config.adx_weak_threshold) / (
                    self.config.adx_strong_threshold - self.config.adx_weak_threshold)
                trailing_pct = (self.config.weak_trend_percent + 
                              (self.config.strong_trend_percent - self.config.weak_trend_percent) * ratio)
            
            return highest_price * (1 - trailing_pct/100)
        
        elif self.config.type == TrailingStopType.PROFIT_STEPPED:
            trailing_pct = self.config.base_percent
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            for profit_threshold, step_trailing_pct in sorted(self.config.profit_levels, reverse=True):
                if current_profit >= profit_threshold:
                    trailing_pct = step_trailing_pct
                    break
            
            return highest_price * (1 - trailing_pct/100)
        
        elif self.config.type == TrailingStopType.DYNAMIC:
            if current_atr is None:
                return highest_price * (1 - self.config.base_percent/100)
            
            # ATR-based trailing stop
            atr_distance = current_atr * self.config.atr_multiplier
            return highest_price - atr_distance
        
        else:
            return highest_price * (1 - self.config.base_percent/100)

class EnhancedTrailingOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ Trailing Stop"""
    
    def __init__(self, tinkoff_token: str):
        self.data_provider = DataProvider(tinkoff_token)
    
    async def run_optimization(self, test_days: int = 90) -> List[OptimizationResult]:
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ trailing stop"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Trailing Stop –¥–ª—è SBER –∑–∞ {test_days} –¥–Ω–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        hours_needed = test_days * 24 + 200
        
        try:
            candles = await self.data_provider.get_candles(hours=hours_needed)
            
            if len(candles) < 100:
                logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return []
                
            df = self.data_provider.candles_to_dataframe(candles)
            
            if df.empty:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                return []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ trailing stop
            parameter_combinations = self._generate_trailing_combinations()
            
            logger.info(f"üß™ –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {len(parameter_combinations)} trailing stop –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...")
            
            results = []
            for i, params in enumerate(parameter_combinations, 1):
                try:
                    if i % 5 == 0:
                        logger.info(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(parameter_combinations)} ({i/len(parameter_combinations)*100:.1f}%)")
                    
                    result = await self._test_strategy_params(df, params, test_days)
                    if result:
                        results.append(result)
                        
                except Exception as e:
                    continue
            
            results.sort(key=lambda x: x.overall_score(), reverse=True)
            
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return []
    
    def _generate_trailing_combinations(self) -> List[OptimizedParams]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ trailing stop"""
        combinations = []
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–∑ —Ç–≤–æ–∏—Ö –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        base_params = [
            (20, 23, 1.47),  # –¢–≤–æ–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ
            (25, 25, 1.6),   # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            (15, 20, 1.2)
        ]
        
        # üéØ –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Trailing Stop
        trailing_configs = [
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            TrailingStopConfig(TrailingStopType.FIXED, 0.5),
            TrailingStopConfig(TrailingStopType.FIXED, 0.8),
            TrailingStopConfig(TrailingStopType.FIXED, 1.0),
            TrailingStopConfig(TrailingStopType.FIXED, 1.2),
            TrailingStopConfig(TrailingStopType.FIXED, 1.5),
            
            # ADX –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ
            TrailingStopConfig(TrailingStopType.ADX_ADAPTIVE, 1.0, 
                             adx_strong_threshold=35, adx_weak_threshold=25, 
                             strong_trend_percent=1.8, weak_trend_percent=0.6),
            TrailingStopConfig(TrailingStopType.ADX_ADAPTIVE, 1.0,
                             adx_strong_threshold=30, adx_weak_threshold=20,
                             strong_trend_percent=1.5, weak_trend_percent=0.8),
            
            # –°—Ç—É–ø–µ–Ω—á–∞—Ç—ã–µ
            TrailingStopConfig(TrailingStopType.PROFIT_STEPPED, 1.0,
                             profit_levels=[(0.5, 0.5), (1.0, 0.8), (2.0, 1.2), (3.0, 1.8)]),
            TrailingStopConfig(TrailingStopType.PROFIT_STEPPED, 1.0,
                             profit_levels=[(0.8, 0.6), (1.5, 1.0), (2.5, 1.5), (4.0, 2.0)]),
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ (ATR-based)
            TrailingStopConfig(TrailingStopType.DYNAMIC, atr_multiplier=1.5),
            TrailingStopConfig(TrailingStopType.DYNAMIC, atr_multiplier=2.0),
        ]
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        risk_configs = [
            (None, None),        # –¢–æ–ª—å–∫–æ trailing
            (0.8, None),         # SL + trailing
            (None, 3.0),         # Trailing + –≤—ã—Å–æ–∫–∏–π TP
            (0.5, 2.5),          # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π
        ]
        
        for ema, adx, vol in base_params:
            for trailing_config in trailing_configs:
                for sl, tp in risk_configs:
                    
                    params = OptimizedParams(
                        ema_period=ema,
                        adx_threshold=adx,
                        volume_multiplier=vol,
                        stop_loss_pct=sl,
                        take_profit_pct=tp,
                        trailing_config=trailing_config,
                        di_diff_threshold=5
                    )
                    combinations.append(params)
                    
                    if len(combinations) >= 120:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è Railway
                        return combinations
        
        return combinations
    
    async def _test_strategy_params(self, df: pd.DataFrame, params: OptimizedParams, test_days: int) -> Optional[OptimizationResult]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å trailing stop"""
        try:
            trades = self._simulate_trading_with_trailing(df, params, test_days)
            
            if not trades:
                return None
            
            return self._calculate_enhanced_metrics(params, trades)
            
        except Exception as e:
            return None
    
    def _simulate_trading_with_trailing(self, df: pd.DataFrame, params: OptimizedParams, test_days: int) -> List[Dict]:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º trailing stop"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        closes = df['close'].tolist()
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        volumes = df['volume'].tolist()
        timestamps = df['timestamp'].tolist()
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        ema = TechnicalIndicators.calculate_ema(closes, params.ema_period)
        adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
        atr = TechnicalIndicators.calculate_atr(highs, lows, closes, 14)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = []
        if params.rsi_period:
            rsi = TechnicalIndicators.calculate_rsi(closes, params.rsi_period)
        
        # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
        df['avg_volume'] = df['volume'].rolling(window=20, min_periods=1).mean()
        avg_volumes = df['avg_volume'].tolist()
        
        # üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trailing Stop –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        trailing_manager = None
        if params.trailing_config:
            trailing_manager = TrailingStopManager(params.trailing_config)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        test_start_time = timestamps[-1] - timedelta(days=test_days)
        test_start_idx = max(100, len(timestamps) // 3)
        
        for i in range(len(timestamps)):
            if timestamps[i] >= test_start_time:
                test_start_idx = max(test_start_idx, i)
                break
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        trades = []
        current_trade = None
        trailing_stop_exits = 0
        
        for i in range(test_start_idx, len(timestamps)):
            try:
                price = closes[i]
                timestamp = timestamps[i]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if (i >= len(ema) or i >= len(adx_data['adx']) or 
                    pd.isna(ema[i]) or pd.isna(adx_data['adx'][i])):
                    continue
                
                # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                conditions = [
                    price > ema[i],
                    adx_data['adx'][i] > params.adx_threshold,
                    adx_data['plus_di'][i] > adx_data['minus_di'][i],
                    adx_data['plus_di'][i] - adx_data['minus_di'][i] > params.di_diff_threshold,
                    volumes[i] > avg_volumes[i] * params.volume_multiplier
                ]
                
                # RSI —Ñ–∏–ª—å—Ç—Ä
                if params.rsi_period and i < len(rsi) and not pd.isna(rsi[i]):
                    conditions.append(rsi[i] < params.rsi_overbought)
                
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                if params.avoid_lunch_time:
                    hour = timestamp.hour
                    if 13 <= hour <= 15:
                        conditions.append(False)
                
                hour = timestamp.hour
                if not (params.trading_hours_start <= hour <= params.trading_hours_end):
                    conditions.append(False)
                
                signal_active = all(conditions)
                
                # –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
                if signal_active and current_trade is None:
                    current_trade = {
                        'entry_time': timestamp,
                        'entry_price': price,
                        'highest_price': price,
                        'trailing_stop_level': None
                    }
                
                # üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º trailing stop
                elif current_trade is not None:
                    current_trade['highest_price'] = max(current_trade['highest_price'], price)
                    
                    exit_reasons = []
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º trailing stop —É—Ä–æ–≤–µ–Ω—å
                    if trailing_manager:
                        current_adx = adx_data['adx'][i] if not pd.isna(adx_data['adx'][i]) else None
                        current_atr = atr[i] if i < len(atr) and not pd.isna(atr[i]) else None
                        
                        new_trailing_level = trailing_manager.calculate_trailing_level(
                            current_trade, price, current_adx, current_atr
                        )
                        
                        # Trailing stop –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è
                        if (current_trade['trailing_stop_level'] is None or 
                            new_trailing_level > current_trade['trailing_stop_level']):
                            current_trade['trailing_stop_level'] = new_trailing_level
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Ö–æ–¥–∞
                    
                    # 1. Trailing Stop
                    if (trailing_manager and current_trade['trailing_stop_level'] and 
                        price <= current_trade['trailing_stop_level']):
                        exit_reasons.append('trailing_stop')
                        trailing_stop_exits += 1
                    
                    # 2. –ë–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç trailing stop –∏–ª–∏ –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
                    elif not signal_active:
                        exit_reasons.append('signal_lost')
                    
                    # 3. Stop Loss (–∂–µ—Å—Ç–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
                    if params.stop_loss_pct:
                        stop_price = current_trade['entry_price'] * (1 - params.stop_loss_pct/100)
                        if price <= stop_price:
                            exit_reasons = ['stop_loss']  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, SL –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
                    
                    # 4. Take Profit (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
                    if params.take_profit_pct:
                        tp_price = current_trade['entry_price'] * (1 + params.take_profit_pct/100)
                        if price >= tp_price:
                            exit_reasons.append('take_profit')
                    
                    # –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
                    if exit_reasons:
                        profit_pct = ((price - current_trade['entry_price']) / current_trade['entry_price']) * 100
                        duration = (timestamp - current_trade['entry_time']).total_seconds() / 3600
                        
                        trades.append({
                            'entry_time': current_trade['entry_time'],
                            'exit_time': timestamp,
                            'entry_price': current_trade['entry_price'],
                            'exit_price': price,
                            'highest_price': current_trade['highest_price'],
                            'profit_pct': profit_pct,
                            'duration_hours': duration,
                            'exit_reason': exit_reasons[0],
                            'trailing_stop_used': trailing_manager is not None,
                            'max_potential_profit': ((current_trade['highest_price'] - current_trade['entry_price']) / current_trade['entry_price']) * 100
                        })
                        
                        current_trade = None
                
            except Exception as e:
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ –¥–∞–Ω–Ω—ã—Ö
        if current_trade is not None:
            profit_pct = ((closes[-1] - current_trade['entry_price']) / current_trade['entry_price']) * 100
            duration = (timestamps[-1] - current_trade['entry_time']).total_seconds() / 3600
            max_potential = ((current_trade['highest_price'] - current_trade['entry_price']) / current_trade['entry_price']) * 100
            
            trades.append({
                'entry_time': current_trade['entry_time'],
                'exit_time': timestamps[-1],
                'entry_price': current_trade['entry_price'],
                'exit_price': closes[-1],
                'highest_price': current_trade['highest_price'],
                'profit_pct': profit_pct,
                'duration_hours': duration,
                'exit_reason': 'end_of_data',
                'trailing_stop_used': trailing_manager is not None,
                'max_potential_profit': max_potential
            })
        
        return trades
    
    def _calculate_enhanced_metrics(self, params: OptimizedParams, trades: List[Dict]) -> OptimizationResult:
        """–†–∞—Å—á–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º trailing stop"""
        if not trades:
            return OptimizationResult(
                params=params,
                total_return=0, win_rate=0, total_trades=0, profitable_trades=0,
                avg_return_per_trade=0, max_drawdown=0, avg_trade_duration_hours=0,
                sharpe_ratio=0, max_consecutive_losses=0,
                max_profit_per_trade=0, avg_profit_on_winners=0, trailing_stop_exits=0
            )
        
        profits = [t['profit_pct'] for t in trades]
        profitable = [p for p in profits if p > 0]
        durations = [t['duration_hours'] for t in trades]
        max_potentials = [t.get('max_potential_profit', 0) for t in trades]
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_return = sum(profits)
        win_rate = len(profitable) / len(profits) * 100 if profits else 0
        avg_return = np.mean(profits) if profits else 0
        max_drawdown = min(profits) if profits else 0
        avg_duration = np.mean(durations) if durations else 0
        
        # Sharpe Ratio
        if len(profits) > 1 and np.std(profits) > 0:
            sharpe_ratio = avg_return / np.std(profits)
        else:
            sharpe_ratio = 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤
        consecutive_losses = 0
        max_consecutive_losses = 0
        for profit in profits:
            if profit < 0:
                consecutive_losses += 1
            else:
                max_consecutive_losses = max(max_consecutive_losses, consecutive_losses)
                consecutive_losses = 0
        max_consecutive_losses = max(max_consecutive_losses, consecutive_losses)
        
        # üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è trailing stop
        max_profit_per_trade = max(profits) if profits else 0
        avg_profit_on_winners = np.mean(profitable) if profitable else 0
        trailing_stop_exits = len([t for t in trades if t.get('exit_reason') == 'trailing_stop'])
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ trailing stop
        avg_max_potential = np.mean(max_potentials) if max_potentials else 0
        
        return OptimizationResult(
            params=params,
            total_return=total_return,
            win_rate=win_rate,
            total_trades=len(trades),
            profitable_trades=len(profitable),
            avg_return_per_trade=avg_return,
            max_drawdown=max_drawdown,
            avg_trade_duration_hours=avg_duration,
            sharpe_ratio=sharpe_ratio,
            max_consecutive_losses=max_consecutive_losses,
            max_profit_per_trade=max_profit_per_trade,
            avg_profit_on_winners=avg_profit_on_winners,
            trailing_stop_exits=trailing_stop_exits
        )
    
    def print_trailing_results(self, results: List[OptimizationResult], top_n: int = 15):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º trailing stop"""
        if not results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        print(f"\n{'='*90}")
        print(f"üéØ –¢–û–ü-{top_n} TRAILING STOP –°–¢–†–ê–¢–ï–ì–ò–ô –î–õ–Ø SBER")
        print(f"{'='*90}")
        print(f"{'–†–∞–Ω–≥':<4} {'–û—Ü–µ–Ω–∫–∞':<6} {'–î–æ—Ö–æ–¥%':<8} {'–í–∏–Ω–†–µ–π—Ç':<8} {'–°–¥–µ–ª–æ–∫':<7} {'–ú–∞–∫—Å–ü—Ä–∏–±':<9} {'–¢–∏–ø Trailing':<15} {'–î–µ—Ç–∞–ª–∏':<20}")
        print("-" * 90)
        
        for i, result in enumerate(results[:top_n], 1):
            params = result.params
            trailing_type = "None"
            trailing_details = ""
            
            if params.trailing_config:
                trailing_type = params.trailing_config.type.value.title()
                
                if params.trailing_config.type == TrailingStopType.FIXED:
                    trailing_details = f"{params.trailing_config.base_percent}%"
                elif params.trailing_config.type == TrailingStopType.ADX_ADAPTIVE:
                    trailing_details = f"{params.trailing_config.weak_trend_percent}-{params.trailing_config.strong_trend_percent}%"
                elif params.trailing_config.type == TrailingStopType.PROFIT_STEPPED:
                    trailing_details = "Multi-level"
                elif params.trailing_config.type == TrailingStopType.DYNAMIC:
                    trailing_details = f"ATR√ó{params.trailing_config.atr_multiplier}"
            
            print(f"{i:<4} {result.overall_score():<6.2f} {result.total_return:<8.2f} "
                  f"{result.win_rate:<8.1f} {result.total_trades:<7} "
                  f"{result.max_profit_per_trade:<9.2f} {trailing_type:<15} {trailing_details:<20}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¢–û–ü-3
        print(f"\n{'='*90}")
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ü-3 –°–¢–†–ê–¢–ï–ì–ò–ô")
        print(f"{'='*90}")
        
        for i, result in enumerate(results[:3], 1):
            params = result.params
            
            print(f"\nüèÜ –ú–ï–°–¢–û {i} - –û–¶–ï–ù–ö–ê: {result.overall_score():.2f}")
            print(f"   üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
            print(f"       ‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result.total_return:+.2f}%")
            print(f"       ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {result.win_rate:.1f}% ({result.profitable_trades}/{result.total_trades})")
            print(f"       ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {result.avg_return_per_trade:+.3f}%")
            print(f"       ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞: {result.max_profit_per_trade:+.2f}%")
            print(f"       ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–∞—Ö: {result.avg_profit_on_winners:+.2f}%")
            print(f"       ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {result.max_drawdown:.2f}%")
            print(f"       ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.avg_trade_duration_hours:.1f}—á")
            
            print(f"   ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
            print(f"       ‚Ä¢ EMA –ø–µ—Ä–∏–æ–¥: {params.ema_period}")
            print(f"       ‚Ä¢ ADX –ø–æ—Ä–æ–≥: {params.adx_threshold}")
            print(f"       ‚Ä¢ –û–±—ä–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å: {params.volume_multiplier}")
            
            if params.stop_loss_pct:
                print(f"       ‚Ä¢ Stop Loss: -{params.stop_loss_pct}%")
            if params.take_profit_pct:
                print(f"       ‚Ä¢ Take Profit: +{params.take_profit_pct}%")
            
            # üéØ –ê–Ω–∞–ª–∏–∑ Trailing Stop
            if params.trailing_config:
                print(f"   üéØ Trailing Stop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
                print(f"       ‚Ä¢ –¢–∏–ø: {params.trailing_config.type.value.title()}")
                
                if params.trailing_config.type == TrailingStopType.FIXED:
                    print(f"       ‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {params.trailing_config.base_percent}%")
                
                elif params.trailing_config.type == TrailingStopType.ADX_ADAPTIVE:
                    print(f"       ‚Ä¢ –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ (ADX<{params.trailing_config.adx_weak_threshold}): {params.trailing_config.weak_trend_percent}%")
                    print(f"       ‚Ä¢ –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ (ADX>{params.trailing_config.adx_strong_threshold}): {params.trailing_config.strong_trend_percent}%")
                
                elif params.trailing_config.type == TrailingStopType.PROFIT_STEPPED:
                    print(f"       ‚Ä¢ –°—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞:")
                    for profit_thresh, trail_pct in params.trailing_config.profit_levels:
                        print(f"         - –ü—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ {profit_thresh}%+ ‚Üí trailing {trail_pct}%")
                
                elif params.trailing_config.type == TrailingStopType.DYNAMIC:
                    print(f"       ‚Ä¢ ATR –º–Ω–æ–∂–∏—Ç–µ–ª—å: {params.trailing_config.atr_multiplier}")
                
                print(f"       ‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –ø–æ trailing stop: {result.trailing_stop_exits}")
                if result.total_trades > 0:
                    trailing_ratio = result.trailing_stop_exits / result.total_trades * 100
                    print(f"       ‚Ä¢ –î–æ–ª—è trailing –≤—ã—Ö–æ–¥–æ–≤: {trailing_ratio:.1f}%")
            else:
                print(f"   üéØ Trailing Stop: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø")
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\n{'='*90}")
        print("üìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó TRAILING STOP –¢–ò–ü–û–í")
        print(f"{'='*90}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º trailing stop
        trailing_types = {}
        no_trailing = []
        
        for result in results:
            if result.params.trailing_config:
                ts_type = result.params.trailing_config.type.value
                if ts_type not in trailing_types:
                    trailing_types[ts_type] = []
                trailing_types[ts_type].append(result)
            else:
                no_trailing.append(result)
        
        print(f"üìä –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º:")
        
        if no_trailing:
            avg_return = np.mean([r.total_return for r in no_trailing])
            avg_winrate = np.mean([r.win_rate for r in no_trailing])
            avg_max_profit = np.mean([r.max_profit_per_trade for r in no_trailing])
            print(f"   ‚Ä¢ –ë–ï–ó TRAILING: {avg_return:+.2f}% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, {avg_winrate:.1f}% –≤–∏–Ω—Ä–µ–π—Ç, –º–∞–∫—Å {avg_max_profit:.2f}%")
        
        for ts_type, ts_results in trailing_types.items():
            if ts_results:
                avg_return = np.mean([r.total_return for r in ts_results])
                avg_winrate = np.mean([r.win_rate for r in ts_results])
                avg_max_profit = np.mean([r.max_profit_per_trade for r in ts_results])
                best_score = max([r.overall_score() for r in ts_results])
                print(f"   ‚Ä¢ {ts_type.upper()}: {avg_return:+.2f}% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, {avg_winrate:.1f}% –≤–∏–Ω—Ä–µ–π—Ç, –º–∞–∫—Å {avg_max_profit:.2f}%, –ª—É—á—à–∏–π {best_score:.2f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n{'='*90}")
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û TRAILING STOP")
        print(f"{'='*90}")
        
        best = results[0]
        
        if best.params.trailing_config:
            print(f"üéØ –õ–£–ß–®–ò–ô TRAILING STOP: {best.params.trailing_config.type.value.title()}")
            
            if best.params.trailing_config.type == TrailingStopType.FIXED:
                print(f"   üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π trailing stop {best.params.trailing_config.base_percent}%")
                print(f"   üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ü—Ä–æ—Å—Ç–æ—Ç–∞, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
                
            elif best.params.trailing_config.type == TrailingStopType.ADX_ADAPTIVE:
                print(f"   üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ADX-–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π trailing stop")
                print(f"       ‚Ä¢ –ü—Ä–∏ —Å–ª–∞–±–æ–º —Ç—Ä–µ–Ω–¥–µ: {best.params.trailing_config.weak_trend_percent}%")
                print(f"       ‚Ä¢ –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ: {best.params.trailing_config.strong_trend_percent}%")
                print(f"   üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Å–∏–ª–µ —Ç—Ä–µ–Ω–¥–∞, –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏")
                
            elif best.params.trailing_config.type == TrailingStopType.PROFIT_STEPPED:
                print(f"   üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π trailing stop")
                print(f"   üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ó–∞—â–∏—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö, –≥–∏–±–∫–æ—Å—Ç—å")
                
        else:
            print(f"‚ö†Ô∏è –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó trailing stop - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        
        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
        print(f"\nüîß –ö–û–î –î–õ–Ø –í–ù–ï–î–†–ï–ù–ò–Ø –õ–£–ß–®–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ò:")
        print("=" * 60)
        best_params = best.params
        
        print("# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"EMA_PERIOD = {best_params.ema_period}")
        print(f"ADX_THRESHOLD = {best_params.adx_threshold}")
        print(f"VOLUME_MULTIPLIER = {best_params.volume_multiplier}")
        print(f"DI_DIFF_THRESHOLD = {best_params.di_diff_threshold}")
        
        if best_params.stop_loss_pct:
            print(f"STOP_LOSS_PCT = {best_params.stop_loss_pct}")
        if best_params.take_profit_pct:
            print(f"TAKE_PROFIT_PCT = {best_params.take_profit_pct}")
            
        # –ö–æ–¥ trailing stop
        if best_params.trailing_config:
            tc = best_params.trailing_config
            print(f"\n# Trailing Stop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            print(f"TRAILING_TYPE = '{tc.type.value}'")
            
            if tc.type == TrailingStopType.FIXED:
                print(f"TRAILING_PERCENT = {tc.base_percent}")
                print("\n# –õ–æ–≥–∏–∫–∞ trailing stop:")
                print("def update_trailing_stop(highest_price, trailing_percent):")
                print("    return highest_price * (1 - trailing_percent/100)")
                
            elif tc.type == TrailingStopType.ADX_ADAPTIVE:
                print(f"ADX_STRONG_THRESHOLD = {tc.adx_strong_threshold}")
                print(f"ADX_WEAK_THRESHOLD = {tc.adx_weak_threshold}")
                print(f"STRONG_TREND_PERCENT = {tc.strong_trend_percent}")
                print(f"WEAK_TREND_PERCENT = {tc.weak_trend_percent}")
                
                print("\n# –õ–æ–≥–∏–∫–∞ ADX-–∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ trailing:")
                print("def calculate_trailing_percent(current_adx):")
                print("    if current_adx >= ADX_STRONG_THRESHOLD:")
                print("        return STRONG_TREND_PERCENT")
                print("    elif current_adx <= ADX_WEAK_THRESHOLD:")
                print("        return WEAK_TREND_PERCENT")
                print("    else:")
                print("        # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è")
                print("        ratio = (current_adx - ADX_WEAK_THRESHOLD) / (ADX_STRONG_THRESHOLD - ADX_WEAK_THRESHOLD)")
                print("        return WEAK_TREND_PERCENT + (STRONG_TREND_PERCENT - WEAK_TREND_PERCENT) * ratio")
                
            elif tc.type == TrailingStopType.PROFIT_STEPPED:
                print("PROFIT_LEVELS = [")
                for profit_thresh, trail_pct in tc.profit_levels:
                    print(f"    ({profit_thresh}, {trail_pct}),")
                print("]")
                
                print("\n# –õ–æ–≥–∏–∫–∞ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–≥–æ trailing:")
                print("def get_trailing_percent(current_profit):")
                print("    for profit_threshold, trailing_pct in sorted(PROFIT_LEVELS, reverse=True):")
                print("        if current_profit >= profit_threshold:")
                print("            return trailing_pct")
                print("    return 1.0  # –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å")
        
        print(f"\nüìä –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {best.total_return:+.2f}%")
        print(f"   üé≤ –í–∏–Ω—Ä–µ–π—Ç: {best.win_rate:.1f}%")
        print(f"   üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞: {best.max_profit_per_trade:+.2f}%")
        print(f"   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {best.total_trades}")
        print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {best.avg_trade_duration_hours:.1f}—á")
        
        if best.trailing_stop_exits > 0:
            trailing_efficiency = best.trailing_stop_exits / best.total_trades * 100
            print(f"   üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å trailing: {trailing_efficiency:.1f}% –≤—ã—Ö–æ–¥–æ–≤")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è trailing stop"""
    print("üéØ ENHANCED SBER TRAILING STOP OPTIMIZER")
    print("=" * 70)
    print("üìä –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ trailing stop –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏")
    print("‚è±Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 5-7 –º–∏–Ω—É—Ç...")
    print("=" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    TINKOFF_TOKEN = os.getenv('TINKOFF_TOKEN')
    
    if not TINKOFF_TOKEN:
        logger.error("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.error("üîß –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ Railway: Settings ‚Üí Variables ‚Üí TINKOFF_TOKEN")
        sys.exit(1)
    
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é trailing stop...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        optimizer = EnhancedTrailingOptimizer(TINKOFF_TOKEN)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        test_days = 90  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ trailing stop
        logger.info(f"üî¨ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ trailing stop –∑–∞ {test_days} –¥–Ω–µ–π...")
        
        results = await optimizer.run_optimization(test_days=test_days)
        
        if not results:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            return
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ trailing stop
        optimizer.print_trailing_results(results, top_n=15)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        print(f"   üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(results)}")
        
        with_trailing = [r for r in results if r.params.trailing_config]
        without_trailing = [r for r in results if not r.params.trailing_config]
        
        print(f"   üéØ –° trailing stop: {len(with_trailing)}")
        print(f"   ‚ö™ –ë–µ–∑ trailing stop: {len(without_trailing)}")
        
        if with_trailing and without_trailing:
            avg_with = np.mean([r.total_return for r in with_trailing])
            avg_without = np.mean([r.total_return for r in without_trailing])
            improvement = ((avg_with - avg_without) / abs(avg_without)) * 100 if avg_without != 0 else 0
            
            print(f"   üìä –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å trailing: {avg_with:+.2f}%")
            print(f"   üìä –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –±–µ–∑ trailing: {avg_without:+.2f}%")
            print(f"   üöÄ –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç trailing stop: {improvement:+.1f}%")
        
        profitable = [r for r in results if r.total_return > 0]
        print(f"   üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(profitable)} ({len(profitable)/len(results)*100:.1f}%)")
        
        if profitable:
            best_profit = max([r.max_profit_per_trade for r in profitable])
            avg_max_profit = np.mean([r.max_profit_per_trade for r in profitable])
            print(f"   üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞: {best_profit:.2f}%")
            print(f"   üìä –°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {avg_max_profit:.2f}%")
        
        logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è trailing stop –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
