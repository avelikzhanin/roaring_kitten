#!/usr/bin/env python3
"""
–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SBER –¥–ª—è Railway
–ó–∞–ø—É—Å–∫: python backtest.py
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import pandas as pd
from dataclasses import dataclass

from src.data_provider import TinkoffDataProvider
from src.indicators import TechnicalIndicators

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

@dataclass
class BacktestSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
    timestamp: datetime
    signal_type: str  # 'BUY' –∏–ª–∏ 'SELL'
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float
    volume: int
    volume_ratio: float

@dataclass
class Trade:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–¥–µ–ª–∫–∏"""
    entry_time: datetime
    entry_price: float
    exit_time: Optional[datetime] = None
    exit_price: Optional[float] = None
    profit_pct: Optional[float] = None
    duration_hours: Optional[int] = None

class StrategyBacktest:
    """–ö–ª–∞—Å—Å –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self, tinkoff_token: str):
        self.provider = TinkoffDataProvider(tinkoff_token)
        self.signals: List[BacktestSignal] = []
        self.trades: List[Trade] = []
        
    async def run_backtest(self, days: int = 60) -> Dict:
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ + –∑–∞–ø–∞—Å –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            hours_needed = days * 24 + 200  # +200 —á–∞—Å–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            candles = await self.provider.get_candles(hours=hours_needed)
            
            if len(candles) < 100:
                raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
                
            df = self.provider.candles_to_dataframe(candles)
            
            if df.empty:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É
            await self._analyze_data(df, days)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
            self._generate_trades()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self._calculate_statistics(days)
            
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
            return {}
    
    async def _analyze_data(self, df: pd.DataFrame, test_days: int):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_start = datetime.now() - timedelta(days=test_days)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        closes = df['close'].tolist()
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        volumes = df['volume'].tolist()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        logger.info("üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...")
        ema20 = TechnicalIndicators.calculate_ema(closes, 20)
        adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
        df['avg_volume_20'] = df['volume'].rolling(window=20, min_periods=1).mean()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ DataFrame
        df['ema20'] = ema20
        df['adx'] = adx_data['adx']
        df['plus_di'] = adx_data['plus_di']
        df['minus_di'] = adx_data['minus_di']
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–µ—Ä–∏–æ–¥—É
        df_test = df[df['timestamp'] >= test_start].copy()
        logger.info(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {len(df_test)} —Å–≤–µ—á–µ–π —Å {test_start.strftime('%d.%m.%Y')}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ
        current_signal_active = False
        signals_count = 0
        
        for i in range(len(df_test)):
            row = df_test.iloc[i]
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å NaN
            if pd.isna(row['adx']) or pd.isna(row['ema20']) or pd.isna(row['plus_di']) or pd.isna(row['minus_di']):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ)
            conditions = [
                row['close'] > row['ema20'],                    # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
                row['adx'] > 23,                               # ADX –±–æ–ª—å—à–µ 23
                row['plus_di'] > row['minus_di'],              # +DI –±–æ–ª—å—à–µ -DI
                row['plus_di'] - row['minus_di'] > 5,          # –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
                row['volume'] > row['avg_volume_20'] * 1.47    # –û–±—ä–µ–º –Ω–∞ 47% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            ]
            
            conditions_met = all(conditions)
            
            # –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ)
            if conditions_met and not current_signal_active:
                # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
                signal = BacktestSignal(
                    timestamp=row['timestamp'],
                    signal_type='BUY',
                    price=row['close'],
                    ema20=row['ema20'],
                    adx=row['adx'],
                    plus_di=row['plus_di'],
                    minus_di=row['minus_di'],
                    volume=int(row['volume']),
                    volume_ratio=row['volume'] / row['avg_volume_20']
                )
                self.signals.append(signal)
                current_signal_active = True
                signals_count += 1
                logger.info(f"üìà BUY —Å–∏–≥–Ω–∞–ª #{signals_count}: {row['timestamp'].strftime('%d.%m %H:%M')} –ø–æ —Ü–µ–Ω–µ {row['close']:.2f} ‚ÇΩ")
                
            elif not conditions_met and current_signal_active:
                # –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã/–ø—Ä–æ–¥–∞–∂–∏
                signal = BacktestSignal(
                    timestamp=row['timestamp'],
                    signal_type='SELL',
                    price=row['close'],
                    ema20=row['ema20'],
                    adx=row['adx'],
                    plus_di=row['plus_di'],
                    minus_di=row['minus_di'],
                    volume=int(row['volume']),
                    volume_ratio=row['volume'] / row['avg_volume_20']
                )
                self.signals.append(signal)
                current_signal_active = False
                logger.info(f"üìâ SELL —Å–∏–≥–Ω–∞–ª: {row['timestamp'].strftime('%d.%m %H:%M')} –ø–æ —Ü–µ–Ω–µ {row['close']:.2f} ‚ÇΩ")
        
        logger.info(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(self.signals)} (BUY: {signals_count})")
    
    def _generate_trades(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üíº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        current_trade: Optional[Trade] = None
        
        for signal in self.signals:
            if signal.signal_type == 'BUY' and current_trade is None:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
                current_trade = Trade(
                    entry_time=signal.timestamp,
                    entry_price=signal.price
                )
                
            elif signal.signal_type == 'SELL' and current_trade is not None:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                current_trade.exit_time = signal.timestamp
                current_trade.exit_price = signal.price
                current_trade.duration_hours = int((signal.timestamp - current_trade.entry_time).total_seconds() / 3600)
                current_trade.profit_pct = ((signal.price - current_trade.entry_price) / current_trade.entry_price) * 100
                
                self.trades.append(current_trade)
                current_trade = None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞, —Å—á–∏—Ç–∞–µ–º –µ–µ –æ—Ç–∫—Ä—ã—Ç–æ–π
        if current_trade is not None:
            logger.info("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞")
        
        logger.info(f"üí∞ –°–æ–∑–¥–∞–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(self.trades)}")
    
    def _calculate_statistics(self, days: int) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not self.trades:
            return {
                'period_days': days,
                'total_signals': len(self.signals),
                'buy_signals': len([s for s in self.signals if s.signal_type == 'BUY']),
                'sell_signals': len([s for s in self.signals if s.signal_type == 'SELL']),
                'total_trades': 0,
                'profitable_trades': 0,
                'losing_trades': 0,
                'win_rate': 0,
                'total_return': 0,
                'avg_profit': 0,
                'max_profit': 0,
                'max_loss': 0,
                'avg_duration_hours': 0,
                'trades_detail': []
            }
        
        profits = [trade.profit_pct for trade in self.trades if trade.profit_pct is not None]
        profitable_trades = [p for p in profits if p > 0]
        losing_trades = [p for p in profits if p <= 0]
        durations = [trade.duration_hours for trade in self.trades if trade.duration_hours is not None]
        
        total_return = sum(profits) if profits else 0
        annual_return = (total_return / days) * 365 if days > 0 else 0
        
        stats = {
            'period_days': days,
            'total_signals': len(self.signals),
            'buy_signals': len([s for s in self.signals if s.signal_type == 'BUY']),
            'sell_signals': len([s for s in self.signals if s.signal_type == 'SELL']),
            'total_trades': len(self.trades),
            'profitable_trades': len(profitable_trades),
            'losing_trades': len(losing_trades),
            'win_rate': len(profitable_trades) / len(profits) * 100 if profits else 0,
            'total_return': total_return,
            'annual_return_estimate': annual_return,
            'avg_profit': sum(profits) / len(profits) if profits else 0,
            'max_profit': max(profits) if profits else 0,
            'max_loss': min(profits) if profits else 0,
            'avg_duration_hours': sum(durations) / len(durations) if durations else 0,
            'trades_detail': self.trades
        }
        
        return stats
    
    def print_results(self, stats: Dict):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "="*70)
        print(f"üéØ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì –°–¢–†–ê–¢–ï–ì–ò–ò SBER –ó–ê {stats['period_days']} –î–ù–ï–ô")
        print("="*70)
        
        print(f"üìä –°–ò–ì–ù–ê–õ–´:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}")
        print(f"   ‚Ä¢ –°–∏–≥–Ω–∞–ª—ã –ø–æ–∫—É–ø–∫–∏: {stats['buy_signals']}")
        print(f"   ‚Ä¢ –°–∏–≥–Ω–∞–ª—ã –ø—Ä–æ–¥–∞–∂–∏: {stats['sell_signals']}")
        print(f"   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {stats['buy_signals']/(stats['period_days']/7):.1f} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –Ω–µ–¥–µ–ª—é")
        
        print(f"\nüíº –°–î–ï–õ–ö–ò:")
        print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['total_trades']}")
        print(f"   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ: {stats['profitable_trades']}")
        print(f"   ‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã–µ: {stats['losing_trades']}")
        print(f"   ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {stats['win_rate']:.1f}%")
        
        print(f"\nüí∞ –î–û–•–û–î–ù–û–°–¢–¨:")
        print(f"   ‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['total_return']:.2f}%")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ —Å–¥–µ–ª–∫—É: {stats['avg_profit']:.2f}%")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {stats['max_profit']:.2f}%")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {stats['max_loss']:.2f}%")
        print(f"   ‚Ä¢ –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞): {stats['annual_return_estimate']:.1f}%")
        
        print(f"\n‚è∞ –í–†–ï–ú–Ø:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏: {stats['avg_duration_hours']:.1f} —á–∞—Å–æ–≤")
        
        if stats['trades_detail'] and len(stats['trades_detail']) > 0:
            print(f"\nüìã –î–ï–¢–ê–õ–ò –°–î–ï–õ–û–ö:")
            for i, trade in enumerate(stats['trades_detail'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                profit_str = f"{trade.profit_pct:+.2f}%" if trade.profit_pct else "–û—Ç–∫—Ä—ã—Ç–∞"
                duration_str = f"{trade.duration_hours}—á" if trade.duration_hours else "---"
                print(f"   {i:2d}. {trade.entry_time.strftime('%d.%m %H:%M')} ‚Üí "
                      f"{trade.exit_time.strftime('%d.%m %H:%M') if trade.exit_time else '  –û—Ç–∫—Ä—ã—Ç–∞  '} | "
                      f"{trade.entry_price:.2f} ‚Üí {trade.exit_price:.2f if trade.exit_price else '  ---  '} | "
                      f"{profit_str:>8} | {duration_str:>5}")
            
            if len(stats['trades_detail']) > 10:
                print(f"   ... –∏ –µ—â–µ {len(stats['trades_detail']) - 10} —Å–¥–µ–ª–æ–∫")
        
        print("="*70)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SBER Trading Bot - –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ Railway")
    print("-" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TINKOFF_TOKEN = os.getenv('TINKOFF_TOKEN')
    
    if not TINKOFF_TOKEN:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TINKOFF_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–µ—Ä
        backtest = StrategyBacktest(TINKOFF_TOKEN)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        periods = [30, 60, 90]  # 1, 2, 3 –º–µ—Å—è—Ü–∞
        
        for days in periods:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞ {days} –¥–Ω–µ–π...")
            
            stats = await backtest.run_backtest(days=days)
            
            if stats:
                backtest.print_results(stats)
                
                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                print(f"\nüéØ –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –∑–∞ {days} –¥–Ω–µ–π:")
                if stats['total_trades'] > 0:
                    if stats['win_rate'] >= 60:
                        print("   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–≤–∏–Ω—Ä–µ–π—Ç ‚â•60%)")
                    elif stats['win_rate'] >= 40:
                        print("   ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–≤–∏–Ω—Ä–µ–π—Ç 40-60%)")
                    else:
                        print("   ‚ùå –°–ª–∞–±–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–≤–∏–Ω—Ä–µ–π—Ç <40%)")
                    
                    if stats['total_return'] > 0:
                        print(f"   üí∞ –ü—Ä–∏–±—ã–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (+{stats['total_return']:.2f}%)")
                    else:
                        print(f"   üìâ –£–±—ã—Ç–æ—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ({stats['total_return']:.2f}%)")
                        
                    if stats['avg_duration_hours'] < 24:
                        print("   ‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã (< 1 –¥–Ω—è)")
                    else:
                        print(f"   üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ({stats['avg_duration_hours']:.0f}—á)")
                else:
                    print("   ‚ÑπÔ∏è –ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞ {days} –¥–Ω–µ–π")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            backtest.signals.clear()
            backtest.trades.clear()
            
            print("\n" + "-"*60)
        
        print("\n‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
