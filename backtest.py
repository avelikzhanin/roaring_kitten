import asyncio
import pandas as pd
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from data_provider import TinkoffDataProvider
from indicators import TechnicalIndicators

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MinimalBacktest:
    def __init__(self, token):
        self.provider = TinkoffDataProvider(token)
        self.trades = []
        
    async def run(self):
        print("üöÄ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢ SBER")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        candles = await self.provider.get_candles(hours=720)  # 30 –¥–Ω–µ–π
        df = self.provider.candles_to_dataframe(candles)
        
        if len(df) < 100:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        closes = df['close'].tolist()
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        
        # EMA20
        ema20 = TechnicalIndicators.calculate_ema(closes, 20)
        df['ema20'] = ema20
        
        # ADX
        adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
        df['adx'] = adx_data['adx']
        df['plus_di'] = adx_data['plus_di']
        df['minus_di'] = adx_data['minus_di']
        
        # –û–±—ä–µ–º—ã
        df['vol_avg'] = df['volume'].rolling(20).mean()
        df['vol_ratio'] = df['volume'] / df['vol_avg']
        
        print("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
        
        # –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        in_position = False
        entry_price = 0
        total_trades = 0
        wins = 0
        total_profit = 0
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å 160-–π —Å–≤–µ—á–∏
        for i in range(160, len(df)):
            row = df.iloc[i]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            try:
                conditions = [
                    row['close'] > row['ema20'],  # –¶–µ–Ω–∞ –≤—ã—à–µ EMA
                    row['adx'] > 23,              # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                    row['plus_di'] > row['minus_di'],  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    (row['plus_di'] - row['minus_di']) > 5,  # –†–∞–∑–Ω–∏—Ü–∞ > 5
                    row['vol_ratio'] > 1.47       # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                ]
                
                signal = all(pd.notna(c) and c for c in conditions)
            except:
                signal = False
            
            # –õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
            if signal and not in_position:
                # –ü–æ–∫—É–ø–∞–µ–º
                in_position = True
                entry_price = row['close']
                entry_time = row['timestamp']
                total_trades += 1
                
                date_str = entry_time.strftime('%d.%m %H:%M')
                price_str = str(round(entry_price, 2))
                print(f"üìà BUY #{total_trades}: {date_str} = {price_str}‚ÇΩ")
                
            elif not signal and in_position:
                # –ü—Ä–æ–¥–∞–µ–º
                exit_price = row['close']
                exit_time = row['timestamp']
                
                # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                profit_pct = (exit_price - entry_price) / entry_price * 100
                total_profit += profit_pct
                
                if profit_pct > 0:
                    wins += 1
                    
                date_str = exit_time.strftime('%d.%m %H:%M')
                price_str = str(round(exit_price, 2))
                profit_str = str(round(profit_pct, 2))
                print(f"üìâ SELL: {date_str} = {price_str}‚ÇΩ ({profit_str}%)")
                
                in_position = False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if in_position:
            exit_price = df.iloc[-1]['close']
            profit_pct = (exit_price - entry_price) / entry_price * 100
            total_profit += profit_pct
            if profit_pct > 0:
                wins += 1
                
        print("\n" + "="*40)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("="*40)
        
        if total_trades > 0:
            win_rate = (wins / total_trades) * 100
            avg_profit = total_profit / total_trades
            annual_return = (total_profit / 30) * 365
            
            print(f"üíº –°–¥–µ–ª–æ–∫: {total_trades}")
            print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {wins}")
            print(f"üìà –í–∏–Ω—Ä–µ–π—Ç: {round(win_rate, 1)}%")
            print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {round(total_profit, 2)}%")
            print(f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {round(avg_profit, 2)}%")
            print(f"üöÄ –ì–æ–¥–æ–≤–∞—è (–æ—Ü–µ–Ω–∫–∞): {round(annual_return, 1)}%")
            
            if win_rate >= 60 and total_profit > 0:
                print("\n‚úÖ –•–û–†–û–®–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø")
            elif total_profit > 0:
                print("\nüü° –ü–†–ò–ë–´–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø")
            else:
                print("\n‚ùå –£–ë–´–¢–û–ß–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø")
        else:
            print("‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        print("="*40)

async def main():
    token = os.getenv('TINKOFF_TOKEN')
    if not token:
        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ TINKOFF_TOKEN")
        return
        
    try:
        backtest = MinimalBacktest(token)
        await backtest.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
