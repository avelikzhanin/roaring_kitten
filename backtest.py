#!/usr/bin/env python3
"""
–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ SBER Trading Bot
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è f-string
"""

import asyncio
import logging
import os
import sys
from datetime import datetime, timedelta, timezone
from typing import List, Optional, Dict, Any
import pandas as pd
import numpy as np
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–∏–º –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from src.data_provider import TinkoffDataProvider
    from src.indicators import TechnicalIndicators
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ src/")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

@dataclass
class Trade:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–¥–µ–ª–∫–∏"""
    entry_time: datetime
    exit_time: Optional[datetime] = None
    entry_price: float = 0.0
    exit_price: float = 0.0
    profit_pct: float = 0.0
    duration_hours: int = 0
    
    def is_closed(self) -> bool:
        return self.exit_time is not None
    
    def is_profitable(self) -> bool:
        return self.profit_pct > 0

@dataclass
class BacktestResults:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    total_signals: int = 0
    buy_signals: int = 0
    sell_signals: int = 0
    total_trades: int = 0
    profitable_trades: int = 0
    winrate: float = 0.0
    total_return: float = 0.0
    avg_return_per_trade: float = 0.0
    max_profit: float = 0.0
    max_loss: float = 0.0
    avg_duration_hours: float = 0.0
    annual_return_estimate: float = 0.0
    trades: List[Trade] = None
    
    def __post_init__(self):
        if self.trades is None:
            self.trades = []

class SBERBacktester:
    """–ö–ª–∞—Å—Å –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SBER"""
    
    def __init__(self, tinkoff_token: str):
        self.data_provider = TinkoffDataProvider(tinkoff_token)
        
    async def run_backtest(self, days: int = 30) -> BacktestResults:
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –∑–∞ {days} –¥–Ω–µ–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            hours = days * 24 + 160  # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            candles = await self.data_provider.get_candles(hours=hours)
            
            if len(candles) < 100:
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(candles)} —Å–≤–µ—á–µ–π")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = self.data_provider.candles_to_dataframe(candles)
            if df.empty:
                raise ValueError("–ü—É—Å—Ç–æ–π DataFrame")
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π")
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            results = self._analyze_data(df, days)
            
            logger.info(f"üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {results.total_signals} (BUY: {results.buy_signals})")
            logger.info(f"üí∞ –°–æ–∑–¥–∞–Ω–æ —Å–¥–µ–ª–æ–∫: {results.total_trades}")
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
            raise
    
    def _analyze_data(self, df: pd.DataFrame, target_days: int) -> BacktestResults:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üìä –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        closes = df['close'].tolist()
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        volumes = df['volume'].tolist()
        timestamps = df['timestamp'].tolist()
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        ema20 = TechnicalIndicators.calculate_ema(closes, 20)
        adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
        
        # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ 20 –ø–µ—Ä–∏–æ–¥–æ–≤
        df['avg_volume_20'] = df['volume'].rolling(window=20, min_periods=1).mean()
        avg_volumes = df['avg_volume_20'].tolist()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 160 —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
        start_idx = 160
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ target_days –¥–Ω—è–º–∏ –æ—Ç –∫–æ–Ω—Ü–∞
        end_time = timestamps[-1]
        start_time = end_time - timedelta(days=target_days)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        test_start_idx = start_idx
        for i in range(start_idx, len(timestamps)):
            if timestamps[i] >= start_time:
                test_start_idx = i
                break
        
        logger.info(f"üìà –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {len(timestamps) - test_start_idx} —Å–≤–µ—á–µ–π")
        
        # –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        results = BacktestResults()
        trades = []
        current_trade = None
        
        signal_count = 0
        buy_count = 0
        sell_count = 0
        
        for i in range(test_start_idx, len(timestamps)):
            try:
                # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                price = closes[i]
                ema_val = ema20[i] if i < len(ema20) else np.nan
                adx_val = adx_data['adx'][i] if i < len(adx_data['adx']) else np.nan
                plus_di = adx_data['plus_di'][i] if i < len(adx_data['plus_di']) else np.nan
                minus_di = adx_data['minus_di'][i] if i < len(adx_data['minus_di']) else np.nan
                volume = volumes[i]
                avg_volume = avg_volumes[i]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
                if any(pd.isna(val) for val in [ema_val, adx_val, plus_di, minus_di]):
                    continue
                
                # –£—Å–ª–æ–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏
                conditions = [
                    price > ema_val,                            # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
                    adx_val > 23,                              # ADX –±–æ–ª—å—à–µ 23
                    plus_di > minus_di,                        # +DI –±–æ–ª—å—à–µ -DI
                    plus_di - minus_di > 5,                    # –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
                    volume > avg_volume * 1.47                 # –û–±—ä–µ–º –Ω–∞ 47% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
                ]
                
                buy_signal = all(conditions)
                
                if buy_signal and current_trade is None:
                    # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
                    current_trade = Trade(
                        entry_time=timestamps[i],
                        entry_price=price
                    )
                    
                    signal_count += 1
                    buy_count += 1
                    
                    logger.info(f"üìà BUY #{buy_count}: {timestamps[i].strftime('%d.%m %H:%M')} = {price:.2f}‚ÇΩ")
                    
                elif not buy_signal and current_trade is not None:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    current_trade.exit_time = timestamps[i]
                    current_trade.exit_price = price
                    current_trade.profit_pct = ((price - current_trade.entry_price) / current_trade.entry_price) * 100
                    current_trade.duration_hours = int((current_trade.exit_time - current_trade.entry_time).total_seconds() / 3600)
                    
                    trades.append(current_trade)
                    current_trade = None
                    
                    signal_count += 1
                    sell_count += 1
                    
                    logger.info(f"üìâ SELL: {timestamps[i].strftime('%d.%m %H:%M')} = {price:.2f}‚ÇΩ")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ {i}: {e}")
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        if current_trade is not None:
            current_trade.exit_time = timestamps[-1]
            current_trade.exit_price = closes[-1]
            current_trade.profit_pct = ((closes[-1] - current_trade.entry_price) / current_trade.entry_price) * 100
            current_trade.duration_hours = int((current_trade.exit_time - current_trade.entry_time).total_seconds() / 3600)
            trades.append(current_trade)
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        results.total_signals = signal_count
        results.buy_signals = buy_count
        results.sell_signals = sell_count
        results.total_trades = len(trades)
        results.trades = trades
        
        if trades:
            completed_trades = [t for t in trades if t.is_closed()]
            
            if completed_trades:
                results.profitable_trades = sum(1 for t in completed_trades if t.is_profitable())
                results.winrate = (results.profitable_trades / len(completed_trades)) * 100
                
                profits = [t.profit_pct for t in completed_trades]
                results.total_return = sum(profits)
                results.avg_return_per_trade = np.mean(profits)
                results.max_profit = max(profits)
                results.max_loss = min(profits)
                
                durations = [t.duration_hours for t in completed_trades if t.duration_hours > 0]
                results.avg_duration_hours = np.mean(durations) if durations else 0
                
                # –û—Ü–µ–Ω–∫–∞ –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                if target_days > 0:
                    results.annual_return_estimate = (results.total_return / target_days) * 365
        
        return results
    
    def print_results(self, results: BacktestResults, days: int):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print("\n" + "="*70)
        print(f"üéØ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì SBER –ó–ê {days} –î–ù–ï–ô")
        print("="*70)
        
        print(f"üìä –°–ò–ì–ù–ê–õ–´:")
        print(f" ‚Ä¢ –í—Å–µ–≥–æ: {results.total_signals}")
        print(f" ‚Ä¢ –ü–æ–∫—É–ø–∫–∏: {results.buy_signals}")
        print(f" ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {results.sell_signals}")
        
        print(f"\nüíº –°–î–ï–õ–ö–ò:")
        print(f" ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {results.total_trades}")
        print(f" ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ: {results.profitable_trades}")
        print(f" ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {results.winrate:.1f}%")
        
        print(f"\nüí∞ –î–û–•–û–î–ù–û–°–¢–¨:")
        print(f" ‚Ä¢ –û–±—â–∞—è: {results.total_return:.2f}%")
        print(f" ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞ —Å–¥–µ–ª–∫—É: {results.avg_return_per_trade:.2f}%")
        print(f" ‚Ä¢ –ú–∞–∫—Å –ø—Ä–∏–±—ã–ª—å: {results.max_profit:.2f}%")
        print(f" ‚Ä¢ –ú–∞–∫—Å —É–±—ã—Ç–æ–∫: {results.max_loss:.2f}%")
        print(f" ‚Ä¢ –ì–æ–¥–æ–≤–∞—è (–æ—Ü–µ–Ω–∫–∞): {results.annual_return_estimate:.1f}%")
        
        print(f"\n‚è∞ –í–†–ï–ú–Ø:")
        print(f" ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {results.avg_duration_hours:.1f}—á")
        
        if results.trades and len(results.trades) <= 20:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –Ω–µ –º–Ω–æ–≥–æ
            print(f"\nüìã –°–î–ï–õ–ö–ò:")
            try:
                for i, trade in enumerate(results.trades, 1):
                    if trade.is_closed():
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–æ —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ f-string
                        entry_str = trade.entry_time.strftime("%d.%m %H:%M")
                        exit_str = trade.exit_time.strftime("%d.%m %H:%M") if trade.exit_time else "N/A"
                        entry_price_str = f"{trade.entry_price:.2f}‚ÇΩ"
                        exit_price_str = f"{trade.exit_price:.2f}‚ÇΩ"
                        profit_str = f"{trade.profit_pct:+.2f}%"
                        
                        print(f" {i:2d}. {entry_str} ‚Üí {exit_str} | "
                              f"{entry_price_str} ‚Üí {exit_price_str} | "
                              f"{profit_str} | {trade.duration_hours}—á")
                    else:
                        entry_str = trade.entry_time.strftime("%d.%m %H:%M")
                        entry_price_str = f"{trade.entry_price:.2f}‚ÇΩ"
                        
                        print(f" {i:2d}. {entry_str} ‚Üí [–æ—Ç–∫—Ä—ã—Ç–∞] | "
                              f"{entry_price_str} ‚Üí [—Ç–µ–∫—É—â–∞—è] | "
                              f"[–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ]")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–æ–∫: {e}")
                print(" [–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–æ–∫]")
        
        print("\n" + "="*70)
        print()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ SBER Trading Bot - –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥")
    print("-" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    tinkoff_token = os.getenv('TINKOFF_TOKEN')
    
    if not tinkoff_token:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TINKOFF_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export TINKOFF_TOKEN='your_token'")
        return
    
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥...")
    
    try:
        backtester = SBERBacktester(tinkoff_token)
        
        # –ë—ç–∫—Ç–µ—Å—Ç –∑–∞ 30 –¥–Ω–µ–π
        logger.info("üîÑ –ê–Ω–∞–ª–∏–∑ –∑–∞ 30 –¥–Ω–µ–π...")
        results = await backtester.run_backtest(days=30)
        backtester.print_results(results, 30)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ - –∑–∞ 7 –¥–Ω–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        logger.info("üîÑ –ê–Ω–∞–ª–∏–∑ –∑–∞ 7 –¥–Ω–µ–π...")
        results_week = await backtester.run_backtest(days=7)
        backtester.print_results(results_week, 7)
        
    except KeyboardInterrupt:
        logger.info("‚ùå –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
