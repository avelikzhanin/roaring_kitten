import asyncio
import pandas as pd
import logging
from datetime import datetime, timedelta, timezone
from dataclasses import dataclass
from typing import List, Optional, Tuple
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from data_provider import TinkoffDataProvider
from indicators import TechnicalIndicators

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class Trade:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–¥–µ–ª–∫–∏"""
    entry_time: datetime
    entry_price: float
    exit_time: Optional[datetime] = None
    exit_price: Optional[float] = None
    signal_data: dict = None

    def get_duration_hours(self) -> float:
        """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ –≤ —á–∞—Å–∞—Ö"""
        if self.exit_time is not None:
            return (self.exit_time - self.entry_time).total_seconds() / 3600
        return 0

    def get_profit_pct(self) -> float:
        """–ü—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if self.exit_price is not None:
            return (self.exit_price - self.entry_price) / self.entry_price * 100
        return 0

    def get_profit_rub(self) -> float:
        """–ü—Ä–∏–±—ã–ª—å –≤ —Ä—É–±–ª—è—Ö –Ω–∞ 1 –∞–∫—Ü–∏—é"""
        if self.exit_price is not None:
            return self.exit_price - self.entry_price
        return 0

class SimpleBacktest:
    """–ü—Ä–æ—Å—Ç–æ–π –±—ç–∫—Ç–µ—Å—Ç–µ—Ä –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, token: str):
        self.provider = TinkoffDataProvider(token)
        self.trades = []
        
    async def run(self, days: int = 30):
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        print("üöÄ SBER Trading Bot - –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥")
        print("-" * 60)
        
        logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥...")
        logger.info(f"üîÑ –ê–Ω–∞–ª–∏–∑ –∑–∞ {days} –¥–Ω–µ–π...")
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –∑–∞ {days} –¥–Ω–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        hours = days * 24
        candles = await self.provider.get_candles(hours=hours)
        
        if len(candles) < 100:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        df = self.provider.candles_to_dataframe(candles)
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        self.calculate_indicators(df)
        
        # –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.find_signals(df)
        
        # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.show_results()
        
    def calculate_indicators(self, df):
        """–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        logger.info("üìä –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # EMA20
        closes = df['close'].tolist()
        ema20_list = TechnicalIndicators.calculate_ema(closes, 20)
        df['ema20'] = ema20_list
        
        # ADX
        highs = df['high'].tolist()
        lows = df['low'].tolist()
        adx_data = TechnicalIndicators.calculate_adx(highs, lows, closes, 14)
        
        df['adx'] = adx_data['adx']
        df['plus_di'] = adx_data['plus_di'] 
        df['minus_di'] = adx_data['minus_di']
        
        # –û–±—ä–µ–º—ã
        df['avg_volume'] = df['volume'].rolling(20, min_periods=1).mean()
        df['vol_ratio'] = df['volume'] / df['avg_volume']
        
        return df
        
    def find_signals(self, df):
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        buy_signals = 0
        sell_signals = 0
        current_trade = None
        
        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 160 —Å–≤–µ—á–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        test_df = df.iloc[160:].copy().reset_index(drop=True)
        logger.info(f"üìà –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {len(test_df)} —Å–≤–µ—á–µ–π")
        
        for i in range(1, len(test_df)):
            row = test_df.iloc[i]
            prev_row = test_df.iloc[i-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞
            conditions = self.check_conditions(row)
            prev_conditions = self.check_conditions(prev_row)
            
            # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
            if conditions and not prev_conditions and current_trade is None:
                buy_signals += 1
                current_trade = Trade(
                    entry_time=row['timestamp'],
                    entry_price=row['close']
                )
                
                date_str = row['timestamp'].strftime('%d.%m %H:%M')
                logger.info(f"üìà BUY #{buy_signals}: {date_str} = {row['close']:.2f}‚ÇΩ")
                
            # –°–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏ (—É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è)
            elif not conditions and prev_conditions and current_trade is not None:
                sell_signals += 1
                current_trade.exit_time = row['timestamp']
                current_trade.exit_price = row['close']
                
                self.trades.append(current_trade)
                
                date_str = row['timestamp'].strftime('%d.%m %H:%M')
                logger.info(f"üìâ SELL: {date_str} = {row['close']:.2f}‚ÇΩ")
                
                current_trade = None
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–¥–µ–ª–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if current_trade is not None:
            last_row = test_df.iloc[-1]
            current_trade.exit_time = last_row['timestamp']
            current_trade.exit_price = last_row['close']
            self.trades.append(current_trade)
            sell_signals += 1
            
        total_signals = buy_signals + sell_signals
        logger.info(f"üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals} (BUY: {buy_signals})")
        logger.info(f"üí∞ –°–æ–∑–¥–∞–Ω–æ —Å–¥–µ–ª–æ–∫: {len(self.trades)}")
        
    def check_conditions(self, row):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            price_above_ema = row['close'] > row['ema20']
            strong_trend = row['adx'] > 23
            positive_dir = row['plus_di'] > row['minus_di']
            di_diff = (row['plus_di'] - row['minus_di']) > 5
            high_volume = row['vol_ratio'] > 1.47
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
            conditions = [price_above_ema, strong_trend, positive_dir, di_diff, high_volume]
            return all(pd.notna(c) and c for c in conditions)
            
        except:
            return False
            
    def show_results(self):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*70)
        print("üéØ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì SBER –ó–ê 30 –î–ù–ï–ô")
        print("="*70)
        
        if not self.trades:
            print("‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_trades = len(self.trades)
        profits = []
        durations = []
        
        profitable_count = 0
        
        for trade in self.trades:
            profit_pct = trade.get_profit_pct()
            profits.append(profit_pct)
            durations.append(trade.get_duration_hours())
            
            if profit_pct > 0:
                profitable_count += 1
                
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_return = sum(profits)
        avg_return = total_return / len(profits)
        win_rate = (profitable_count / total_trades) * 100
        max_profit = max(profits)
        max_loss = min(profits)
        avg_duration = sum(durations) / len(durations)
        
        # –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è)
        annual_return = (total_return / 30) * 365
        
        print(f"üìä –°–ò–ì–ù–ê–õ–´:")
        print(f" ‚Ä¢ –í—Å–µ–≥–æ: {total_trades * 2}")  # –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ = –≤—Ö–æ–¥ + –≤—ã—Ö–æ–¥
        print(f" ‚Ä¢ –ü–æ–∫—É–ø–∫–∏: {total_trades}")
        print(f" ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {total_trades}")
        print()
        
        print(f"üíº –°–î–ï–õ–ö–ò:")
        print(f" ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_trades}")
        print(f" ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ: {profitable_count}")
        print(f" ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%")
        print()
        
        print(f"üí∞ –î–û–•–û–î–ù–û–°–¢–¨:")
        print(f" ‚Ä¢ –û–±—â–∞—è: {total_return:.2f}%")
        print(f" ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞ —Å–¥–µ–ª–∫—É: {avg_return:.2f}%")
        print(f" ‚Ä¢ –ú–∞–∫—Å –ø—Ä–∏–±—ã–ª—å: {max_profit:.2f}%") 
        print(f" ‚Ä¢ –ú–∞–∫—Å —É–±—ã—Ç–æ–∫: {max_loss:.2f}%")
        print(f" ‚Ä¢ –ì–æ–¥–æ–≤–∞—è (–æ—Ü–µ–Ω–∫–∞): {annual_return:.1f}%")
        print()
        
        print(f"‚è∞ –í–†–ï–ú–Ø:")
        print(f" ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.1f}—á")
        print()
        
        print("üìã –°–î–ï–õ–ö–ò:")
        self.print_trades_safe()
        
        print("\n" + "="*70)
        
        # –û—Ü–µ–Ω–∫–∞
        if win_rate >= 60 and total_return > 0:
            print("‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û–ö–ê–ó–´–í–ê–ï–¢ –•–û–†–û–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        elif total_return > 0:
            print("üü° –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–†–ò–ë–´–õ–¨–ù–ê–Ø, –ù–û –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        else:
            print("‚ùå –°–¢–†–ê–¢–ï–ì–ò–Ø –£–ë–´–¢–û–ß–ù–ê–Ø")
            
        print("="*70)
        
    def print_trades_safe(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Å–¥–µ–ª–æ–∫ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        for i, trade in enumerate(self.trades, 1):
            entry_date = trade.entry_time.strftime('%d.%m %H:%M')
            entry_price = trade.entry_price
            
            if trade.exit_time is not None:
                exit_date = trade.exit_time.strftime('%d.%m %H:%M')
            else:
                exit_date = "---"
                
            if trade.exit_price is not None:
                exit_price = trade.exit_price
                exit_price_str = f"{exit_price:.2f}"
                profit = trade.get_profit_pct()
                profit_str = f"{profit:+.2f}%"
            else:
                exit_price_str = "---"
                profit_str = "---"
                
            duration = trade.get_duration_hours()
            duration_str = f"{duration:.1f}—á" if duration > 0 else "---"
            
            print(f"{i:2d}. {entry_date} | {entry_price:.2f}‚ÇΩ ‚Üí {exit_price_str}‚ÇΩ | {profit_str} | {duration_str}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    token = os.getenv('TINKOFF_TOKEN')
    if not token:
        logger.error("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ TINKOFF_TOKEN")
        return
        
    try:
        backtest = SimpleBacktest(token)
        await backtest.run(days=30)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
