#!/usr/bin/env python3
"""
–ë–≠–ö–¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê–¢–û–† - SBER 1H –°–¢–†–ê–¢–ï–ì–ò–Ø
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ 80 —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import List, Dict, Optional, Tuple
from enum import Enum
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
from tinkoff.invest import Client, CandleInterval
from tinkoff.invest.utils import now

class TradeResult(Enum):
    WIN_TARGET = "üéØ –¶–ï–õ–¨"
    WIN_PARTIAL = "üìà –ß–ê–°–¢–ò–ß–ù–û" 
    LOSS_STOP = "üõë –°–¢–û–ü"
    LOSS_TECHNICAL = "‚ö° –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô"
    TIMEOUT = "‚è∞ –¢–ê–ô–ú–ê–£–¢"

@dataclass
class TradeSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    stop_loss_pct: float = -3.0          # –°—Ç–æ–ø-–ª–æ—Å—Å –≤ %
    take_profit_pct: float = 6.0         # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤ %
    partial_profit_pct: float = 3.0      # –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –≤ %
    partial_close_pct: float = 0.3       # –°–∫–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ (30%)
    max_hold_hours: int = 48             # –ú–∞–∫—Å –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
    trailing_stop_pct: float = 2.0       # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
    commission_pct: float = 0.05         # –ö–æ–º–∏—Å—Å–∏—è –≤ %

@dataclass 
class Trade:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ"""
    signal_timestamp: datetime
    entry_price: float
    entry_time: datetime
    signal_strength: float
    adx: float
    di_diff: float
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    exit_price: Optional[float] = None
    exit_time: Optional[datetime] = None
    result: Optional[TradeResult] = None
    profit_pct: Optional[float] = None
    profit_rub: Optional[float] = None
    hold_hours: Optional[int] = None
    max_profit_pct: Optional[float] = None
    max_drawdown_pct: Optional[float] = None

@dataclass
class BacktestResults:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"""
    total_trades: int
    winning_trades: int
    losing_trades: int
    win_rate: float
    
    total_return_pct: float
    total_return_rub: float
    average_trade_pct: float
    average_win_pct: float
    average_loss_pct: float
    
    max_consecutive_wins: int
    max_consecutive_losses: int
    max_drawdown: float
    sharpe_ratio: float
    
    trades_by_result: Dict[TradeResult, int]
    monthly_returns: List[float]
    
    best_trade: Trade
    worst_trade: Trade

class BacktestEngine:
    """–î–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, token: str, setup: TradeSetup = None):
        self.token = token
        self.setup = setup or TradeSetup()
        self.figi = "BBG004730N88"  # SBER
        
    async def get_detailed_candles(self, days: int = 30) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
        try:
            with Client(self.token) as client:
                to_time = now()
                from_time = to_time - timedelta(days=days)
                
                print(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {days} –¥–Ω–µ–π...")
                
                response = client.market_data.get_candles(
                    figi=self.figi,
                    from_=from_time,
                    to=to_time,
                    interval=CandleInterval.CANDLE_INTERVAL_HOUR
                )
                
                if not response.candles:
                    return pd.DataFrame()
                
                data = []
                for candle in response.candles:
                    data.append({
                        'timestamp': candle.time,
                        'open': self.quotation_to_decimal(candle.open),
                        'high': self.quotation_to_decimal(candle.high),
                        'low': self.quotation_to_decimal(candle.low),
                        'close': self.quotation_to_decimal(candle.close),
                        'volume': candle.volume
                    })
                
                df = pd.DataFrame(data)
                df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
                df = df.sort_values('timestamp').reset_index(drop=True)
                
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
                return df
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return pd.DataFrame()
    
    @staticmethod
    def quotation_to_decimal(quotation) -> float:
        return float(quotation.units + quotation.nano / 1e9)
    
    def simulate_trade(self, entry_signal: Dict, price_data: pd.DataFrame) -> Trade:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–¥–µ–ª–∫–∏
        trade = Trade(
            signal_timestamp=entry_signal['timestamp'],
            entry_price=entry_signal['price'],
            entry_time=entry_signal['timestamp'],
            signal_strength=entry_signal['strength'],
            adx=entry_signal['adx'],
            di_diff=entry_signal['di_diff']
        )
        
        # –£—Ä–æ–≤–Ω–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞
        stop_price = trade.entry_price * (1 + self.setup.stop_loss_pct / 100)
        target_price = trade.entry_price * (1 + self.setup.take_profit_pct / 100)
        partial_price = trade.entry_price * (1 + self.setup.partial_profit_pct / 100)
        
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        entry_idx = price_data[price_data['timestamp'] >= trade.entry_time].index
        if len(entry_idx) == 0:
            return trade
        
        entry_idx = entry_idx[0]
        max_profit = 0
        max_drawdown = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        for i in range(entry_idx, min(entry_idx + self.setup.max_hold_hours, len(price_data))):
            candle = price_data.iloc[i]
            current_time = candle['timestamp']
            
            # –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            high_profit = ((candle['high'] - trade.entry_price) / trade.entry_price) * 100
            low_profit = ((candle['low'] - trade.entry_price) / trade.entry_price) * 100
            close_profit = ((candle['close'] - trade.entry_price) / trade.entry_price) * 100
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º—ã/–º–∏–Ω–∏–º—É–º—ã
            max_profit = max(max_profit, high_profit)
            max_drawdown = min(max_drawdown, low_profit)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if candle['low'] <= stop_price:
                trade.exit_price = stop_price
                trade.exit_time = current_time
                trade.result = TradeResult.LOSS_STOP
                trade.profit_pct = self.setup.stop_loss_pct
                break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            if candle['high'] >= target_price:
                trade.exit_price = target_price
                trade.exit_time = current_time
                trade.result = TradeResult.WIN_TARGET
                trade.profit_pct = self.setup.take_profit_pct
                break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –∫–∞–∫ –ø–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥)
            if candle['high'] >= partial_price and self.setup.partial_profit_pct > 0:
                trade.exit_price = partial_price
                trade.exit_time = current_time
                trade.result = TradeResult.WIN_PARTIAL
                trade.profit_pct = self.setup.partial_profit_pct
                break
        
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–∫—Ä—ã–ª–∏—Å—å - —Ç–∞–π–º–∞—É—Ç
        if trade.exit_price is None:
            last_candle = price_data.iloc[min(entry_idx + self.setup.max_hold_hours - 1, len(price_data) - 1)]
            trade.exit_price = last_candle['close']
            trade.exit_time = last_candle['timestamp']
            trade.result = TradeResult.TIMEOUT
            trade.profit_pct = ((trade.exit_price - trade.entry_price) / trade.entry_price) * 100
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        trade.profit_rub = (trade.exit_price - trade.entry_price)
        trade.hold_hours = int((trade.exit_time - trade.entry_time).total_seconds() / 3600)
        trade.max_profit_pct = max_profit
        trade.max_drawdown_pct = max_drawdown
        
        # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        trade.profit_pct -= self.setup.commission_pct
        trade.profit_rub -= trade.entry_price * (self.setup.commission_pct / 100)
        
        return trade
    
    def generate_sample_signals(self) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –≤–∞—à–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        base_date = datetime(2025, 8, 5)
        signals = []
        
        # –¢–æ–ø —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤
        top_signals = [
            {'price': 324.28, 'adx': 39.1, 'di_diff': 52.0, 'strength': 91.0, 'hours_offset': 0},
            {'price': 322.46, 'adx': 45.9, 'di_diff': 36.0, 'strength': 86.1, 'hours_offset': 24},
            {'price': 315.56, 'adx': 41.2, 'di_diff': 26.4, 'strength': 85.1, 'hours_offset': 48},
            {'price': 322.72, 'adx': 44.2, 'di_diff': 28.9, 'strength': 84.8, 'hours_offset': 72},
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
        for i, sig in enumerate(top_signals):
            signals.append({
                'timestamp': base_date + timedelta(hours=sig['hours_offset']),
                'price': sig['price'],
                'adx': sig['adx'],
                'di_diff': sig['di_diff'],
                'strength': sig['strength']
            })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ 76 —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        np.random.seed(42)
        for i in range(76):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤
            adx = np.random.normal(36.7, 5.0)  # –°—Ä–µ–¥–Ω–µ–µ 36.7 –∏–∑ –ª–æ–≥–æ–≤
            adx = max(23.1, min(46.8, adx))    # –ì—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ª–æ–≥–æ–≤
            
            di_diff = np.random.gamma(2, 9)    # –ú–µ–¥–∏–∞–Ω–∞ 16.0, –º–∞–∫—Å 52.0
            di_diff = min(52.0, di_diff)
            
            # –¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º EMA –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ (0.005-1.973%)
            base_price = 320.0 + np.random.normal(0, 8)
            ema_dist_pct = np.random.lognormal(-2, 0.8) # –ú–µ–¥–∏–∞–Ω–∞ 0.25%
            ema_dist_pct = min(1.973, max(0.005, ema_dist_pct))
            price = base_price * (1 + ema_dist_pct / 100)
            
            # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
            strength = min(100, max(20, 
                (adx - 23) * 1.5 + 
                di_diff * 1.2 + 
                ema_dist_pct * 10 +
                np.random.normal(0, 5)
            ))
            
            signals.append({
                'timestamp': base_date + timedelta(hours=96 + i * 6 + np.random.randint(-2, 3)),
                'price': round(price, 2),
                'adx': round(adx, 1),
                'di_diff': round(di_diff, 1),
                'strength': round(strength, 1)
            })
        
        return sorted(signals, key=lambda x: x['timestamp'])
    
    async def run_backtest(self, signals: List[Dict] = None) -> BacktestResults:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        
        print("üöÄ –ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ê SBER 1H –°–¢–†–ê–¢–ï–ì–ò–ò")
        print("=" * 60)
        
        if signals is None:
            signals = self.generate_sample_signals()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        price_data = await self.get_detailed_candles(days=30)
        if price_data.empty:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
            return None
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤...")
        print(f"üìà –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {price_data['timestamp'].min()} - {price_data['timestamp'].max()}")
        print(f"‚öôÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {self.setup.stop_loss_pct}%, –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {self.setup.take_profit_pct}%")
        print()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏
        trades = []
        for i, signal in enumerate(signals):
            if i < 10 or i % 10 == 0:  # –ü—Ä–æ–≥—Ä–µ—Å—Å
                print(f"üìà –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª {i+1}/{len(signals)}...")
            
            trade = self.simulate_trade(signal, price_data)
            if trade.exit_price is not None:
                trades.append(trade)
        
        if not trades:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏")
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return self.analyze_results(trades)
    
    def analyze_results(self, trades: List[Trade]) -> BacktestResults:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        
        winning_trades = [t for t in trades if t.profit_pct > 0]
        losing_trades = [t for t in trades if t.profit_pct <= 0]
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_return_pct = sum(t.profit_pct for t in trades)
        total_return_rub = sum(t.profit_rub for t in trades)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        results_count = {}
        for result_type in TradeResult:
            results_count[result_type] = len([t for t in trades if t.result == result_type])
        
        # –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π
        consecutive_wins = 0
        consecutive_losses = 0
        max_consec_wins = 0
        max_consec_losses = 0
        
        for trade in trades:
            if trade.profit_pct > 0:
                consecutive_wins += 1
                consecutive_losses = 0
                max_consec_wins = max(max_consec_wins, consecutive_wins)
            else:
                consecutive_losses += 1
                consecutive_wins = 0
                max_consec_losses = max(max_consec_losses, consecutive_losses)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        cumulative_return = 0
        peak = 0
        max_drawdown = 0
        
        for trade in trades:
            cumulative_return += trade.profit_pct
            peak = max(peak, cumulative_return)
            drawdown = peak - cumulative_return
            max_drawdown = max(max_drawdown, drawdown)
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        returns = [t.profit_pct for t in trades]
        sharpe_ratio = np.mean(returns) / np.std(returns) if np.std(returns) > 0 else 0
        
        # –õ—É—á—à–∞—è/—Ö—É–¥—à–∞—è —Å–¥–µ–ª–∫–∏
        best_trade = max(trades, key=lambda t: t.profit_pct)
        worst_trade = min(trades, key=lambda t: t.profit_pct)
        
        results = BacktestResults(
            total_trades=len(trades),
            winning_trades=len(winning_trades),
            losing_trades=len(losing_trades),
            win_rate=len(winning_trades) / len(trades) * 100,
            
            total_return_pct=total_return_pct,
            total_return_rub=total_return_rub,
            average_trade_pct=total_return_pct / len(trades),
            average_win_pct=np.mean([t.profit_pct for t in winning_trades]) if winning_trades else 0,
            average_loss_pct=np.mean([t.profit_pct for t in losing_trades]) if losing_trades else 0,
            
            max_consecutive_wins=max_consec_wins,
            max_consecutive_losses=max_consec_losses,
            max_drawdown=max_drawdown,
            sharpe_ratio=sharpe_ratio,
            
            trades_by_result=results_count,
            monthly_returns=[],  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            
            best_trade=best_trade,
            worst_trade=worst_trade
        )
        
        self.print_results(results, trades)
        return results
    
    def print_results(self, results: BacktestResults, trades: List[Trade]):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        print(f"\n{'='*80}")
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê SBER 1H –°–¢–†–ê–¢–ï–ì–ò–ò")
        print(f"{'='*80}")
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üíº –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {results.total_trades}")
        print(f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {results.winning_trades} ({results.win_rate:.1f}%)")
        print(f"   ‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {results.losing_trades} ({100-results.win_rate:.1f}%)")
        
        print(f"\nüí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results.total_return_pct:+.1f}%")
        print(f"   üíµ –ü—Ä–∏–±—ã–ª—å –≤ —Ä—É–±–ª—è—Ö: {results.total_return_rub:+,.0f} —Ä—É–± (–Ω–∞ 1 –∞–∫—Ü–∏—é)")
        print(f"   üìä –°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {results.average_trade_pct:+.2f}%")
        print(f"   üéØ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {results.average_win_pct:+.2f}%")
        print(f"   üõë –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {results.average_loss_pct:.2f}%")
        
        print(f"\nüé≤ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–†–ò–ô:")
        print(f"   üî• –ú–∞–∫—Å. –ø–æ–±–µ–¥—ã –ø–æ–¥—Ä—è–¥: {results.max_consecutive_wins}")
        print(f"   üíÄ –ú–∞–∫—Å. —É–±—ã—Ç–∫–∏ –ø–æ–¥—Ä—è–¥: {results.max_consecutive_losses}")
        print(f"   üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {results.max_drawdown:.1f}%")
        print(f"   üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {results.sharpe_ratio:.2f}")
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –¢–ò–ü–ê–ú:")
        for result_type, count in results.trades_by_result.items():
            pct = (count / results.total_trades) * 100
            print(f"   {result_type.value}: {count:>2} —Å–¥–µ–ª–æ–∫ ({pct:>4.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û –°–ò–õ–ï –°–ò–ì–ù–ê–õ–û–í:")
        
        strength_ranges = {
            "90-100%": [t for t in trades if t.signal_strength >= 90],
            "80-90%":  [t for t in trades if 80 <= t.signal_strength < 90],
            "70-80%":  [t for t in trades if 70 <= t.signal_strength < 80],
            "60-70%":  [t for t in trades if 60 <= t.signal_strength < 70],
            "50-60%":  [t for t in trades if 50 <= t.signal_strength < 60],
            "<50%":    [t for t in trades if t.signal_strength < 50]
        }
        
        for range_name, group in strength_ranges.items():
            if not group:
                continue
                
            win_rate = len([t for t in group if t.profit_pct > 0]) / len(group) * 100
            avg_return = np.mean([t.profit_pct for t in group])
            
            print(f"   {range_name:>8}: {len(group):>2} —Å–¥–µ–ª–æ–∫, "
                  f"–≤–∏–Ω—Ä–µ–π—Ç {win_rate:>4.0f}%, "
                  f"—Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {avg_return:>+5.1f}%")
        
        print(f"\nüèÜ –õ–£–ß–®–ò–ï/–•–£–î–®–ò–ï –°–î–ï–õ–ö–ò:")
        
        # –¢–æ–ø-5 –ª—É—á—à–∏—Ö
        best_trades = sorted(trades, key=lambda t: t.profit_pct, reverse=True)[:5]
        print(f"\nü•á –¢–û–ü-5 –õ–£–ß–®–ò–•:")
        for i, trade in enumerate(best_trades, 1):
            print(f"   #{i} {trade.entry_time.strftime('%d.%m %H:%M')}: "
                  f"{trade.profit_pct:+.1f}% "
                  f"(—Å–∏–ª–∞ {trade.signal_strength:.0f}%, "
                  f"–¥–µ—Ä–∂–∞–ª–∏ {trade.hold_hours}—á)")
        
        # –¢–æ–ø-5 —Ö—É–¥—à–∏—Ö  
        worst_trades = sorted(trades, key=lambda t: t.profit_pct)[:5]
        print(f"\nüíÄ –¢–û–ü-5 –•–£–î–®–ò–•:")
        for i, trade in enumerate(worst_trades, 1):
            print(f"   #{i} {trade.entry_time.strftime('%d.%m %H:%M')}: "
                  f"{trade.profit_pct:+.1f}% "
                  f"(—Å–∏–ª–∞ {trade.signal_strength:.0f}%, "
                  f"–¥–µ—Ä–∂–∞–ª–∏ {trade.hold_hours}—á)")
        
        # –†–∞—Å—á–µ—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—É–º–º—ã
        print(f"\nüíº –†–ê–°–ß–ï–¢ –ü–†–ò–ë–´–õ–ò –ù–ê –†–ê–ó–ù–´–ï –°–£–ú–ú–´:")
        for capital in [100_000, 500_000, 1_000_000]:
            shares = capital // 320  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏
            total_profit = results.total_return_rub * shares
            print(f"   üí∞ –ö–∞–ø–∏—Ç–∞–ª {capital:,} —Ä—É–± ‚Üí "
                  f"{shares:,} –∞–∫—Ü–∏–π ‚Üí "
                  f"–ø—Ä–∏–±—ã–ª—å {total_profit:+,.0f} —Ä—É–± "
                  f"({(total_profit/capital)*100:+.1f}%)")
        
        print(f"\nüéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if results.win_rate >= 60:
            print("   ‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç! –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        elif results.win_rate >= 50:
            print("   ‚öñÔ∏è –ü—Ä–∏–µ–º–ª–µ–º—ã–π –≤–∏–Ω—Ä–µ–π—Ç, –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        else:
            print("   ‚ö†Ô∏è –ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        
        if results.average_trade_pct > 0.5:
            print("   üí∞ –•–æ—Ä–æ—à–∞—è —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É")
        else:
            print("   üìâ –ù–∏–∑–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å, —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç")
        
        if results.max_drawdown < 10:
            print("   üõ°Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞, —Ö–æ—Ä–æ—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")
        else:
            print("   ‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞, —É–∂–µ—Å—Ç–æ—á–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å—ã")
        
        print(f"\nü§ñ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        
        # –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        profitable_trades = [t for t in trades if t.profit_pct > 0]
        if profitable_trades:
            avg_strength = np.mean([t.signal_strength for t in profitable_trades])
            min_good_strength = np.percentile([t.signal_strength for t in profitable_trades], 25)
            
            print(f"   üìä –¢–æ—Ä–≥–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Å —Å–∏–ª–æ–π ‚â• {min_good_strength:.0f}%")
            print(f"   üéØ –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {avg_strength:.1f}%")
            print(f"   ‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {np.mean([t.hold_hours for t in profitable_trades]):.0f}—á")

# –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
async def run_full_backtest():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    import os
    token = os.getenv('TINKOFF_TOKEN')
    if not token:
        print("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("üéØ –¢–ï–°–¢–ò–†–£–ï–ú –†–ê–ó–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("=" * 60)
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è
    print("\nüõ°Ô∏è –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–ê–Ø")
    setup1 = TradeSetup(
        stop_loss_pct=-2.0,
        take_profit_pct=4.0,
        partial_profit_pct=2.0,
        max_hold_hours=24
    )
    
    engine1 = BacktestEngine(token, setup1)
    results1 = await engine1.run_backtest()
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è  
    print(f"\n‚ö° –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø")
    setup2 = TradeSetup(
        stop_loss_pct=-4.0,
        take_profit_pct=8.0,
        partial_profit_pct=4.0,
        max_hold_hours=72
    )
    
    engine2 = BacktestEngine(token, setup2)
    results2 = await engine2.run_backtest()
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –í–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è
    print(f"\nüéØ –°–¢–†–ê–¢–ï–ì–ò–Ø 3: –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø")
    setup3 = TradeSetup(
        stop_loss_pct=-3.0,
        take_profit_pct=6.0,
        partial_profit_pct=3.0,
        max_hold_hours=48
    )
    
    engine3 = BacktestEngine(token, setup3)
    results3 = await engine3.run_backtest()
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    print(f"\nüî• –°–¢–†–ê–¢–ï–ì–ò–Ø 4: –¢–û–õ–¨–ö–û –ü–†–ï–ú–ò–£–ú –°–ò–ì–ù–ê–õ–´ (‚â•75%)")
    setup4 = TradeSetup(
        stop_loss_pct=-3.0,
        take_profit_pct=6.0,
        partial_profit_pct=3.0,
        max_hold_hours=48
    )
    
    engine4 = BacktestEngine(token, setup4)
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    all_signals = engine4.generate_sample_signals()
    premium_signals = [s for s in all_signals if s['strength'] >= 75.0]
    print(f"   üìä –û—Ç–æ–±—Ä–∞–Ω–æ {len(premium_signals)} –ø—Ä–µ–º–∏—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {len(all_signals)}")
    
    results4 = await engine4.run_backtest(premium_signals)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print(f"\n{'='*80}")
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô")
    print(f"{'='*80}")
    
    strategies = [
        ("üõ°Ô∏è –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è", results1),
        ("‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è", results2), 
        ("üéØ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è", results3),
        ("üî• –¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º", results4)
    ]
    
    print(f"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<15} {'–í–∏–Ω—Ä–µ–π—Ç':<8} {'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å':<12} {'–°—Ä–µ–¥.—Å–¥–µ–ª–∫–∞':<12} {'–ü—Ä–æ—Å–∞–¥–∫–∞':<10}")
    print("-" * 65)
    
    for name, results in strategies:
        if results:
            print(f"{name:<15} {results.win_rate:<7.1f}% "
                  f"{results.total_return_pct:<11.1f}% "
                  f"{results.average_trade_pct:<11.2f}% "
                  f"{results.max_drawdown:<9.1f}%")

if __name__ == "__main__":
    asyncio.run(run_full_backtest())
