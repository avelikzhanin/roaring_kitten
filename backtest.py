#!/usr/bin/env python3
"""
–ë—ç–∫—Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: —Ü–µ–Ω–∞ > EMA20, ADX > 25, +DI > -DI
–î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Railway –±–µ–∑ Dockerfile
"""

import os
import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional
import json
from dataclasses import dataclass, asdict
import logging

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Tinkoff API
try:
    from tinkoff.invest import Client, RequestError, CandleInterval, HistoricCandle
    from tinkoff.invest.utils import now
    TINKOFF_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è tinkoff-investments –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    TINKOFF_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class SignalData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞"""
    timestamp: str
    symbol: str
    price: float
    ema20: float
    adx: float
    plus_di: float
    minus_di: float
    volume: int
    price_vs_ema_pct: float
    di_diff: float
    signal_strength: float

class TechnicalIndicators:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    @staticmethod
    def ema(data: pd.Series, period: int) -> pd.Series:
        """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
        return data.ewm(span=period, adjust=False).mean()
    
    @staticmethod
    def wilder_smoothing(values: pd.Series, period: int) -> pd.Series:
        """–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –£–∞–π–ª–¥–µ—Ä–∞ –¥–ª—è ADX"""
        result = pd.Series(index=values.index, dtype=float)
        
        # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
        if len(values) >= period:
            first_avg = values.iloc[:period].mean()
            result.iloc[period-1] = first_avg
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –£–∞–π–ª–¥–µ—Ä–∞
            for i in range(period, len(values)):
                result.iloc[i] = (result.iloc[i-1] * (period - 1) + values.iloc[i]) / period
        
        return result
    
    @staticmethod
    def adx_calculation(high: pd.Series, low: pd.Series, close: pd.Series, period: int = 14):
        """–†–∞—Å—á–µ—Ç ADX –∏ Directional Indicators"""
        
        # True Range
        prev_close = close.shift(1)
        tr1 = high - low
        tr2 = abs(high - prev_close)
        tr3 = abs(low - prev_close)
        tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
        
        # Directional Movement
        high_diff = high - high.shift(1)
        low_diff = low.shift(1) - low
        
        plus_dm = np.where((high_diff > low_diff) & (high_diff > 0), high_diff, 0)
        minus_dm = np.where((low_diff > high_diff) & (low_diff > 0), low_diff, 0)
        
        plus_dm = pd.Series(plus_dm, index=high.index)
        minus_dm = pd.Series(minus_dm, index=high.index)
        
        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ –£–∞–π–ª–¥–µ—Ä—É
        atr = TechnicalIndicators.wilder_smoothing(tr, period)
        plus_dm_smooth = TechnicalIndicators.wilder_smoothing(plus_dm, period)
        minus_dm_smooth = TechnicalIndicators.wilder_smoothing(minus_dm, period)
        
        # DI calculation
        plus_di = (plus_dm_smooth / atr) * 100
        minus_di = (minus_dm_smooth / atr) * 100
        
        # DX –∏ ADX calculation
        di_sum = plus_di + minus_di
        di_diff = abs(plus_di - minus_di)
        dx = np.where(di_sum != 0, (di_diff / di_sum) * 100, 0)
        dx_series = pd.Series(dx, index=high.index)
        
        adx = TechnicalIndicators.wilder_smoothing(dx_series, period)
        
        return adx, plus_di, minus_di

class TinkoffDataProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö Tinkoff (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)"""
    
    def __init__(self, token: str):
        self.token = token
        self.figi = "BBG004730N88"  # SBER
    
    async def get_real_data(self, hours: int = 200) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
        if not TINKOFF_AVAILABLE or not self.token:
            return pd.DataFrame()
        
        try:
            with Client(self.token) as client:
                to_time = now()
                from_time = to_time - timedelta(hours=hours)
                
                logger.info(f"üì° –ó–∞–ø—Ä–æ—Å —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö SBER —Å {from_time.strftime('%d.%m %H:%M')} –ø–æ {to_time.strftime('%d.%m %H:%M')}")
                
                response = client.market_data.get_candles(
                    figi=self.figi,
                    from_=from_time,
                    to=to_time,
                    interval=CandleInterval.CANDLE_INTERVAL_HOUR
                )
                
                if response.candles:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(response.candles)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π")
                    return self.candles_to_dataframe(response.candles)
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    return pd.DataFrame()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def candles_to_dataframe(self, candles) -> pd.DataFrame:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame"""
        data = []
        for candle in candles:
            try:
                data.append({
                    'timestamp': candle.time,
                    'open': self.quotation_to_decimal(candle.open),
                    'high': self.quotation_to_decimal(candle.high),
                    'low': self.quotation_to_decimal(candle.low),
                    'close': self.quotation_to_decimal(candle.close),
                    'volume': candle.volume
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏: {e}")
                continue
        
        if not data:
            return pd.DataFrame()
        
        df = pd.DataFrame(data)
        df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
        df = df.sort_values('timestamp').reset_index(drop=True)
        df = df.drop_duplicates(subset=['timestamp'], keep='last')
        
        return df
    
    @staticmethod
    def quotation_to_decimal(quotation) -> float:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ quotation –≤ decimal"""
        try:
            return float(quotation.units + quotation.nano / 1e9)
        except (AttributeError, TypeError):
            return 0.0

class DataGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
    
    def __init__(self, symbol: str = "SBER"):
        self.symbol = symbol
    
    def generate_sample_data(self, days: int = 90) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol} –Ω–∞ {days} –¥–Ω–µ–π...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å (–∫–∞–∂–¥—ã–π —á–∞—Å —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π)
        end_date = datetime.now(timezone.utc)
        start_date = end_date - timedelta(days=days)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤ (10:00-18:30 –ú–°–ö)
        timestamps = []
        current_date = start_date
        
        while current_date <= end_date:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
            if current_date.weekday() < 5:  # 0-4 —ç—Ç–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞
                for hour in range(10, 19):  # 10:00-18:00
                    timestamps.append(current_date.replace(hour=hour, minute=0, second=0))
                # –î–æ–±–∞–≤–ª—è–µ–º 18:30
                timestamps.append(current_date.replace(hour=18, minute=30, second=0))
            current_date += timedelta(days=1)
        
        n_points = len(timestamps)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ SBER
        np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ SBER ~280 —Ä—É–±
        base_price = 280.0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
        returns = np.random.normal(0, 0.008, n_points)  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ~0.8%
        trend = np.sin(np.linspace(0, 4*np.pi, n_points)) * 0.015  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã
        returns += trend
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
        prices = [base_price]
        for i in range(1, n_points):
            new_price = prices[-1] * (1 + returns[i])
            prices.append(max(new_price, 250))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 250
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
        high_prices = [p * np.random.uniform(1.001, 1.015) for p in prices]
        low_prices = [p * np.random.uniform(0.985, 0.999) for p in prices]
        volumes = np.random.randint(800000, 5000000, n_points)
        
        df = pd.DataFrame({
            'timestamp': timestamps,
            'open': prices,
            'high': high_prices,
            'low': low_prices,
            'close': prices,
            'volume': volumes
        })
        
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        return df

class SignalScanner:
    """–°–∫–∞–Ω–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, symbol: str = "SBER"):
        self.symbol = symbol
        self.indicators = TechnicalIndicators()
    
    def calculate_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        logger.info("üìä –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # EMA20
        df['ema20'] = self.indicators.ema(df['close'], 20)
        
        # ADX –∏ DI
        adx, plus_di, minus_di = self.indicators.adx_calculation(
            df['high'], df['low'], df['close'], 14
        )
        
        df['adx'] = adx
        df['plus_di'] = plus_di
        df['minus_di'] = minus_di
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        df['price_vs_ema_pct'] = ((df['close'] - df['ema20']) / df['ema20'] * 100)
        df['di_diff'] = df['plus_di'] - df['minus_di']
        
        logger.info("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
        return df
    
    def find_signals(self, df: pd.DataFrame) -> List[SignalData]:
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏—è–º: —Ü–µ–Ω–∞ > EMA20, ADX > 25, +DI > -DI"""
        logger.info("üîç –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏—è–º...")
        
        signals = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Å–ª–æ–≤–∏—è–º
        conditions = (
            (df['close'] > df['ema20']) &      # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
            (df['adx'] > 25) &                 # ADX > 25
            (df['plus_di'] > df['minus_di']) & # +DI > -DI
            (df['ema20'].notna()) &            # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è EMA
            (df['adx'].notna())                # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ADX
        )
        
        filtered_df = df[conditions].copy()
        
        logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} —Ç–æ—á–µ–∫, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        for idx, row in filtered_df.iterrows():
            
            # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ (0-100%)
            signal_strength = self.calculate_signal_strength(row)
            
            signal = SignalData(
                timestamp=row['timestamp'].strftime('%Y-%m-%d %H:%M:%S'),
                symbol=self.symbol,
                price=round(row['close'], 2),
                ema20=round(row['ema20'], 2),
                adx=round(row['adx'], 2),
                plus_di=round(row['plus_di'], 2),
                minus_di=round(row['minus_di'], 2),
                volume=int(row['volume']),
                price_vs_ema_pct=round(row['price_vs_ema_pct'], 2),
                di_diff=round(row['di_diff'], 2),
                signal_strength=round(signal_strength, 1)
            )
            
            signals.append(signal)
        
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        return signals
    
    def calculate_signal_strength(self, row) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ (0-100%)"""
        strength = 0
        
        # 1. –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –ø–æ ADX (0-30 –±–∞–ª–ª–æ–≤)
        if row['adx'] >= 50:
            adx_strength = 30
        elif row['adx'] >= 40:
            adx_strength = 25
        elif row['adx'] >= 30:
            adx_strength = 20
        else:
            adx_strength = max(0, (row['adx'] - 25) / 25 * 15)
        
        strength += adx_strength
        
        # 2. –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø–æ DI (0-25 –±–∞–ª–ª–æ–≤)
        di_dominance = min(row['di_diff'] / 20 * 25, 25)
        strength += di_dominance
        
        # 3. –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ EMA (0-25 –±–∞–ª–ª–æ–≤)
        ema_distance = abs(row['price_vs_ema_pct'])
        if ema_distance < 0.5:
            ema_strength = 25  # –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ EMA
        elif ema_distance < 1.0:
            ema_strength = 20
        elif ema_distance < 2.0:
            ema_strength = 15
        elif ema_distance < 5.0:
            ema_strength = 10
        else:
            ema_strength = 5  # –î–∞–ª–µ–∫–æ –æ—Ç EMA
        
        strength += ema_strength
        
        # 4. –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (0-20 –±–∞–ª–ª–æ–≤)
        if row['volume'] > 4000000:
            volume_strength = 20
        elif row['volume'] > 3000000:
            volume_strength = 15
        elif row['volume'] > 2000000:
            volume_strength = 12
        elif row['volume'] > 1500000:
            volume_strength = 8
        else:
            volume_strength = 5
        
        strength += volume_strength
        
        return min(strength, 100)

class BacktestEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    
    def __init__(self, symbol: str = "SBER", use_real_data: bool = True):
        self.symbol = symbol
        self.use_real_data = use_real_data
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        token = os.getenv('TINKOFF_TOKEN')
        self.tinkoff_provider = TinkoffDataProvider(token) if token else None
        self.data_generator = DataGenerator(symbol)
        self.scanner = SignalScanner(symbol)
    
    async def run_backtest(self, days: int = 90) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {self.symbol}")
        logger.info("=" * 80)
        
        try:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if self.use_real_data and self.tinkoff_provider and TINKOFF_AVAILABLE:
                df = await self.tinkoff_provider.get_real_data(days * 24 + 100)
                if df.empty:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
                    df = self.data_generator.generate_sample_data(days)
            else:
                df = self.data_generator.generate_sample_data(days)
            
            if df.empty:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
            # 2. –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            df_with_indicators = self.scanner.calculate_indicators(df)
            
            # 3. –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
            signals = self.scanner.find_signals(df_with_indicators)
            
            # 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            analysis = self.analyze_signals(signals, df_with_indicators)
            
            return {
                'signals': signals,
                'analysis': analysis,
                'total_candles': len(df),
                'data_period': f"{df['timestamp'].min()} - {df['timestamp'].max()}",
                'data_source': 'real' if (self.use_real_data and self.tinkoff_provider) else 'simulated'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ: {e}")
            return {}
    
    def analyze_signals(self, signals: List[SignalData], df: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not signals:
            return {"error": "–°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        strengths = [s.signal_strength for s in signals]
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        timestamps = [datetime.strptime(s.timestamp, '%Y-%m-%d %H:%M:%S') for s in signals]
        hours = [ts.hour for ts in timestamps]
        hour_distribution = {}
        for hour in hours:
            hour_distribution[hour] = hour_distribution.get(hour, 0) + 1
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekdays = [ts.weekday() for ts in timestamps]  # 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        weekday_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        weekday_distribution = {}
        for wd in weekdays:
            name = weekday_names[wd]
            weekday_distribution[name] = weekday_distribution.get(name, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ADX
        adx_values = [s.adx for s in signals]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DI
        di_diffs = [s.di_diff for s in signals]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è EMA
        ema_distances = [s.price_vs_ema_pct for s in signals]
        
        analysis = {
            'total_signals': len(signals),
            'signal_strength': {
                'min': min(strengths),
                'max': max(strengths),
                'average': sum(strengths) / len(strengths),
                'median': sorted(strengths)[len(strengths)//2]
            },
            'adx_stats': {
                'min': min(adx_values),
                'max': max(adx_values),
                'average': sum(adx_values) / len(adx_values),
                'above_35': len([x for x in adx_values if x > 35]),
                'above_50': len([x for x in adx_values if x > 50])
            },
            'di_dominance': {
                'min': min(di_diffs),
                'max': max(di_diffs),
                'average': sum(di_diffs) / len(di_diffs),
                'above_10': len([x for x in di_diffs if x > 10]),
                'above_20': len([x for x in di_diffs if x > 20])
            },
            'ema_distance': {
                'min': min(ema_distances),
                'max': max(ema_distances),
                'average': sum(ema_distances) / len(ema_distances)
            },
            'time_distribution': hour_distribution,
            'weekday_distribution': weekday_distribution,
            'signals_per_day': len(signals) / 90  # –ó–∞ –ø–µ—Ä–∏–æ–¥
        }
        
        return analysis

def print_results(results: Dict):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    if not results:
        print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        return
    
    signals = results['signals']
    analysis = results['analysis']
    
    print(f"\n{'='*80}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –°–ò–ì–ù–ê–õ–û–í - {results.get('data_period', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥')}")
    print(f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {'–†–ï–ê–õ–¨–ù–´–ï' if results.get('data_source') == 'real' else '–°–ò–ú–£–õ–ò–†–û–í–ê–ù–ù–´–ï'}")
    print(f"{'='*80}")
    
    print(f"\nüéØ –£–°–õ–û–í–ò–Ø –ü–û–ò–°–ö–ê:")
    print(f"   ‚Ä¢ –¶–µ–Ω–∞ > EMA20")
    print(f"   ‚Ä¢ ADX > 25")
    print(f"   ‚Ä¢ +DI > -DI")
    
    print(f"\nüîç –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results['total_candles']:,}")
    print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {analysis['total_signals']}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–∏–≥–Ω–∞–ª–µ: {(analysis['total_signals'] / results['total_candles'] * 100):.2f}%")
    print(f"   ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å: {analysis['signals_per_day']:.1f}")
    
    print(f"\nüìà –°–ò–õ–ê –°–ò–ì–ù–ê–õ–û–í:")
    strength_stats = analysis['signal_strength']
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞: {strength_stats['average']:.1f}%")
    print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {strength_stats['median']:.1f}%")
    print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {strength_stats['min']:.1f}% - {strength_stats['max']:.1f}%")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–ª–µ
    strong_signals = [s for s in signals if s.signal_strength >= 80]
    medium_signals = [s for s in signals if 60 <= s.signal_strength < 80]
    weak_signals = [s for s in signals if s.signal_strength < 60]
    
    print(f"\nüî• –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–ò–õ–ï:")
    print(f"   ‚Ä¢ –°–∏–ª—å–Ω—ã–µ (‚â•80%): {len(strong_signals)} ({len(strong_signals)/len(signals)*100:.1f}%)")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ (60-80%): {len(medium_signals)} ({len(medium_signals)/len(signals)*100:.1f}%)")
    print(f"   ‚Ä¢ –°–ª–∞–±—ã–µ (<60%): {len(weak_signals)} ({len(weak_signals)/len(signals)*100:.1f}%)")
    
    print(f"\nüìä ADX –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    adx_stats = analysis['adx_stats']
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π ADX: {adx_stats['average']:.1f}")
    print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {adx_stats['min']:.1f} - {adx_stats['max']:.1f}")
    print(f"   ‚Ä¢ ADX > 35: {adx_stats['above_35']} —Å–∏–≥–Ω–∞–ª–æ–≤ ({adx_stats['above_35']/len(signals)*100:.1f}%)")
    print(f"   ‚Ä¢ ADX > 50: {adx_stats['above_50']} —Å–∏–≥–Ω–∞–ª–æ–≤ ({adx_stats['above_50']/len(signals)*100:.1f}%)")
    
    print(f"\nüéØ –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–ï –ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô (+DI > -DI):")
    di_stats = analysis['di_dominance']
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {di_stats['average']:.1f}")
    print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {di_stats['min']:.1f} - {di_stats['max']:.1f}")
    print(f"   ‚Ä¢ –†–∞–∑–Ω–æ—Å—Ç—å > 10: {di_stats['above_10']} —Å–∏–≥–Ω–∞–ª–æ–≤ ({di_stats['above_10']/len(signals)*100:.1f}%)")
    print(f"   ‚Ä¢ –†–∞–∑–Ω–æ—Å—Ç—å > 20: {di_stats['above_20']} —Å–∏–≥–Ω–∞–ª–æ–≤ ({di_stats['above_20']/len(signals)*100:.1f}%)")
    
    print(f"\nüìè –ü–†–ï–í–´–®–ï–ù–ò–ï EMA20:")
    ema_stats = analysis['ema_distance']
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {ema_stats['average']:.2f}%")
    print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {ema_stats['min']:.2f}% - {ema_stats['max']:.2f}%")
    
    print(f"\n‚è∞ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –í–†–ï–ú–ï–ù–ò (—á–∞—Å—ã):")
    time_dist = analysis['time_distribution']
    for hour in sorted(time_dist.keys()):
        count = time_dist[hour]
        percentage = (count / analysis['total_signals'] * 100)
        bar = "‚ñà" * int(percentage / 3)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        print(f"   {hour:02d}:00 | {count:3d} —Å–∏–≥–Ω–∞–ª–æ–≤ ({percentage:4.1f}%) {bar}")
    
    print(f"\nüìÖ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò:")
    weekday_dist = analysis['weekday_distribution']
    for day in ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']:
        count = weekday_dist.get(day, 0)
        if count > 0:
            percentage = (count / analysis['total_signals'] * 100)
            bar = "‚ñà" * int(percentage / 3)
            print(f"   {day} | {count:3d} —Å–∏–≥–Ω–∞–ª–æ–≤ ({percentage:4.1f}%) {bar}")
    
    # –¢–æ–ø-10 —Å–∏–ª—å–Ω–µ–π—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    print(f"\nüèÜ –¢–û–ü-10 –°–ò–õ–¨–ù–ï–ô–®–ò–• –°–ò–ì–ù–ê–õ–û–í:")
    sorted_signals = sorted(signals, key=lambda x: x.signal_strength, reverse=True)[:10]
    
    for i, signal in enumerate(sorted_signals, 1):
        dt = datetime.strptime(signal.timestamp, '%Y-%m-%d %H:%M:%S')
        weekday = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][dt.weekday()]
        
        print(f"\n   {i:2d}. {dt.strftime('%d.%m.%Y %H:%M')} ({weekday})")
        print(f"       üí™ –°–∏–ª–∞: {signal.signal_strength:.1f}%")
        print(f"       üí∞ –¶–µ–Ω–∞: {signal.price} ‚ÇΩ (EMA20: {signal.ema20} ‚ÇΩ)")
        print(f"       üìà ADX: {signal.adx:.1f}, +DI: {signal.plus_di:.1f}, -DI: {signal.minus_di:.1f}")
        print(f"       üìä –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ EMA: +{signal.price_vs_ema_pct:.2f}%, DI —Ä–∞–∑–Ω–æ—Å—Ç—å: {signal.di_diff:.1f}")
        print(f"       üì¶ –û–±—ä–µ–º: {signal.volume:,}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    output_data = {
        'summary': analysis,
        'signals': [asdict(signal) for signal in signals],
        'search_conditions': {
            'price_above_ema20': True,
            'adx_above': 25,
            'plus_di_above_minus_di': True
        },
        'metadata': {
            'total_candles': results['total_candles'],
            'data_period': results['data_period'],
            'data_source': results.get('data_source', 'unknown')
        }
    }
    
    with open('sber_signals_backtest.json', 'w', encoding='utf-8') as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ sber_signals_backtest.json")
    print(f"{'='*80}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ë–≠–ö–¢–ï–°–¢ –ü–û–ò–°–ö–ê –°–ò–ì–ù–ê–õ–û–í SBER")
    print("–£—Å–ª–æ–≤–∏—è: —Ü–µ–Ω–∞ > EMA20, ADX > 25, +DI > -DI")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω Tinkoff
    tinkoff_token = os.getenv('TINKOFF_TOKEN')
    use_real_data = bool(tinkoff_token and TINKOFF_AVAILABLE)
    
    if use_real_data:
        print("üì° –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Tinkoff API")
    else:
        print("üîß –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–ò–ú–£–õ–ò–†–û–í–ê–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ")
        if not TINKOFF_AVAILABLE:
            print("   (tinkoff-investments –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        if not tinkoff_token:
            print("   (TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)")
    
    print("-" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Railway
    port = os.getenv('PORT', '8000')
    railway_env = os.getenv('RAILWAY_ENVIRONMENT')
    
    if railway_env:
        print(f"üöÇ –ó–∞–ø—É—Å–∫ –Ω–∞ Railway –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: {railway_env}")
        print(f"üîå –ü–æ—Ä—Ç: {port}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
        engine = BacktestEngine("SBER", use_real_data=use_real_data)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ 90 –¥–Ω–µ–π
        print("\nüîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ 90 –¥–Ω–µ–π...")
        results = await engine.run_backtest(days=90)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results:
            print_results(results)
            
            # –ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã
            analysis = results['analysis']
            if analysis.get('total_signals', 0) > 0:
                print(f"\nüí° –ö–†–ê–¢–ö–ò–ï –í–´–í–û–î–´:")
                
                strong_pct = len([s for s in results['signals'] if s.signal_strength >= 80]) / len(results['signals']) * 100
                avg_adx = analysis['adx_stats']['average']
                avg_di_diff = analysis['di_dominance']['average']
                signals_per_day = analysis['signals_per_day']
                
                print(f"   üìà –°–∏–≥–Ω–∞–ª—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è {signals_per_day:.1f} —Ä–∞–∑ –≤ –¥–µ–Ω—å")
                print(f"   üî• {strong_pct:.1f}% —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–º–µ—é—Ç —Å–∏–ª—É ‚â•80%")
                print(f"   üìä –°—Ä–µ–¥–Ω–∏–π ADX: {avg_adx:.1f} (—Ç—Ä–µ–Ω–¥ {'—Å–∏–ª—å–Ω—ã–π' if avg_adx > 35 else '—É–º–µ—Ä–µ–Ω–Ω—ã–π'})")
                print(f"   üéØ –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å DI: {avg_di_diff:.1f} (–¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {'—Å–∏–ª—å–Ω–æ–µ' if avg_di_diff > 15 else '—É–º–µ—Ä–µ–Ω–Ω–æ–µ'})")
                
                # –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                time_dist = analysis['time_distribution']
                if time_dist:
                    best_hour = max(time_dist.items(), key=lambda x: x[1])
                    print(f"   ‚è∞ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ {best_hour[0]:02d}:00 ({best_hour[1]} —Å–∏–≥–Ω–∞–ª–æ–≤)")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                if strong_pct >= 30:
                    print(f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ö–æ—Ä–æ—à–µ–µ - –º–Ω–æ–≥–æ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                else:
                    print(f"   ‚ö†Ô∏è –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")
                
                if avg_adx >= 35:
                    print(f"   ‚úÖ ADX –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã")
                else:
                    print(f"   ‚ö†Ô∏è ADX —É–º–µ—Ä–µ–Ω–Ω—ã–π - –≤–æ–∑–º–æ–∂–Ω—ã –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –±–æ–∫–æ–≤–∏–∫–µ")
                
                if signals_per_day >= 3:
                    print(f"   ‚ö†Ô∏è –ú–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
                elif signals_per_day >= 1:
                    print(f"   ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
                else:
                    print(f"   ‚ö†Ô∏è –ú–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–º—è–≥—á–∏—Ç—å —É—Å–ª–æ–≤–∏—è")
            
            else:
                print(f"\n‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                print(f"   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                print(f"   ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å ADX —Å 25 –¥–æ 20-23")
                print(f"   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä")
                print(f"   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞")
        
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞")
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –î–ª—è Railway - –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        if railway_env:
            await serve_web_results(port, results)
    
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

async def serve_web_results(port: str, results: Dict):
    """–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway"""
    print(f"\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    import http.server
    import socketserver
    from urllib.parse import parse_qs
    
    class CustomHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/':
                self.send_response(200)
                self.send_header('Content-type', 'text/html; charset=utf-8')
                self.end_headers()
                
                if results and results.get('analysis'):
                    analysis = results['analysis']
                    signals_count = analysis.get('total_signals', 0)
                    avg_strength = analysis.get('signal_strength', {}).get('average', 0)
                    signals_per_day = analysis.get('signals_per_day', 0)
                    data_source = results.get('data_source', 'unknown')
                    
                    # –¢–æ–ø-3 —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    top_signals = sorted(results['signals'], key=lambda x: x.signal_strength, reverse=True)[:3]
                    
                    signals_html = ""
                    for i, signal in enumerate(top_signals, 1):
                        signals_html += f"""
                        <div class="signal">
                            <h4>#{i} –°–∏–≥–Ω–∞–ª - –°–∏–ª–∞: {signal.signal_strength}%</h4>
                            <p><strong>–í—Ä–µ–º—è:</strong> {signal.timestamp}</p>
                            <p><strong>–¶–µ–Ω–∞:</strong> {signal.price} ‚ÇΩ (EMA20: {signal.ema20} ‚ÇΩ)</p>
                            <p><strong>ADX:</strong> {signal.adx} | <strong>+DI:</strong> {signal.plus_di} | <strong>-DI:</strong> {signal.minus_di}</p>
                            <p><strong>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ EMA:</strong> +{signal.price_vs_ema_pct}%</p>
                        </div>
                        """
                    
                else:
                    signals_count = 0
                    avg_strength = 0
                    signals_per_day = 0
                    data_source = 'none'
                    signals_html = "<p>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>"
                
                html = f"""
                <!DOCTYPE html>
                <html>
                <head>
                    <title>SBER Signals Backtest Results</title>
                    <meta charset="utf-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1">
                    <style>
                        body {{ 
                            font-family: 'Segoe UI', Arial, sans-serif; 
                            margin: 0; 
                            padding: 20px; 
                            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                            color: #333;
                            min-height: 100vh;
                        }}
                        .container {{
                            max-width: 1000px;
                            margin: 0 auto;
                            background: white;
                            border-radius: 15px;
                            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                            padding: 30px;
                        }}
                        h1 {{ 
                            color: #2c3e50; 
                            text-align: center;
                            margin-bottom: 10px;
                            font-size: 2.5em;
                        }}
                        .subtitle {{
                            text-align: center;
                            color: #7f8c8d;
                            margin-bottom: 30px;
                            font-size: 1.1em;
                        }}
                        .stats {{ 
                            display: grid;
                            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                            gap: 20px;
                            margin-bottom: 30px;
                        }}
                        .stat-card {{
                            background: linear-gradient(135deg, #74b9ff, #0984e3);
                            color: white;
                            padding: 20px;
                            border-radius: 10px;
                            text-align: center;
                            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                        }}
                        .stat-value {{
                            font-size: 2.5em;
                            font-weight: bold;
                            margin-bottom: 5px;
                        }}
                        .stat-label {{
                            font-size: 1em;
                            opacity: 0.9;
                        }}
                        .signals-section {{
                            margin-top: 30px;
                        }}
                        .signal {{ 
                            border: 2px solid #74b9ff;
                            margin: 15px 0; 
                            padding: 20px; 
                            border-radius: 10px;
                            background: #f8f9fa;
                            transition: transform 0.2s;
                        }}
                        .signal:hover {{
                            transform: translateY(-2px);
                            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                        }}
                        .signal h4 {{
                            color: #2c3e50;
                            margin: 0 0 15px 0;
                            font-size: 1.3em;
                        }}
                        .signal p {{
                            margin: 8px 0;
                            color: #555;
                        }}
                        .conditions {{
                            background: #e8f5e8;
                            padding: 20px;
                            border-radius: 10px;
                            margin: 20px 0;
                            border-left: 5px solid #27ae60;
                        }}
                        .footer {{
                            text-align: center;
                            margin-top: 30px;
                            padding-top: 20px;
                            border-top: 2px solid #eee;
                            color: #7f8c8d;
                        }}
                        .data-source {{
                            display: inline-block;
                            padding: 5px 15px;
                            background: {'#27ae60' if data_source == 'real' else '#f39c12'};
                            color: white;
                            border-radius: 20px;
                            font-size: 0.9em;
                            margin: 10px 5px;
                        }}
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>üéØ SBER Signals Backtest</h1>
                        <div class="subtitle">–ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤: —Ü–µ–Ω–∞ > EMA20, ADX > 25, +DI > -DI</div>
                        
                        <div class="conditions">
                            <h3>üìã –£—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞:</h3>
                            <ul>
                                <li><strong>–¶–µ–Ω–∞ –≤—ã—à–µ EMA20</strong> - –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥</li>
                                <li><strong>ADX > 25</strong> - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞</li>  
                                <li><strong>+DI > -DI</strong> - –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</li>
                            </ul>
                        </div>
                        
                        <div class="stats">
                            <div class="stat-card">
                                <div class="stat-value">{signals_count}</div>
                                <div class="stat-label">–ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value">{avg_strength:.1f}%</div>
                                <div class="stat-label">–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value">{signals_per_day:.1f}</div>
                                <div class="stat-label">–°–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å</div>
                            </div>
                        </div>
                        
                        <div class="data-source">
                            üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {{'–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Tinkoff' if data_source == 'real' else '–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}}
                        </div>
                        
                        <div class="signals-section">
                            <h2>üèÜ –¢–æ–ø —Å–∏–ª—å–Ω–µ–π—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:</h2>
                            {signals_html}
                        </div>
                        
                        <div class="footer">
                            <p>–ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª–æ–≥–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª–µ sber_signals_backtest.json</p>
                            <p>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} UTC</p>
                        </div>
                    </div>
                </body>
                </html>
                """
                self.wfile.write(html.encode('utf-8'))
            
            elif self.path == '/json':
                # API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                if results:
                    json_data = json.dumps(results, default=str, ensure_ascii=False, indent=2)
                    self.wfile.write(json_data.encode('utf-8'))
                else:
                    self.wfile.write(b'{"error": "No results available"}')
            
            else:
                super().do_GET()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        with socketserver.TCPServer(("", int(port)), CustomHandler) as httpd:
            print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
            print(f"üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://0.0.0.0:{port}")
            print(f"üìÅ JSON API: http://0.0.0.0:{port}/json")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
